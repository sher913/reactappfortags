{"ast":null,"code":"/*! SearchPanes 1.3.0\n * 2019-2020 SpryMedia Ltd - datatables.net/license\n */\n(function () {\n  'use strict';\n\n  var $;\n  var dataTable;\n\n  function setJQuery(jq) {\n    $ = jq;\n    dataTable = jq.fn.dataTable;\n  }\n\n  var SearchPane = function () {\n    /**\n     * Creates the panes, sets up the search function\n     *\n     * @param paneSettings The settings for the searchPanes\n     * @param opts The options for the default features\n     * @param idx the index of the column for this pane\n     * @returns {object} the pane that has been created, including the table and the index of the pane\n     */\n    function SearchPane(paneSettings, opts, idx, layout, panesContainer, panes) {\n      var _this = this;\n\n      if (panes === void 0) {\n        panes = null;\n      } // Check that the required version of DataTables is included\n\n\n      if (!dataTable || !dataTable.versionCheck || !dataTable.versionCheck('1.10.0')) {\n        throw new Error('SearchPane requires DataTables 1.10 or newer');\n      } // Check that Select is included\n\n\n      if (!dataTable.select) {\n        throw new Error('SearchPane requires Select');\n      }\n\n      var table = new dataTable.Api(paneSettings);\n      this.classes = $.extend(true, {}, SearchPane.classes); // Get options from user\n\n      this.c = $.extend(true, {}, SearchPane.defaults, opts);\n\n      if (opts !== undefined && opts.hideCount !== undefined && opts.viewCount === undefined) {\n        this.c.viewCount = !this.c.hideCount;\n      }\n\n      this.customPaneSettings = panes;\n      this.s = {\n        cascadeRegen: false,\n        clearing: false,\n        colOpts: [],\n        deselect: false,\n        displayed: false,\n        dt: table,\n        dtPane: undefined,\n        filteringActive: false,\n        forceViewTotal: false,\n        index: idx,\n        indexes: [],\n        lastCascade: false,\n        lastSelect: false,\n        listSet: false,\n        name: undefined,\n        redraw: false,\n        rowData: {\n          arrayFilter: [],\n          arrayOriginal: [],\n          arrayTotals: [],\n          bins: {},\n          binsOriginal: {},\n          binsTotal: {},\n          filterMap: new Map(),\n          totalOptions: 0\n        },\n        scrollTop: 0,\n        searchFunction: undefined,\n        selectPresent: false,\n        serverSelect: [],\n        serverSelecting: false,\n        showFiltered: false,\n        tableLength: null,\n        updating: false\n      };\n      var rowLength = table.columns().eq(0).toArray().length;\n      this.colExists = this.s.index < rowLength; // Add extra elements to DOM object including clear and hide buttons\n\n      this.c.layout = layout;\n      var layVal = parseInt(layout.split('-')[1], 10);\n      this.dom = {\n        buttonGroup: $('<div/>').addClass(this.classes.buttonGroup),\n        clear: $('<button type=\"button\">&#215;</button>').addClass(this.classes.disabledButton).attr('disabled', 'true').addClass(this.classes.paneButton).addClass(this.classes.clearButton),\n        container: $('<div/>').addClass(this.classes.container).addClass(this.classes.layout + (layVal < 10 ? layout : layout.split('-')[0] + '-9')),\n        countButton: $('<button type=\"button\"></button>').addClass(this.classes.paneButton).addClass(this.classes.countButton),\n        dtP: $('<table><thead><tr><th>' + (this.colExists ? $(table.column(this.colExists ? this.s.index : 0).header()).text() : this.customPaneSettings.header || 'Custom Pane') + '</th><th/></tr></thead></table>'),\n        lower: $('<div/>').addClass(this.classes.subRow2).addClass(this.classes.narrowButton),\n        nameButton: $('<button type=\"button\"></button>').addClass(this.classes.paneButton).addClass(this.classes.nameButton),\n        panesContainer: panesContainer,\n        searchBox: $('<input/>').addClass(this.classes.paneInputButton).addClass(this.classes.search),\n        searchButton: $('<button type = \"button\" class=\"' + this.classes.searchIcon + '\"></button>').addClass(this.classes.paneButton),\n        searchCont: $('<div/>').addClass(this.classes.searchCont),\n        searchLabelCont: $('<div/>').addClass(this.classes.searchLabelCont),\n        topRow: $('<div/>').addClass(this.classes.topRow),\n        upper: $('<div/>').addClass(this.classes.subRow1).addClass(this.classes.narrowSearch)\n      };\n      this.s.displayed = false;\n      table = this.s.dt;\n      this.selections = [];\n      this.s.colOpts = this.colExists ? this._getOptions() : this._getBonusOptions();\n      var colOpts = this.s.colOpts;\n      var clear = $('<button type=\"button\">X</button>').addClass(this.classes.paneButton);\n      $(clear).text(table.i18n('searchPanes.clearPane', this.c.i18n.clearPane));\n      this.dom.container.addClass(colOpts.className);\n      this.dom.container.addClass(this.customPaneSettings !== null && this.customPaneSettings.className !== undefined ? this.customPaneSettings.className : ''); // Set the value of name incase ordering is desired\n\n      if (this.s.colOpts.name !== undefined) {\n        this.s.name = this.s.colOpts.name;\n      } else if (this.customPaneSettings !== null && this.customPaneSettings.name !== undefined) {\n        this.s.name = this.customPaneSettings.name;\n      } else {\n        this.s.name = this.colExists ? $(table.column(this.s.index).header()).text() : this.customPaneSettings.header || 'Custom Pane';\n      }\n\n      $(panesContainer).append(this.dom.container);\n      var tableNode = table.table(0).node(); // Custom search function for table\n\n      this.s.searchFunction = function (settings, searchData, dataIndex, origData) {\n        // If no data has been selected then show all\n        if (_this.selections.length === 0) {\n          return true;\n        }\n\n        if (settings.nTable !== tableNode) {\n          return true;\n        }\n\n        var filter = null;\n\n        if (_this.colExists) {\n          // Get the current filtered data\n          filter = searchData[_this.s.index];\n\n          if (colOpts.orthogonal.filter !== 'filter') {\n            // get the filter value from the map\n            filter = _this.s.rowData.filterMap.get(dataIndex);\n\n            if (filter instanceof $.fn.dataTable.Api) {\n              filter = filter.toArray();\n            }\n          }\n        }\n\n        return _this._search(filter, dataIndex);\n      };\n\n      $.fn.dataTable.ext.search.push(this.s.searchFunction); // If the clear button for this pane is clicked clear the selections\n\n      if (this.c.clear) {\n        $(clear).on('click', function () {\n          var searches = _this.dom.container.find('.' + _this.classes.search.replace(/\\s+/g, '.'));\n\n          searches.each(function () {\n            $(this).val('');\n            $(this).trigger('input');\n          });\n\n          _this.clearPane();\n        });\n      } // Sometimes the top row of the panes containing the search box and ordering buttons appears\n      //  weird if the width of the panes is lower than expected, this fixes the design.\n      // Equally this may occur when the table is resized.\n\n\n      table.on('draw.dtsp', function () {\n        _this.adjustTopRow();\n      });\n      table.on('buttons-action', function () {\n        _this.adjustTopRow();\n      }); // When column-reorder is present and the columns are moved, it is necessary to\n      //  reassign all of the panes indexes to the new index of the column.\n\n      table.on('column-reorder.dtsp', function (e, settings, details) {\n        _this.s.index = details.mapping[_this.s.index];\n      });\n      return this;\n    }\n    /**\n     * Adds a row to the panes table\n     *\n     * @param display the value to be displayed to the user\n     * @param filter the value to be filtered on when searchpanes is implemented\n     * @param shown the number of rows in the table that are currently visible matching this criteria\n     * @param total the total number of rows in the table that match this criteria\n     * @param sort the value to be sorted in the pane table\n     * @param type the value of which the type is to be derived from\n     */\n\n\n    SearchPane.prototype.addRow = function (display, filter, shown, total, sort, type, className) {\n      var index;\n\n      for (var _i = 0, _a = this.s.indexes; _i < _a.length; _i++) {\n        var entry = _a[_i];\n\n        if (entry.filter === filter) {\n          index = entry.index;\n        }\n      }\n\n      if (index === undefined) {\n        index = this.s.indexes.length;\n        this.s.indexes.push({\n          filter: filter,\n          index: index\n        });\n      }\n\n      return this.s.dtPane.row.add({\n        className: className,\n        display: display !== '' ? display : this.emptyMessage(),\n        filter: filter,\n        index: index,\n        shown: shown,\n        sort: sort,\n        total: total,\n        type: type\n      });\n    };\n    /**\n     * Adjusts the layout of the top row when the screen is resized\n     */\n\n\n    SearchPane.prototype.adjustTopRow = function () {\n      var subContainers = this.dom.container.find('.' + this.classes.subRowsContainer.replace(/\\s+/g, '.'));\n      var subRow1 = this.dom.container.find('.' + this.classes.subRow1.replace(/\\s+/g, '.'));\n      var subRow2 = this.dom.container.find('.' + this.classes.subRow2.replace(/\\s+/g, '.'));\n      var topRow = this.dom.container.find('.' + this.classes.topRow.replace(/\\s+/g, '.')); // If the width is 0 then it is safe to assume that the pane has not yet been displayed.\n      //  Even if it has, if the width is 0 it won't make a difference if it has the narrow class or not\n\n      if (($(subContainers[0]).width() < 252 || $(topRow[0]).width() < 252) && $(subContainers[0]).width() !== 0) {\n        $(subContainers[0]).addClass(this.classes.narrow);\n        $(subRow1[0]).addClass(this.classes.narrowSub).removeClass(this.classes.narrowSearch);\n        $(subRow2[0]).addClass(this.classes.narrowSub).removeClass(this.classes.narrowButton);\n      } else {\n        $(subContainers[0]).removeClass(this.classes.narrow);\n        $(subRow1[0]).removeClass(this.classes.narrowSub).addClass(this.classes.narrowSearch);\n        $(subRow2[0]).removeClass(this.classes.narrowSub).addClass(this.classes.narrowButton);\n      }\n    };\n    /**\n     * In the case of a rebuild there is potential for new data to have been included or removed\n     * so all of the rowData must be reset as a precaution.\n     */\n\n\n    SearchPane.prototype.clearData = function () {\n      this.s.rowData = {\n        arrayFilter: [],\n        arrayOriginal: [],\n        arrayTotals: [],\n        bins: {},\n        binsOriginal: {},\n        binsTotal: {},\n        filterMap: new Map(),\n        totalOptions: 0\n      };\n    };\n    /**\n     * Clear the selections in the pane\n     */\n\n\n    SearchPane.prototype.clearPane = function () {\n      // Deselect all rows which are selected and update the table and filter count.\n      this.s.dtPane.rows({\n        selected: true\n      }).deselect();\n      this.updateTable();\n      return this;\n    };\n    /**\n     * Strips all of the SearchPanes elements from the document and turns all of the listeners for the buttons off\n     */\n\n\n    SearchPane.prototype.destroy = function () {\n      $(this.s.dtPane).off('.dtsp');\n      $(this.s.dt).off('.dtsp');\n      $(this.dom.nameButton).off('.dtsp');\n      $(this.dom.countButton).off('.dtsp');\n      $(this.dom.clear).off('.dtsp');\n      $(this.dom.searchButton).off('.dtsp');\n      $(this.dom.container).remove();\n      var searchIdx = $.fn.dataTable.ext.search.indexOf(this.s.searchFunction);\n\n      while (searchIdx !== -1) {\n        $.fn.dataTable.ext.search.splice(searchIdx, 1);\n        searchIdx = $.fn.dataTable.ext.search.indexOf(this.s.searchFunction);\n      } // If the datatables have been defined for the panes then also destroy these\n\n\n      if (this.s.dtPane !== undefined) {\n        this.s.dtPane.destroy();\n      }\n\n      this.s.listSet = false;\n    };\n    /**\n     * Getting the legacy message is a little complex due a legacy parameter\n     */\n\n\n    SearchPane.prototype.emptyMessage = function () {\n      var def = this.c.i18n.emptyMessage; // Legacy parameter support\n\n      if (this.c.emptyMessage) {\n        def = this.c.emptyMessage;\n      } // Override per column\n\n\n      if (this.s.colOpts.emptyMessage !== false && this.s.colOpts.emptyMessage !== null) {\n        def = this.s.colOpts.emptyMessage;\n      }\n\n      return this.s.dt.i18n('searchPanes.emptyMessage', def);\n    };\n    /**\n     * Updates the number of filters that have been applied in the title\n     */\n\n\n    SearchPane.prototype.getPaneCount = function () {\n      return this.s.dtPane !== undefined ? this.s.dtPane.rows({\n        selected: true\n      }).data().toArray().length : 0;\n    };\n    /**\n     * Rebuilds the panes from the start having deleted the old ones\n     *\n     * @param? last boolean to indicate if this is the last pane a selection was made in\n     * @param? dataIn data to be used in buildPane\n     * @param? init Whether this is the initial draw or not\n     * @param? maintainSelection Whether the current selections are to be maintained over rebuild\n     */\n\n\n    SearchPane.prototype.rebuildPane = function (last, dataIn, init, maintainSelection) {\n      if (last === void 0) {\n        last = false;\n      }\n\n      if (dataIn === void 0) {\n        dataIn = null;\n      }\n\n      if (init === void 0) {\n        init = null;\n      }\n\n      if (maintainSelection === void 0) {\n        maintainSelection = false;\n      }\n\n      this.clearData();\n      var selectedRows = [];\n      this.s.serverSelect = [];\n      var prevEl = null; // When rebuilding strip all of the HTML Elements out of the container and start from scratch\n\n      if (this.s.dtPane !== undefined) {\n        if (maintainSelection) {\n          if (!this.s.dt.page.info().serverSide) {\n            selectedRows = this.s.dtPane.rows({\n              selected: true\n            }).data().toArray();\n          } else {\n            this.s.serverSelect = this.s.dtPane.rows({\n              selected: true\n            }).data().toArray();\n          }\n        }\n\n        this.s.dtPane.clear().destroy();\n        prevEl = $(this.dom.container).prev();\n        this.destroy();\n        this.s.dtPane = undefined;\n        $.fn.dataTable.ext.search.push(this.s.searchFunction);\n      }\n\n      this.dom.container.removeClass(this.classes.hidden);\n      this.s.displayed = false;\n\n      this._buildPane(!this.s.dt.page.info().serverSide ? selectedRows : this.s.serverSelect, last, dataIn, init, prevEl);\n\n      return this;\n    };\n    /**\n     * removes the pane from the page and sets the displayed property to false.\n     */\n\n\n    SearchPane.prototype.removePane = function () {\n      this.s.displayed = false;\n      $(this.dom.container).hide();\n    };\n    /**\n     * Resizes the pane based on the layout that is passed in\n     *\n     * @param layout the layout to be applied to this pane\n     */\n\n\n    SearchPane.prototype.resize = function (layout) {\n      this.c.layout = layout;\n      var layVal = parseInt(layout.split('-')[1], 10);\n      $(this.dom.container).removeClass().addClass(this.classes.container).addClass(this.classes.layout + (layVal < 10 ? layout : layout.split('-')[0] + '-9')).addClass(this.s.colOpts.className).addClass(this.customPaneSettings !== null && this.customPaneSettings.className !== undefined ? this.customPaneSettings.className : '').addClass(this.classes.show);\n      this.adjustTopRow();\n    };\n    /**\n     * Sets the cascadeRegen property of the pane. Accessible from above because as SearchPanes.ts\n     * deals with the rebuilds.\n     *\n     * @param val the boolean value that the cascadeRegen property is to be set to\n     */\n\n\n    SearchPane.prototype.setCascadeRegen = function (val) {\n      this.s.cascadeRegen = val;\n    };\n    /**\n     * This function allows the clearing property to be assigned. This is used when implementing cascadePane.\n     * In setting this to true for the clearing of the panes selection on the deselects it forces the pane to\n     * repopulate from the entire dataset not just the displayed values.\n     *\n     * @param val the boolean value which the clearing property is to be assigned\n     */\n\n\n    SearchPane.prototype.setClear = function (val) {\n      this.s.clearing = val;\n    };\n    /**\n     * Updates the values of all of the panes\n     *\n     * @param draw whether this has been triggered by a draw event or not\n     */\n\n\n    SearchPane.prototype.updatePane = function (draw) {\n      if (draw === void 0) {\n        draw = false;\n      }\n\n      this.s.updating = true;\n\n      this._updateCommon(draw);\n\n      this.s.updating = false;\n    };\n    /**\n     * Updates the panes if one of the options to do so has been set to true\n     * rather than the filtered message when using viewTotal.\n     */\n\n\n    SearchPane.prototype.updateTable = function () {\n      var selectedRows = this.s.dtPane.rows({\n        selected: true\n      }).data().toArray();\n      this.selections = selectedRows;\n\n      this._searchExtras(); // If either of the options that effect how the panes are displayed are selected then update the Panes\n\n\n      if (this.c.cascadePanes || this.c.viewTotal) {\n        this.updatePane();\n      }\n    };\n    /**\n     * Sets the listeners for the pane.\n     *\n     * Having it in it's own function makes it easier to only set them once\n     */\n\n\n    SearchPane.prototype._setListeners = function () {\n      var _this = this;\n\n      var rowData = this.s.rowData;\n      var t0; // When an item is selected on the pane, add these to the array which holds selected items.\n      // Custom search will perform.\n\n      this.s.dtPane.on('select.dtsp', function () {\n        clearTimeout(t0);\n\n        if (_this.s.dt.page.info().serverSide && !_this.s.updating) {\n          if (!_this.s.serverSelecting) {\n            _this.s.serverSelect = _this.s.dtPane.rows({\n              selected: true\n            }).data().toArray();\n            _this.s.scrollTop = $(_this.s.dtPane.table().node()).parent()[0].scrollTop;\n            _this.s.selectPresent = true;\n\n            _this.s.dt.draw(false);\n          }\n        } else {\n          $(_this.dom.clear).removeClass(_this.classes.disabledButton).removeAttr('disabled');\n\n          if (!_this.s.updating) {\n            _this.s.selectPresent = true;\n\n            _this._makeSelection();\n\n            _this.s.selectPresent = false;\n          }\n        }\n      }); // When an item is deselected on the pane, re add the currently selected items to the array\n      // which holds selected items. Custom search will be performed.\n\n      this.s.dtPane.on('deselect.dtsp', function () {\n        t0 = setTimeout(function () {\n          if (_this.s.dt.page.info().serverSide && !_this.s.updating) {\n            if (!_this.s.serverSelecting) {\n              _this.s.serverSelect = _this.s.dtPane.rows({\n                selected: true\n              }).data().toArray();\n              _this.s.deselect = true;\n\n              _this.s.dt.draw(false);\n            }\n          } else {\n            _this.s.deselect = true;\n\n            if (_this.s.dtPane.rows({\n              selected: true\n            }).data().toArray().length === 0) {\n              $(_this.dom.clear).addClass(_this.classes.disabledButton).attr('disabled', 'true');\n            }\n\n            _this._makeSelection();\n\n            _this.s.deselect = false;\n\n            _this.s.dt.state.save();\n          }\n        }, 50);\n      }); // When saving the state store all of the selected rows for preselection next time around\n\n      this.s.dt.on('stateSaveParams.dtsp', function (e, settings, data) {\n        // If the data being passed in is empty then state clear must have occured so clear the panes state as well\n        if ($.isEmptyObject(data)) {\n          _this.s.dtPane.state.clear();\n\n          return;\n        }\n\n        var selected = [];\n        var searchTerm;\n        var order;\n        var bins;\n        var arrayFilter; // Get all of the data needed for the state save from the pane\n\n        if (_this.s.dtPane !== undefined) {\n          selected = _this.s.dtPane.rows({\n            selected: true\n          }).data().map(function (item) {\n            return item.filter.toString();\n          }).toArray();\n          searchTerm = $(_this.dom.searchBox).val();\n          order = _this.s.dtPane.order();\n          bins = rowData.binsOriginal;\n          arrayFilter = rowData.arrayOriginal;\n        }\n\n        if (data.searchPanes === undefined) {\n          data.searchPanes = {};\n        }\n\n        if (data.searchPanes.panes === undefined) {\n          data.searchPanes.panes = [];\n        }\n\n        for (var i = 0; i < data.searchPanes.panes.length; i++) {\n          if (data.searchPanes.panes[i].id === _this.s.index) {\n            data.searchPanes.panes.splice(i, 1);\n            i--;\n          }\n        } // Add the panes data to the state object\n\n\n        data.searchPanes.panes.push({\n          arrayFilter: arrayFilter,\n          bins: bins,\n          id: _this.s.index,\n          order: order,\n          searchTerm: searchTerm,\n          selected: selected\n        });\n      });\n      this.s.dtPane.on('user-select.dtsp', function (e, _dt, type, cell, originalEvent) {\n        originalEvent.stopPropagation();\n      });\n      this.s.dtPane.on('draw.dtsp', function () {\n        _this.adjustTopRow();\n      }); // When the button to order by the name of the options is clicked then\n      //  change the ordering to whatever it isn't currently\n\n      $(this.dom.nameButton).on('click.dtsp', function () {\n        var currentOrder = _this.s.dtPane.order()[0][1];\n\n        _this.s.dtPane.order([0, currentOrder === 'asc' ? 'desc' : 'asc']).draw();\n\n        _this.s.dt.state.save();\n      }); // When the button to order by the number of entries in the column is clicked then\n      //  change the ordering to whatever it isn't currently\n\n      $(this.dom.countButton).on('click.dtsp', function () {\n        var currentOrder = _this.s.dtPane.order()[0][1];\n\n        _this.s.dtPane.order([1, currentOrder === 'asc' ? 'desc' : 'asc']).draw();\n\n        _this.s.dt.state.save();\n      }); // When the clear button is clicked reset the pane\n\n      $(this.dom.clear).on('click.dtsp', function () {\n        var searches = _this.dom.container.find('.' + _this.classes.search.replace(/ /g, '.'));\n\n        searches.each(function () {\n          // set the value of the search box to be an empty string and then search on that, effectively reseting\n          $(this).val('');\n          $(this).trigger('input');\n        });\n\n        _this.clearPane();\n      }); // When the search button is clicked then draw focus to the search box\n\n      $(this.dom.searchButton).on('click.dtsp', function () {\n        $(_this.dom.searchBox).focus();\n      }); // When a character is inputted into the searchbox search the pane for matching values.\n      // Doing it this way means that no button has to be clicked to trigger a search, it is done asynchronously\n\n      $(this.dom.searchBox).on('input.dtsp', function () {\n        var searchval = $(_this.dom.searchBox).val();\n\n        _this.s.dtPane.search(searchval).draw();\n\n        if (searchval.length > 0 || searchval.length === 0 && _this.s.dtPane.rows({\n          selected: true\n        }).data().toArray().length > 0) {\n          _this.dom.clear.removeClass(_this.classes.disabledButton).removeAttr('disabled');\n        } else {\n          _this.dom.clear.addClass(_this.classes.disabledButton).attr('disabled', 'true');\n        }\n\n        _this.s.dt.state.save();\n      }); // Make sure to save the state once the pane has been built\n\n      this.s.dt.state.save();\n      return true;\n    };\n    /**\n     * Takes in potentially undetected rows and adds them to the array if they are not yet featured\n     *\n     * @param filter the filter value of the potential row\n     * @param display the display value of the potential row\n     * @param sort the sort value of the potential row\n     * @param type the type value of the potential row\n     * @param arrayFilter the array to be populated\n     * @param bins the bins to be populated\n     */\n\n\n    SearchPane.prototype._addOption = function (filter, display, sort, type, arrayFilter, bins) {\n      // If the filter is an array then take a note of this, and add the elements to the arrayFilter array\n      if (Array.isArray(filter) || filter instanceof dataTable.Api) {\n        // Convert to an array so that we can work with it\n        if (filter instanceof dataTable.Api) {\n          filter = filter.toArray();\n          display = display.toArray();\n        }\n\n        if (filter.length === display.length) {\n          for (var i = 0; i < filter.length; i++) {\n            // If we haven't seen this row before add it\n            if (!bins[filter[i]]) {\n              bins[filter[i]] = 1;\n              arrayFilter.push({\n                display: display[i],\n                filter: filter[i],\n                sort: sort[i],\n                type: type[i]\n              });\n            } // Otherwise just increment the count\n            else {\n              bins[filter[i]]++;\n            }\n\n            this.s.rowData.totalOptions++;\n          }\n\n          return;\n        } else {\n          throw new Error('display and filter not the same length');\n        }\n      } // If the values were affected by othogonal data and are not an array then check if it is already present\n      else if (typeof this.s.colOpts.orthogonal === 'string') {\n        if (!bins[filter]) {\n          bins[filter] = 1;\n          arrayFilter.push({\n            display: display,\n            filter: filter,\n            sort: sort,\n            type: type\n          });\n          this.s.rowData.totalOptions++;\n        } else {\n          bins[filter]++;\n          this.s.rowData.totalOptions++;\n          return;\n        }\n      } // Otherwise we must just be adding an option\n      else {\n        arrayFilter.push({\n          display: display,\n          filter: filter,\n          sort: sort,\n          type: type\n        });\n      }\n    };\n    /**\n     * Method to construct the actual pane.\n     *\n     * @param selectedRows previously selected Rows to be reselected\n     * @last boolean to indicate whether this pane was the last one to have a selection made\n     */\n\n\n    SearchPane.prototype._buildPane = function (selectedRows, last, dataIn, init, prevEl) {\n      var _this = this;\n\n      if (selectedRows === void 0) {\n        selectedRows = [];\n      }\n\n      if (last === void 0) {\n        last = false;\n      }\n\n      if (dataIn === void 0) {\n        dataIn = null;\n      }\n\n      if (init === void 0) {\n        init = null;\n      }\n\n      if (prevEl === void 0) {\n        prevEl = null;\n      } // Aliases\n\n\n      this.selections = [];\n      var table = this.s.dt;\n      var column = table.column(this.colExists ? this.s.index : 0);\n      var colOpts = this.s.colOpts;\n      var rowData = this.s.rowData; // Other Variables\n\n      var countMessage = table.i18n('searchPanes.count', this.c.i18n.count);\n      var filteredMessage = table.i18n('searchPanes.countFiltered', this.c.i18n.countFiltered);\n      var loadedFilter = table.state.loaded(); // If the listeners have not been set yet then using the latest state may result in funny errors\n\n      if (this.s.listSet) {\n        loadedFilter = table.state();\n      } // If it is not a custom pane in place\n\n\n      if (this.colExists) {\n        var idx = -1;\n\n        if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.panes) {\n          for (var i = 0; i < loadedFilter.searchPanes.panes.length; i++) {\n            if (loadedFilter.searchPanes.panes[i].id === this.s.index) {\n              idx = i;\n              break;\n            }\n          }\n        } // Perform checks that do not require populate pane to run\n\n\n        if ((colOpts.show === false || colOpts.show !== undefined && colOpts.show !== true) && idx === -1) {\n          this.dom.container.addClass(this.classes.hidden);\n          this.s.displayed = false;\n          return false;\n        } else if (colOpts.show === true || idx !== -1) {\n          this.s.displayed = true;\n        }\n\n        if (!this.s.dt.page.info().serverSide && (dataIn === null || dataIn.searchPanes === null || dataIn.searchPanes.options === null)) {\n          // Only run populatePane if the data has not been collected yet\n          if (rowData.arrayFilter.length === 0) {\n            this._populatePane(last);\n\n            this.s.rowData.totalOptions = 0;\n\n            this._detailsPane(); // If the index is not found then no data has been added to the state for this pane,\n            //  which will only occur if it has previously failed to meet the criteria to be\n            //  displayed, therefore we can just hide it again here\n\n\n            if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.panes && idx === -1) {\n              this.dom.container.addClass(this.classes.hidden);\n              this.s.displayed = false;\n              return;\n            }\n\n            rowData.arrayOriginal = rowData.arrayTotals;\n            rowData.binsOriginal = rowData.binsTotal;\n          }\n\n          var binLength = Object.keys(rowData.binsOriginal).length;\n\n          var uniqueRatio = this._uniqueRatio(binLength, table.rows()[0].length); // Don't show the pane if there isn't enough variance in the data, or there is only 1 entry\n          //  for that pane\n\n\n          if (this.s.displayed === false && ((colOpts.show === undefined && colOpts.threshold === null ? uniqueRatio > this.c.threshold : uniqueRatio > colOpts.threshold) || colOpts.show !== true && binLength <= 1)) {\n            this.dom.container.addClass(this.classes.hidden);\n            this.s.displayed = false;\n            return;\n          } // If the option viewTotal is true then find\n          // the total count for the whole table to display alongside the displayed count\n\n\n          if (this.c.viewTotal && rowData.arrayTotals.length === 0) {\n            this.s.rowData.totalOptions = 0;\n\n            this._detailsPane();\n          } else {\n            rowData.binsTotal = rowData.bins;\n          }\n\n          this.dom.container.addClass(this.classes.show);\n          this.s.displayed = true;\n        } else if (dataIn !== null && dataIn.searchPanes !== null && dataIn.searchPanes.options !== null) {\n          if (dataIn.tableLength !== undefined) {\n            this.s.tableLength = dataIn.tableLength;\n            this.s.rowData.totalOptions = this.s.tableLength;\n          } else if (this.s.tableLength === null || table.rows()[0].length > this.s.tableLength) {\n            this.s.tableLength = table.rows()[0].length;\n            this.s.rowData.totalOptions = this.s.tableLength;\n          }\n\n          var colTitle = table.column(this.s.index).dataSrc();\n\n          if (dataIn.searchPanes.options[colTitle] !== undefined) {\n            for (var _i = 0, _a = dataIn.searchPanes.options[colTitle]; _i < _a.length; _i++) {\n              var dataPoint = _a[_i];\n              this.s.rowData.arrayFilter.push({\n                display: dataPoint.label,\n                filter: dataPoint.value,\n                sort: dataPoint.label,\n                type: dataPoint.label\n              });\n              this.s.rowData.bins[dataPoint.value] = this.c.viewTotal || this.c.cascadePanes ? dataPoint.count : dataPoint.total;\n              this.s.rowData.binsTotal[dataPoint.value] = dataPoint.total;\n            }\n          }\n\n          var binLength = Object.keys(rowData.binsTotal).length;\n\n          var uniqueRatio = this._uniqueRatio(binLength, this.s.tableLength); // Don't show the pane if there isnt enough variance in the data, or there is only 1 entry for that pane\n\n\n          if (this.s.displayed === false && ((colOpts.show === undefined && colOpts.threshold === null ? uniqueRatio > this.c.threshold : uniqueRatio > colOpts.threshold) || colOpts.show !== true && binLength <= 1)) {\n            this.dom.container.addClass(this.classes.hidden);\n            this.s.displayed = false;\n            return;\n          }\n\n          this.s.rowData.arrayOriginal = this.s.rowData.arrayFilter;\n          this.s.rowData.binsOriginal = this.s.rowData.bins;\n          this.s.displayed = true;\n        }\n      } else {\n        this.s.displayed = true;\n      } // If the variance is accceptable then display the search pane\n\n\n      this._displayPane();\n\n      if (!this.s.listSet) {\n        // Here, when the state is loaded if the data object on the original table is empty,\n        //  then a state.clear() must have occurred, so delete all of the panes tables state objects too.\n        this.dom.dtP.on('stateLoadParams.dt', function (e, settings, data) {\n          if ($.isEmptyObject(table.state.loaded())) {\n            $.each(data, function (index, value) {\n              delete data[index];\n            });\n          }\n        });\n      } // Add the container to the document in its original location\n\n\n      if (prevEl !== null && $(this.dom.panesContainer).has(prevEl).length > 0) {\n        $(this.dom.container).insertAfter(prevEl);\n      } else {\n        $(this.dom.panesContainer).prepend(this.dom.container);\n      } // Declare the datatable for the pane\n\n\n      var errMode = $.fn.dataTable.ext.errMode;\n      $.fn.dataTable.ext.errMode = 'none';\n      var haveScroller = dataTable.Scroller;\n      this.s.dtPane = $(this.dom.dtP).DataTable($.extend(true, {\n        columnDefs: [{\n          className: 'dtsp-nameColumn',\n          data: 'display',\n          render: function (data, type, row) {\n            if (type === 'sort') {\n              return row.sort;\n            } else if (type === 'type') {\n              return row.type;\n            }\n\n            var message;\n            message = (_this.s.filteringActive || _this.s.showFiltered) && _this.c.viewTotal || _this.c.viewTotal && _this.s.forceViewTotal ? filteredMessage.replace(/{total}/, row.total) : countMessage.replace(/{total}/, row.total);\n            message = message.replace(/{shown}/, row.shown);\n\n            while (message.indexOf('{total}') !== -1) {\n              message = message.replace(/{total}/, row.total);\n            }\n\n            while (message.indexOf('{shown}') !== -1) {\n              message = message.replace(/{shown}/, row.shown);\n            } // We are displaying the count in the same columne as the name of the search option.\n            // This is so that there is not need to call columns.adjust()\n            //  which in turn speeds up the code\n\n\n            var pill = '<span class=\"' + _this.classes.pill + '\">' + message + '</span>';\n\n            if (!_this.c.viewCount || !colOpts.viewCount) {\n              pill = '';\n            }\n\n            if (type === 'filter') {\n              return typeof data === 'string' && data.match(/<[^>]*>/) !== null ? data.replace(/<[^>]*>/g, '') : data;\n            }\n\n            return '<div class=\"' + _this.classes.nameCont + '\"><span title=\"' + (typeof data === 'string' && data.match(/<[^>]*>/) !== null ? data.replace(/<[^>]*>/g, '') : data) + '\" class=\"' + _this.classes.name + '\">' + data + '</span>' + pill + '</div>';\n          },\n          targets: 0,\n          // Accessing the private datatables property to set type based on the original table.\n          // This is null if not defined by the user, meaning that automatic type detection\n          //  would take place\n          type: table.settings()[0].aoColumns[this.s.index] !== undefined ? table.settings()[0].aoColumns[this.s.index]._sManualType : null\n        }, {\n          className: 'dtsp-countColumn ' + this.classes.badgePill,\n          data: 'shown',\n          orderData: [1, 2],\n          targets: 1,\n          visible: false\n        }, {\n          data: 'total',\n          targets: 2,\n          visible: false\n        }],\n        deferRender: true,\n        dom: 't',\n        info: false,\n        language: this.s.dt.settings()[0].oLanguage,\n        paging: haveScroller ? true : false,\n        scrollX: false,\n        scrollY: '200px',\n        scroller: haveScroller ? true : false,\n        select: true,\n        stateSave: table.settings()[0].oFeatures.bStateSave ? true : false\n      }, this.c.dtOpts, colOpts !== undefined ? colOpts.dtOpts : {}, this.s.colOpts.options !== undefined || !this.colExists ? {\n        createdRow: function (row, data, dataIndex) {\n          $(row).addClass(data.className);\n        }\n      } : undefined, this.customPaneSettings !== null && this.customPaneSettings.dtOpts !== undefined ? this.customPaneSettings.dtOpts : {}, $.fn.dataTable.versionCheck('2') ? {\n        layout: {\n          bottomLeft: null,\n          bottomRight: null,\n          topLeft: null,\n          topRight: null\n        }\n      } : {}));\n      $(this.dom.dtP).addClass(this.classes.table); // Getting column titles is a little messy\n\n      var headerText = 'Custom Pane';\n\n      if (this.customPaneSettings && this.customPaneSettings.header) {\n        headerText = this.customPaneSettings.header;\n      } else if (colOpts.header) {\n        headerText = colOpts.header;\n      } else if (this.colExists) {\n        headerText = $.fn.dataTable.versionCheck('2') ? table.column(this.s.index).title() : table.settings()[0].aoColumns[this.s.index].sTitle;\n      }\n\n      this.dom.searchBox.attr('placeholder', headerText); // As the pane table is not in the document yet we must initialise select ourselves\n\n      $.fn.dataTable.select.init(this.s.dtPane);\n      $.fn.dataTable.ext.errMode = errMode; // If it is not a custom pane\n\n      if (this.colExists) {\n        // On initialisation, do we need to set a filtering value from a\n        // saved state or init option?\n        var search = column.search();\n        search = search ? search.substr(1, search.length - 2).split('|') : []; // Count the number of empty cells\n\n        var count_1 = 0;\n        rowData.arrayFilter.forEach(function (element) {\n          if (element.filter === '') {\n            count_1++;\n          }\n        }); // Add all of the search options to the pane\n\n        for (var i = 0, ien = rowData.arrayFilter.length; i < ien; i++) {\n          var selected = false;\n\n          for (var _b = 0, _c = this.s.serverSelect; _b < _c.length; _b++) {\n            var option = _c[_b];\n\n            if (option.filter === rowData.arrayFilter[i].filter) {\n              selected = true;\n            }\n          }\n\n          if (this.s.dt.page.info().serverSide && (!this.c.cascadePanes || this.c.cascadePanes && rowData.bins[rowData.arrayFilter[i].filter] !== 0 || this.c.cascadePanes && init !== null || selected)) {\n            var row = this.addRow(rowData.arrayFilter[i].display, rowData.arrayFilter[i].filter, init ? rowData.binsTotal[rowData.arrayFilter[i].filter] : rowData.bins[rowData.arrayFilter[i].filter], this.c.viewTotal || init ? String(rowData.binsTotal[rowData.arrayFilter[i].filter]) : rowData.bins[rowData.arrayFilter[i].filter], rowData.arrayFilter[i].sort, rowData.arrayFilter[i].type);\n\n            for (var _d = 0, _e = this.s.serverSelect; _d < _e.length; _d++) {\n              var option = _e[_d];\n\n              if (option.filter === rowData.arrayFilter[i].filter) {\n                this.s.serverSelecting = true;\n                row.select();\n                this.s.serverSelecting = false;\n              }\n            }\n          } else if (!this.s.dt.page.info().serverSide && rowData.arrayFilter[i] && (rowData.bins[rowData.arrayFilter[i].filter] !== undefined || !this.c.cascadePanes)) {\n            this.addRow(rowData.arrayFilter[i].display, rowData.arrayFilter[i].filter, rowData.bins[rowData.arrayFilter[i].filter], rowData.binsTotal[rowData.arrayFilter[i].filter], rowData.arrayFilter[i].sort, rowData.arrayFilter[i].type);\n          } else if (!this.s.dt.page.info().serverSide) {\n            // Just pass an empty string as the message will be calculated based on that in addRow()\n            this.addRow('', count_1, count_1, '', '', '');\n          }\n        }\n      }\n\n      dataTable.select.init(this.s.dtPane); // If there are custom options set or it is a custom pane then get them\n\n      if (colOpts.options !== undefined || this.customPaneSettings !== null && this.customPaneSettings.options !== undefined) {\n        this._getComparisonRows();\n      } // Display the pane\n\n\n      this.s.dtPane.draw();\n      this.adjustTopRow();\n\n      if (!this.s.listSet) {\n        this._setListeners();\n\n        this.s.listSet = true;\n      }\n\n      for (var _f = 0, selectedRows_1 = selectedRows; _f < selectedRows_1.length; _f++) {\n        var selection = selectedRows_1[_f];\n\n        if (selection !== undefined) {\n          for (var _g = 0, _h = this.s.dtPane.rows().indexes().toArray(); _g < _h.length; _g++) {\n            var row = _h[_g];\n\n            if (this.s.dtPane.row(row).data() !== undefined && selection.filter === this.s.dtPane.row(row).data().filter) {\n              // If this is happening when serverSide processing is happening then\n              //  different behaviour is needed\n              if (this.s.dt.page.info().serverSide) {\n                this.s.serverSelecting = true;\n                this.s.dtPane.row(row).select();\n                this.s.serverSelecting = false;\n              } else {\n                this.s.dtPane.row(row).select();\n              }\n            }\n          }\n        }\n      } //  If SSP and the table is ready, apply the search for the pane\n\n\n      if (this.s.dt.page.info().serverSide) {\n        this.s.dtPane.search($(this.dom.searchBox).val()).draw();\n      } // Reload the selection, searchbox entry and ordering from the previous state\n      // Need to check here if SSP that this is the first draw, otherwise it will infinite loop\n\n\n      if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.panes && (dataIn === null || dataIn.draw === 1)) {\n        if (!this.c.cascadePanes) {\n          this._reloadSelect(loadedFilter);\n        }\n\n        for (var _j = 0, _k = loadedFilter.searchPanes.panes; _j < _k.length; _j++) {\n          var pane = _k[_j];\n\n          if (pane.id === this.s.index) {\n            $(this.dom.searchBox).val(pane.searchTerm);\n            $(this.dom.searchBox).trigger('input');\n            this.s.dtPane.order(pane.order).draw();\n          }\n        }\n      } // Make sure to save the state once the pane has been built\n\n\n      this.s.dt.state.save();\n      return true;\n    };\n    /**\n     * Update the array which holds the display and filter values for the table\n     */\n\n\n    SearchPane.prototype._detailsPane = function () {\n      var table = this.s.dt;\n      this.s.rowData.arrayTotals = [];\n      this.s.rowData.binsTotal = {};\n      var settings = this.s.dt.settings()[0];\n      var indexArray = table.rows().indexes();\n\n      if (!this.s.dt.page.info().serverSide) {\n        for (var _i = 0, indexArray_1 = indexArray; _i < indexArray_1.length; _i++) {\n          var rowIdx = indexArray_1[_i];\n\n          this._populatePaneArray(rowIdx, this.s.rowData.arrayTotals, settings, this.s.rowData.binsTotal);\n        }\n      }\n    };\n    /**\n     * Appends all of the HTML elements to their relevant parent Elements\n     */\n\n\n    SearchPane.prototype._displayPane = function () {\n      var container = this.dom.container;\n      var colOpts = this.s.colOpts;\n      var layVal = parseInt(this.c.layout.split('-')[1], 10); //  Empty everything to start again\n\n      $(this.dom.topRow).empty();\n      $(this.dom.dtP).empty();\n      $(this.dom.topRow).addClass(this.classes.topRow); // If there are more than 3 columns defined then make there be a smaller gap between the panes\n\n      if (layVal > 3) {\n        $(this.dom.container).addClass(this.classes.smallGap);\n      }\n\n      $(this.dom.topRow).addClass(this.classes.subRowsContainer);\n      $(this.dom.upper).appendTo(this.dom.topRow);\n      $(this.dom.lower).appendTo(this.dom.topRow);\n      $(this.dom.searchCont).appendTo(this.dom.upper);\n      $(this.dom.buttonGroup).appendTo(this.dom.lower); // If no selections have been made in the pane then disable the clear button\n\n      if (this.c.dtOpts.searching === false || colOpts.dtOpts !== undefined && colOpts.dtOpts.searching === false || !this.c.controls || !colOpts.controls || this.customPaneSettings !== null && this.customPaneSettings.dtOpts !== undefined && this.customPaneSettings.dtOpts.searching !== undefined && !this.customPaneSettings.dtOpts.searching) {\n        $(this.dom.searchBox).removeClass(this.classes.paneInputButton).addClass(this.classes.disabledButton).attr('disabled', 'true');\n      }\n\n      $(this.dom.searchBox).appendTo(this.dom.searchCont); // Create the contents of the searchCont div. Worth noting that this function will change when using semantic ui\n\n      this._searchContSetup(); // If the clear button is allowed to show then display it\n\n\n      if (this.c.clear && this.c.controls && colOpts.controls) {\n        $(this.dom.clear).appendTo(this.dom.buttonGroup);\n      }\n\n      if (this.c.orderable && colOpts.orderable && this.c.controls && colOpts.controls) {\n        $(this.dom.nameButton).appendTo(this.dom.buttonGroup);\n      } // If the count column is hidden then don't display the ordering button for it\n\n\n      if (this.c.viewCount && colOpts.viewCount && this.c.orderable && colOpts.orderable && this.c.controls && colOpts.controls) {\n        $(this.dom.countButton).appendTo(this.dom.buttonGroup);\n      }\n\n      $(this.dom.topRow).prependTo(this.dom.container);\n      $(container).append(this.dom.dtP);\n      $(container).show();\n    };\n    /**\n     * Gets the options for the row for the customPanes\n     *\n     * @returns {object} The options for the row extended to include the options from the user.\n     */\n\n\n    SearchPane.prototype._getBonusOptions = function () {\n      // We need to reset the thresholds as if they have a value in colOpts then that value will be used\n      var defaultMutator = {\n        orthogonal: {\n          threshold: null\n        },\n        threshold: null\n      };\n      return $.extend(true, {}, SearchPane.defaults, defaultMutator, this.c !== undefined ? this.c : {});\n    };\n    /**\n     * Adds the custom options to the pane\n     *\n     * @returns {Array} Returns the array of rows which have been added to the pane\n     */\n\n\n    SearchPane.prototype._getComparisonRows = function () {\n      var colOpts = this.s.colOpts; // Find the appropriate options depending on whether this is a pane for a specific column or a custom pane\n\n      var options = colOpts.options !== undefined ? colOpts.options : this.customPaneSettings !== null && this.customPaneSettings.options !== undefined ? this.customPaneSettings.options : undefined;\n\n      if (options === undefined) {\n        return;\n      }\n\n      var tableVals = this.s.dt.rows({\n        search: 'applied'\n      }).data().toArray();\n      var appRows = this.s.dt.rows({\n        search: 'applied'\n      });\n      var tableValsTotal = this.s.dt.rows().data().toArray();\n      var allRows = this.s.dt.rows();\n      var rows = []; // Clear all of the other rows from the pane, only custom options are to be displayed when they are defined\n\n      this.s.dtPane.clear();\n\n      for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {\n        var comp = options_1[_i]; // Initialise the object which is to be placed in the row\n\n        var insert = comp.label !== '' ? comp.label : this.emptyMessage();\n        var comparisonObj = {\n          className: comp.className,\n          display: insert,\n          filter: typeof comp.value === 'function' ? comp.value : [],\n          shown: 0,\n          sort: insert,\n          total: 0,\n          type: insert\n        }; // If a custom function is in place\n\n        if (typeof comp.value === 'function') {\n          // Count the number of times the function evaluates to true for the data currently being displayed\n          for (var tVal = 0; tVal < tableVals.length; tVal++) {\n            if (comp.value.call(this.s.dt, tableVals[tVal], appRows[0][tVal])) {\n              comparisonObj.shown++;\n            }\n          } // Count the number of times the function evaluates to true for the original data in the Table\n\n\n          for (var i = 0; i < tableValsTotal.length; i++) {\n            if (comp.value.call(this.s.dt, tableValsTotal[i], allRows[0][i])) {\n              comparisonObj.total++;\n            }\n          } // Update the comparisonObj\n\n\n          if (typeof comparisonObj.filter !== 'function') {\n            comparisonObj.filter.push(comp.filter);\n          }\n        } // If cascadePanes is not active or if it is and the comparisonObj should be shown then add it to the pane\n\n\n        if (!this.c.cascadePanes || this.c.cascadePanes && comparisonObj.shown !== 0) {\n          rows.push(this.addRow(comparisonObj.display, comparisonObj.filter, comparisonObj.shown, comparisonObj.total, comparisonObj.sort, comparisonObj.type, comparisonObj.className));\n        }\n      }\n\n      return rows;\n    };\n    /**\n     * Gets the options for the row for the customPanes\n     *\n     * @returns {object} The options for the row extended to include the options from the user.\n     */\n\n\n    SearchPane.prototype._getOptions = function () {\n      var table = this.s.dt; // We need to reset the thresholds as if they have a value in colOpts then that value will be used\n\n      var defaultMutator = {\n        emptyMessage: false,\n        orthogonal: {\n          threshold: null\n        },\n        threshold: null\n      };\n      var columnOptions = table.settings()[0].aoColumns[this.s.index].searchPanes;\n      var colOpts = $.extend(true, {}, SearchPane.defaults, defaultMutator, columnOptions);\n\n      if (columnOptions !== undefined && columnOptions.hideCount !== undefined && columnOptions.viewCount === undefined) {\n        colOpts.viewCount = !columnOptions.hideCount;\n      }\n\n      return colOpts;\n    };\n    /**\n     * This method allows for changes to the panes and table to be made when a selection or a deselection occurs\n     *\n     * @param select Denotes whether a selection has been made or not\n     */\n\n\n    SearchPane.prototype._makeSelection = function () {\n      this.updateTable();\n      this.s.updating = true;\n      this.s.dt.draw();\n      this.s.updating = false;\n    };\n    /**\n     * Fill the array with the values that are currently being displayed in the table\n     *\n     * @param last boolean to indicate whether this was the last pane a selection was made in\n     */\n\n\n    SearchPane.prototype._populatePane = function (last) {\n      if (last === void 0) {\n        last = false;\n      }\n\n      var table = this.s.dt;\n      this.s.rowData.arrayFilter = [];\n      this.s.rowData.bins = {};\n      var settings = this.s.dt.settings()[0]; // If cascadePanes or viewTotal are active it is necessary to get the data which is currently\n      //  being displayed for their functionality.\n      // Also make sure that this was not the last pane to have a selection made\n\n      if (!this.s.dt.page.info().serverSide) {\n        var indexArray = (this.c.cascadePanes || this.c.viewTotal) && !this.s.clearing && !last ? table.rows({\n          search: 'applied'\n        }).indexes() : table.rows().indexes();\n\n        for (var _i = 0, _a = indexArray.toArray(); _i < _a.length; _i++) {\n          var index = _a[_i];\n\n          this._populatePaneArray(index, this.s.rowData.arrayFilter, settings);\n        }\n      }\n    };\n    /**\n     * Populates an array with all of the data for the table\n     *\n     * @param rowIdx The current row index to be compared\n     * @param arrayFilter The array that is to be populated with row Details\n     * @param bins The bins object that is to be populated with the row counts\n     */\n\n\n    SearchPane.prototype._populatePaneArray = function (rowIdx, arrayFilter, settings, bins) {\n      if (bins === void 0) {\n        bins = this.s.rowData.bins;\n      }\n\n      var colOpts = this.s.colOpts; // Retrieve the rendered data from the cell using the fnGetCellData function\n      //  rather than the cell().render API method for optimisation\n\n      if (typeof colOpts.orthogonal === 'string') {\n        var rendered = settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal);\n\n        this.s.rowData.filterMap.set(rowIdx, rendered);\n\n        this._addOption(rendered, rendered, rendered, rendered, arrayFilter, bins);\n      } else {\n        var filter = settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.search); // Null and empty string are to be considered the same value\n\n\n        if (filter === null) {\n          filter = '';\n        }\n\n        if (typeof filter === 'string') {\n          filter = filter.replace(/<[^>]*>/g, '');\n        }\n\n        this.s.rowData.filterMap.set(rowIdx, filter);\n\n        if (!bins[filter]) {\n          bins[filter] = 1;\n\n          this._addOption(filter, settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.display), settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.sort), settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.type), arrayFilter, bins);\n\n          this.s.rowData.totalOptions++;\n        } else {\n          bins[filter]++;\n          this.s.rowData.totalOptions++;\n          return;\n        }\n      }\n    };\n    /**\n     * Reloads all of the previous selects into the panes\n     *\n     * @param loadedFilter The loaded filters from a previous state\n     */\n\n\n    SearchPane.prototype._reloadSelect = function (loadedFilter) {\n      // If the state was not saved don't selected any\n      if (loadedFilter === undefined) {\n        return;\n      }\n\n      var idx; // For each pane, check that the loadedFilter list exists and is not null,\n      // find the id of each search item and set it to be selected.\n\n      for (var i = 0; i < loadedFilter.searchPanes.panes.length; i++) {\n        if (loadedFilter.searchPanes.panes[i].id === this.s.index) {\n          idx = i;\n          break;\n        }\n      }\n\n      if (idx !== undefined) {\n        var table = this.s.dtPane;\n        var rows = table.rows({\n          order: 'index'\n        }).data().map(function (item) {\n          return item.filter !== null ? item.filter.toString() : null;\n        }).toArray();\n\n        for (var _i = 0, _a = loadedFilter.searchPanes.panes[idx].selected; _i < _a.length; _i++) {\n          var filter = _a[_i];\n          var id = -1;\n\n          if (filter !== null) {\n            id = rows.indexOf(filter.toString());\n          }\n\n          if (id > -1) {\n            this.s.serverSelecting = true;\n            table.row(id).select();\n            this.s.serverSelecting = false;\n          }\n        }\n      }\n    };\n    /**\n     * This method decides whether a row should contribute to the pane or not\n     *\n     * @param filter the value that the row is to be filtered on\n     * @param dataIndex the row index\n     */\n\n\n    SearchPane.prototype._search = function (filter, dataIndex) {\n      var colOpts = this.s.colOpts;\n      var table = this.s.dt; // For each item selected in the pane, check if it is available in the cell\n\n      for (var _i = 0, _a = this.selections; _i < _a.length; _i++) {\n        var colSelect = _a[_i];\n\n        if (typeof colSelect.filter === 'string' && typeof filter === 'string') {\n          // The filter value will not have the &amp; in place but a &,\n          //  so we need to do a replace to make sure that they will match\n          colSelect.filter = colSelect.filter.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"');\n        } // if the filter is an array then is the column present in it\n\n\n        if (Array.isArray(filter)) {\n          if (filter.indexOf(colSelect.filter) !== -1) {\n            return true;\n          }\n        } // if the filter is a function then does it meet the criteria of that function or not\n        else if (typeof colSelect.filter === 'function') {\n          if (colSelect.filter.call(table, table.row(dataIndex).data(), dataIndex)) {\n            if (colOpts.combiner === 'or') {\n              return true;\n            }\n          } // If the combiner is an \"and\" then we need to check against all possible selections\n          //  so if it fails here then the and is not met and return false\n          else if (colOpts.combiner === 'and') {\n            return false;\n          }\n        } // otherwise if the two filter values are equal then return true\n        else if (filter === colSelect.filter || !(typeof filter === 'string' && filter.length === 0) && filter == colSelect.filter || colSelect.filter === null && typeof filter === 'string' && filter === '') {\n          return true;\n        }\n      } // If the combiner is an and then we need to check against all possible selections\n      //  so return true here if so because it would have returned false earlier if it had failed\n\n\n      if (colOpts.combiner === 'and') {\n        return true;\n      } // Otherwise it hasn't matched with anything by this point so it must be false\n      else {\n        return false;\n      }\n    };\n    /**\n     * Creates the contents of the searchCont div\n     *\n     * NOTE This is overridden when semantic ui styling in order to integrate the search button into the text box.\n     */\n\n\n    SearchPane.prototype._searchContSetup = function () {\n      if (this.c.controls && this.s.colOpts.controls) {\n        $(this.dom.searchButton).appendTo(this.dom.searchLabelCont);\n      }\n\n      if (!(this.c.dtOpts.searching === false || this.s.colOpts.dtOpts.searching === false || this.customPaneSettings !== null && this.customPaneSettings.dtOpts !== undefined && this.customPaneSettings.dtOpts.searching !== undefined && !this.customPaneSettings.dtOpts.searching)) {\n        $(this.dom.searchLabelCont).appendTo(this.dom.searchCont);\n      }\n    };\n    /**\n     * Adds outline to the pane when a selection has been made\n     */\n\n\n    SearchPane.prototype._searchExtras = function () {\n      var updating = this.s.updating;\n      this.s.updating = true;\n      var filters = this.s.dtPane.rows({\n        selected: true\n      }).data().pluck('filter').toArray();\n      var nullIndex = filters.indexOf(this.emptyMessage());\n      var container = $(this.s.dtPane.table().container()); // If null index is found then search for empty cells as a filter.\n\n      if (nullIndex > -1) {\n        filters[nullIndex] = '';\n      } // If a filter has been applied then outline the respective pane, remove it when it no longer is.\n\n\n      if (filters.length > 0) {\n        container.addClass(this.classes.selected);\n      } else if (filters.length === 0) {\n        container.removeClass(this.classes.selected);\n      }\n\n      this.s.updating = updating;\n    };\n    /**\n     * Finds the ratio of the number of different options in the table to the number of rows\n     *\n     * @param bins the number of different options in the table\n     * @param rowCount the total number of rows in the table\n     * @returns {number} returns the ratio\n     */\n\n\n    SearchPane.prototype._uniqueRatio = function (bins, rowCount) {\n      if (rowCount > 0 && (this.s.rowData.totalOptions > 0 && !this.s.dt.page.info().serverSide || this.s.dt.page.info().serverSide && this.s.tableLength > 0)) {\n        return bins / this.s.rowData.totalOptions;\n      } else {\n        return 1;\n      }\n    };\n    /**\n     * updates the options within the pane\n     *\n     * @param draw a flag to define whether this has been called due to a draw event or not\n     */\n\n\n    SearchPane.prototype._updateCommon = function (draw) {\n      if (draw === void 0) {\n        draw = false;\n      } // Update the panes if doing a deselect. if doing a select then\n      // update all of the panes except for the one causing the change\n\n\n      if (!this.s.dt.page.info().serverSide && this.s.dtPane !== undefined && (!this.s.filteringActive || this.c.cascadePanes || draw === true) && (this.c.cascadePanes !== true || this.s.selectPresent !== true) && (!this.s.lastSelect || !this.s.lastCascade)) {\n        var colOpts = this.s.colOpts;\n        var selected = this.s.dtPane.rows({\n          selected: true\n        }).data().toArray();\n        var scrollTop = $(this.s.dtPane.table().node()).parent()[0].scrollTop;\n        var rowData = this.s.rowData; // Clear the pane in preparation for adding the updated search options\n\n        this.s.dtPane.clear(); // If it is not a custom pane\n\n        if (this.colExists) {\n          // Only run populatePane if the data has not been collected yet\n          if (rowData.arrayFilter.length === 0) {\n            this._populatePane(!this.s.filteringActive);\n          } // If cascadePanes is active and the table has returned to its default state then\n          //  there is a need to update certain parts ofthe rowData.\n          else if (this.c.cascadePanes && this.s.dt.rows().data().toArray().length === this.s.dt.rows({\n            search: 'applied'\n          }).data().toArray().length) {\n            rowData.arrayFilter = rowData.arrayOriginal;\n            rowData.bins = rowData.binsOriginal;\n          } // Otherwise if viewTotal or cascadePanes is active then the data from the table must be read.\n          else if (this.c.viewTotal || this.c.cascadePanes) {\n            this._populatePane(!this.s.filteringActive);\n          } // If the viewTotal option is selected then find the totals for the table\n\n\n          if (this.c.viewTotal) {\n            this._detailsPane();\n          } else {\n            rowData.binsTotal = rowData.bins;\n          }\n\n          if (this.c.viewTotal && !this.c.cascadePanes) {\n            rowData.arrayFilter = rowData.arrayTotals;\n          }\n\n          var _loop_1 = function (dataP) {\n            // If both view Total and cascadePanes have been selected and the count of the row\n            //  is not 0 then add it to pane\n            // Do this also if the viewTotal option has been selected and cascadePanes has not\n            if (dataP && (rowData.bins[dataP.filter] !== undefined && rowData.bins[dataP.filter] !== 0 && this_1.c.cascadePanes || !this_1.c.cascadePanes || this_1.s.clearing)) {\n              var row = this_1.addRow(dataP.display, dataP.filter, !this_1.c.viewTotal ? rowData.bins[dataP.filter] : rowData.bins[dataP.filter] !== undefined ? rowData.bins[dataP.filter] : 0, this_1.c.viewTotal ? String(rowData.binsTotal[dataP.filter]) : rowData.bins[dataP.filter], dataP.sort, dataP.type); // Find out if the filter was selected in the previous search,\n              //  if so select it and remove from array.\n\n              var selectIndex = selected.findIndex(function (element) {\n                return element.filter === dataP.filter;\n              });\n\n              if (selectIndex !== -1) {\n                row.select();\n                selected.splice(selectIndex, 1);\n              }\n            }\n          };\n\n          var this_1 = this;\n\n          for (var _i = 0, _a = rowData.arrayFilter; _i < _a.length; _i++) {\n            var dataP = _a[_i];\n\n            _loop_1(dataP);\n          }\n        }\n\n        if (colOpts.searchPanes !== undefined && colOpts.searchPanes.options !== undefined || colOpts.options !== undefined || this.customPaneSettings !== null && this.customPaneSettings.options !== undefined) {\n          var rows = this._getComparisonRows();\n\n          var _loop_2 = function (row) {\n            var selectIndex = selected.findIndex(function (element) {\n              if (element.display === row.data().display) {\n                return true;\n              }\n            });\n\n            if (selectIndex !== -1) {\n              row.select();\n              selected.splice(selectIndex, 1);\n            }\n          };\n\n          for (var _b = 0, rows_1 = rows; _b < rows_1.length; _b++) {\n            var row = rows_1[_b];\n\n            _loop_2(row);\n          }\n        } // Add search options which were previously selected but whos results are no\n        // longer present in the resulting data set.\n\n\n        for (var _c = 0, selected_1 = selected; _c < selected_1.length; _c++) {\n          var selectedEl = selected_1[_c];\n          var row = this.addRow(selectedEl.display, selectedEl.filter, 0, this.c.viewTotal ? selectedEl.total : 0, selectedEl.display, selectedEl.display);\n          this.s.updating = true;\n          row.select();\n          this.s.updating = false;\n        }\n\n        this.s.dtPane.draw();\n        this.s.dtPane.table().node().parentNode.scrollTop = scrollTop;\n      }\n    };\n\n    SearchPane.version = '1.3.0';\n    SearchPane.classes = {\n      buttonGroup: 'dtsp-buttonGroup',\n      buttonSub: 'dtsp-buttonSub',\n      clear: 'dtsp-clear',\n      clearAll: 'dtsp-clearAll',\n      clearButton: 'clearButton',\n      container: 'dtsp-searchPane',\n      countButton: 'dtsp-countButton',\n      disabledButton: 'dtsp-disabledButton',\n      hidden: 'dtsp-hidden',\n      hide: 'dtsp-hide',\n      layout: 'dtsp-',\n      name: 'dtsp-name',\n      nameButton: 'dtsp-nameButton',\n      nameCont: 'dtsp-nameCont',\n      narrow: 'dtsp-narrow',\n      paneButton: 'dtsp-paneButton',\n      paneInputButton: 'dtsp-paneInputButton',\n      pill: 'dtsp-pill',\n      search: 'dtsp-search',\n      searchCont: 'dtsp-searchCont',\n      searchIcon: 'dtsp-searchIcon',\n      searchLabelCont: 'dtsp-searchButtonCont',\n      selected: 'dtsp-selected',\n      smallGap: 'dtsp-smallGap',\n      subRow1: 'dtsp-subRow1',\n      subRow2: 'dtsp-subRow2',\n      subRowsContainer: 'dtsp-subRowsContainer',\n      title: 'dtsp-title',\n      topRow: 'dtsp-topRow'\n    }; // Define SearchPanes default options\n\n    SearchPane.defaults = {\n      cascadePanes: false,\n      clear: true,\n      combiner: 'or',\n      container: function (dt) {\n        return dt.table().container();\n      },\n      controls: true,\n      dtOpts: {},\n      emptyMessage: null,\n      hideCount: false,\n      i18n: {\n        clearPane: '&times;',\n        count: '{total}',\n        countFiltered: '{shown} ({total})',\n        emptyMessage: '<em>No data</em>'\n      },\n      layout: 'auto',\n      name: undefined,\n      orderable: true,\n      orthogonal: {\n        display: 'display',\n        filter: 'filter',\n        hideCount: false,\n        search: 'filter',\n        show: undefined,\n        sort: 'sort',\n        threshold: 0.6,\n        type: 'type',\n        viewCount: true\n      },\n      preSelect: [],\n      threshold: 0.6,\n      viewCount: true,\n      viewTotal: false\n    };\n    return SearchPane;\n  }();\n\n  var $$1;\n  var dataTable$1;\n\n  function setJQuery$1(jq) {\n    $$1 = jq;\n    dataTable$1 = jq.fn.dataTable;\n  }\n\n  var SearchPanes = function () {\n    function SearchPanes(paneSettings, opts, fromInit) {\n      var _this = this;\n\n      if (fromInit === void 0) {\n        fromInit = false;\n      }\n\n      this.regenerating = false; // Check that the required version of DataTables is included\n\n      if (!dataTable$1 || !dataTable$1.versionCheck || !dataTable$1.versionCheck('1.10.0')) {\n        throw new Error('SearchPane requires DataTables 1.10 or newer');\n      } // Check that Select is included\n\n\n      if (!dataTable$1.select) {\n        throw new Error('SearchPane requires Select');\n      }\n\n      var table = new dataTable$1.Api(paneSettings);\n      this.classes = $$1.extend(true, {}, SearchPanes.classes); // Get options from user\n\n      this.c = $$1.extend(true, {}, SearchPanes.defaults, opts); // Add extra elements to DOM object including clear\n\n      this.dom = {\n        clearAll: $$1('<button type=\"button\">Clear All</button>').addClass(this.classes.clearAll),\n        container: $$1('<div/>').addClass(this.classes.panes).text(table.i18n('searchPanes.loadMessage', this.c.i18n.loadMessage)),\n        emptyMessage: $$1('<div/>').addClass(this.classes.emptyMessage),\n        options: $$1('<div/>').addClass(this.classes.container),\n        panes: $$1('<div/>').addClass(this.classes.container),\n        title: $$1('<div/>').addClass(this.classes.title),\n        titleRow: $$1('<div/>').addClass(this.classes.titleRow),\n        wrapper: $$1('<div/>')\n      };\n      this.s = {\n        colOpts: [],\n        dt: table,\n        filterCount: 0,\n        filterPane: -1,\n        page: 0,\n        panes: [],\n        selectionList: [],\n        serverData: {},\n        stateRead: false,\n        updating: false\n      };\n\n      if (table.settings()[0]._searchPanes !== undefined) {\n        return;\n      }\n\n      this._getState();\n\n      if (this.s.dt.page.info().serverSide) {\n        table.on('preXhr.dt', function (e, settings, data) {\n          if (data.searchPanes === undefined) {\n            data.searchPanes = {};\n          }\n\n          if (data.searchPanes_null === undefined) {\n            data.searchPanes_null = {};\n          }\n\n          for (var _i = 0, _a = _this.s.selectionList; _i < _a.length; _i++) {\n            var selection = _a[_i];\n\n            var src = _this.s.dt.column(selection.index).dataSrc();\n\n            if (data.searchPanes[src] === undefined) {\n              data.searchPanes[src] = {};\n            }\n\n            if (data.searchPanes_null[src] === undefined) {\n              data.searchPanes_null[src] = {};\n            }\n\n            for (var i = 0; i < selection.rows.length; i++) {\n              data.searchPanes[src][i] = selection.rows[i].filter;\n\n              if (data.searchPanes[src][i] === null) {\n                data.searchPanes_null[src][i] = true;\n              }\n            }\n          }\n        });\n      } // We are using the xhr event to rebuild the panes if required due to viewTotal being enabled\n      // If viewTotal is not enabled then we simply update the data from the server\n\n\n      table.on('xhr', function (e, settings, json, xhr) {\n        if (json && json.searchPanes && json.searchPanes.options) {\n          _this.s.serverData = json;\n          _this.s.serverData.tableLength = json.recordsTotal;\n\n          _this._serverTotals();\n        }\n      });\n      table.settings()[0]._searchPanes = this;\n      this.dom.clearAll.text(table.i18n('searchPanes.clearMessage', this.c.i18n.clearMessage));\n\n      if (this.s.dt.settings()[0]._bInitComplete || fromInit) {\n        this._paneDeclare(table, paneSettings, opts);\n      } else {\n        table.one('preInit.dt', function (settings) {\n          _this._paneDeclare(table, paneSettings, opts);\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Clear the selections of all of the panes\n     */\n\n\n    SearchPanes.prototype.clearSelections = function () {\n      // Load in all of the searchBoxes in the documents\n      var searches = this.dom.container.find('.' + this.classes.search.replace(/\\s+/g, '.')); // For each searchBox set the input text to be empty and then trigger\n      //  an input on them so that they no longer filter the panes\n\n      searches.each(function () {\n        $$1(this).val('');\n        $$1(this).trigger('input');\n      });\n      var returnArray = []; // For every pane, clear the selections in the pane\n\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i];\n\n        if (pane.s.dtPane !== undefined) {\n          returnArray.push(pane.clearPane());\n        }\n      }\n\n      return returnArray;\n    };\n    /**\n     * returns the container node for the searchPanes\n     */\n\n\n    SearchPanes.prototype.getNode = function () {\n      return this.dom.container;\n    };\n    /**\n     * rebuilds all of the panes\n     */\n\n\n    SearchPanes.prototype.rebuild = function (targetIdx, maintainSelection) {\n      if (targetIdx === void 0) {\n        targetIdx = false;\n      }\n\n      if (maintainSelection === void 0) {\n        maintainSelection = false;\n      }\n\n      $$1(this.dom.emptyMessage).remove(); // As a rebuild from scratch is required, empty the searchpanes container.\n\n      var returnArray = []; // Rebuild each pane individually, if a specific pane has been selected then only rebuild that one\n\n      if (targetIdx === false) {\n        $$1(this.dom.panes).empty();\n      }\n\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i];\n\n        if (targetIdx !== false && pane.s.index !== targetIdx) {\n          continue;\n        }\n\n        pane.clearData();\n        returnArray.push( // Pass a boolean to say whether this is the last choice made for maintaining selections when rebuilding\n        pane.rebuildPane(this.s.selectionList[this.s.selectionList.length - 1] !== undefined ? pane.s.index === this.s.selectionList[this.s.selectionList.length - 1].index : false, this.s.dt.page.info().serverSide ? this.s.serverData : undefined, null, maintainSelection));\n        $$1(this.dom.panes).append(pane.dom.container);\n      }\n\n      if (this.c.cascadePanes || this.c.viewTotal) {\n        this.redrawPanes(true);\n      } else {\n        this._updateSelection();\n      } // Attach panes, clear buttons, and title bar to the document\n\n\n      this._updateFilterCount();\n\n      this._attachPaneContainer();\n\n      this.s.dt.draw(); // Resize the panes incase there has been a change\n\n      this.resizePanes(); // If a single pane has been rebuilt then return only that pane\n\n      if (returnArray.length === 1) {\n        return returnArray[0];\n      } // Otherwise return all of the panes that have been rebuilt\n      else {\n        return returnArray;\n      }\n    };\n    /**\n     * Redraws all of the panes\n     */\n\n\n    SearchPanes.prototype.redrawPanes = function (rebuild) {\n      if (rebuild === void 0) {\n        rebuild = false;\n      }\n\n      var table = this.s.dt; // Only do this if the redraw isn't being triggered by the panes updating themselves\n\n      if (!this.s.updating && !this.s.dt.page.info().serverSide) {\n        var filterActive = true;\n        var filterPane = this.s.filterPane;\n        var selectTotal = null;\n\n        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n          var pane = _a[_i];\n\n          if (pane.s.dtPane !== undefined) {\n            selectTotal += pane.s.dtPane.rows({\n              selected: true\n            }).data().toArray().length;\n          }\n        } // If the number of rows currently visible is equal to the number of rows in the table\n        //  then there can't be any filtering taking place\n\n\n        if (selectTotal === 0 && table.rows({\n          search: 'applied'\n        }).data().toArray().length === table.rows().data().toArray().length) {\n          filterActive = false;\n        } // Otherwise if viewTotal is active then it is necessary to determine which panes a select is present in.\n        //  If there is only one pane with a selection present then it should not show the filtered message as\n        //  more selections may be made in that pane.\n        else if (this.c.viewTotal) {\n          for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n            var pane = _c[_b];\n\n            if (pane.s.dtPane !== undefined) {\n              var selectLength = pane.s.dtPane.rows({\n                selected: true\n              }).data().toArray().length;\n\n              if (selectLength === 0) {\n                for (var _d = 0, _e = this.s.selectionList; _d < _e.length; _d++) {\n                  var selection = _e[_d];\n\n                  if (selection.index === pane.s.index && selection.rows.length !== 0) {\n                    selectLength = selection.rows.length;\n                  }\n                }\n              } // If filterPane === -1 then a pane with a selection has not been found yet,\n              //  so set filterPane to that panes index\n\n\n              if (selectLength > 0 && filterPane === -1) {\n                filterPane = pane.s.index;\n              } // Then if another pane is found with a selection then set filterPane to null to\n              //  show that multiple panes have selections present\n              else if (selectLength > 0) {\n                filterPane = null;\n              }\n            }\n          } // If the searchbox is in place and filtering is applied then need to cascade down anyway\n\n\n          if (selectTotal === 0) {\n            filterPane = null;\n          }\n        }\n\n        var deselectIdx = void 0;\n        var newSelectionList = []; // Don't run this if it is due to the panes regenerating\n\n        if (!this.regenerating) {\n          for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {\n            var pane = _g[_f]; // Identify the pane where a selection or deselection has been made and add it to the list.\n\n            if (pane.s.selectPresent) {\n              this.s.selectionList.push({\n                index: pane.s.index,\n                protect: false,\n                rows: pane.s.dtPane.rows({\n                  selected: true\n                }).data().toArray()\n              });\n              table.state.save();\n              break;\n            } else if (pane.s.deselect) {\n              deselectIdx = pane.s.index;\n              var selectedData = pane.s.dtPane.rows({\n                selected: true\n              }).data().toArray();\n\n              if (selectedData.length > 0) {\n                this.s.selectionList.push({\n                  index: pane.s.index,\n                  protect: true,\n                  rows: selectedData\n                });\n              }\n            }\n          }\n\n          if (this.s.selectionList.length > 0) {\n            var last = this.s.selectionList[this.s.selectionList.length - 1].index;\n\n            for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {\n              var pane = _j[_h];\n              pane.s.lastSelect = pane.s.index === last;\n            }\n          } // Remove selections from the list from the pane where a deselect has taken place\n\n\n          for (var i = 0; i < this.s.selectionList.length; i++) {\n            if (this.s.selectionList[i].index !== deselectIdx || this.s.selectionList[i].protect === true) {\n              var further = false; // Find out if this selection is the last one in the list for that pane\n\n              for (var j = i + 1; j < this.s.selectionList.length; j++) {\n                if (this.s.selectionList[j].index === this.s.selectionList[i].index) {\n                  further = true;\n                }\n              } // If there are no selections for this pane in the list then just push this one\n\n\n              if (!further) {\n                newSelectionList.push(this.s.selectionList[i]);\n                this.s.selectionList[i].protect = false;\n              }\n            }\n          }\n\n          var solePane = -1;\n\n          if (newSelectionList.length === 1 && selectTotal !== null && selectTotal !== 0) {\n            solePane = newSelectionList[0].index;\n          } // Update all of the panes to reflect the current state of the filters\n\n\n          for (var _k = 0, _l = this.s.panes; _k < _l.length; _k++) {\n            var pane = _l[_k];\n\n            if (pane.s.dtPane !== undefined) {\n              var tempFilter = true;\n              pane.s.filteringActive = true;\n\n              if (filterPane !== -1 && filterPane !== null && filterPane === pane.s.index || filterActive === false || pane.s.index === solePane) {\n                tempFilter = false;\n                pane.s.filteringActive = false;\n              }\n\n              pane.updatePane(!tempFilter ? false : filterActive);\n            }\n          } // Update the label that shows how many filters are in place\n\n\n          this._updateFilterCount(); // If the length of the selections are different then some of them have been\n          //  removed and a deselect has occured\n\n\n          if (newSelectionList.length > 0 && (newSelectionList.length < this.s.selectionList.length || rebuild)) {\n            this._cascadeRegen(newSelectionList, selectTotal);\n\n            var last = newSelectionList[newSelectionList.length - 1].index;\n\n            for (var _m = 0, _o = this.s.panes; _m < _o.length; _m++) {\n              var pane = _o[_m];\n              pane.s.lastSelect = pane.s.index === last;\n            }\n          } else if (newSelectionList.length > 0) {\n            // Update all of the other panes as you would just making a normal selection\n            for (var _p = 0, _q = this.s.panes; _p < _q.length; _p++) {\n              var paneUpdate = _q[_p];\n\n              if (paneUpdate.s.dtPane !== undefined) {\n                var tempFilter = true;\n                paneUpdate.s.filteringActive = true;\n\n                if (filterPane !== -1 && filterPane !== null && filterPane === paneUpdate.s.index || filterActive === false || paneUpdate.s.index === solePane) {\n                  tempFilter = false;\n                  paneUpdate.s.filteringActive = false;\n                }\n\n                paneUpdate.updatePane(!tempFilter ? tempFilter : filterActive);\n              }\n            }\n          }\n        } else {\n          var solePane = -1;\n\n          if (newSelectionList.length === 1 && selectTotal !== null && selectTotal !== 0) {\n            solePane = newSelectionList[0].index;\n          }\n\n          for (var _r = 0, _s = this.s.panes; _r < _s.length; _r++) {\n            var pane = _s[_r];\n\n            if (pane.s.dtPane !== undefined) {\n              var tempFilter = true;\n              pane.s.filteringActive = true;\n\n              if (filterPane !== -1 && filterPane !== null && filterPane === pane.s.index || filterActive === false || pane.s.index === solePane) {\n                tempFilter = false;\n                pane.s.filteringActive = false;\n              }\n\n              pane.updatePane(!tempFilter ? tempFilter : filterActive);\n            }\n          } // Update the label that shows how many filters are in place\n\n\n          this._updateFilterCount();\n        }\n\n        if (!filterActive || selectTotal === 0) {\n          this.s.selectionList = [];\n        }\n      }\n    };\n    /**\n     * Resizes all of the panes\n     */\n\n\n    SearchPanes.prototype.resizePanes = function () {\n      if (this.c.layout === 'auto') {\n        var contWidth = $$1(this.s.dt.searchPanes.container()).width();\n        var target = Math.floor(contWidth / 260.0); // The neatest number of panes per row\n\n        var highest = 1;\n        var highestmod = 0;\n        var dispIndex = []; // Get the indexes of all of the displayed panes\n\n        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n          var pane = _a[_i];\n\n          if (pane.s.displayed) {\n            dispIndex.push(pane.s.index);\n          }\n        }\n\n        var displayCount = dispIndex.length; // If the neatest number is the number we have then use this.\n\n        if (target === displayCount) {\n          highest = target;\n        } else {\n          // Go from the target down and find the value with the most panes left over, this will be the best fit\n          for (var ppr = target; ppr > 1; ppr--) {\n            var rem = displayCount % ppr;\n\n            if (rem === 0) {\n              highest = ppr;\n              highestmod = 0;\n              break;\n            } // If there are more left over at this amount of panes per row (ppr)\n            //  then it fits better so new values\n            else if (rem > highestmod) {\n              highest = ppr;\n              highestmod = rem;\n            }\n          }\n        } // If there is a perfect fit then none are to be wider\n\n\n        var widerIndexes = highestmod !== 0 ? dispIndex.slice(dispIndex.length - highestmod, dispIndex.length) : [];\n\n        for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n          var pane = _c[_b]; // Resize the pane with the new layout\n\n          if (pane.s.displayed) {\n            var layout = 'columns-' + (widerIndexes.indexOf(pane.s.index) === -1 ? highest : highestmod);\n            pane.resize(layout);\n          }\n        }\n      } else {\n        for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {\n          var pane = _e[_d];\n          pane.adjustTopRow();\n        }\n      }\n\n      return this;\n    };\n    /**\n     * Attach the panes, buttons and title to the document\n     */\n\n\n    SearchPanes.prototype._attach = function () {\n      var _this = this;\n\n      $$1(this.dom.container).removeClass(this.classes.hide);\n      $$1(this.dom.titleRow).removeClass(this.classes.hide);\n      $$1(this.dom.titleRow).remove();\n      $$1(this.dom.title).appendTo(this.dom.titleRow); // If the clear button is permitted attach it\n\n      if (this.c.clear) {\n        $$1(this.dom.clearAll).appendTo(this.dom.titleRow);\n        $$1(this.dom.clearAll).on('click.dtsps', function () {\n          _this.clearSelections();\n        });\n      }\n\n      $$1(this.dom.titleRow).appendTo(this.dom.container); // Attach the container for each individual pane to the overall container\n\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i];\n        $$1(pane.dom.container).appendTo(this.dom.panes);\n      } // Attach everything to the document\n\n\n      $$1(this.dom.panes).appendTo(this.dom.container);\n\n      if ($$1('div.' + this.classes.container).length === 0) {\n        $$1(this.dom.container).prependTo(this.s.dt);\n      }\n\n      return this.dom.container;\n    };\n    /**\n     * Attach the top row containing the filter count and clear all button\n     */\n\n\n    SearchPanes.prototype._attachExtras = function () {\n      $$1(this.dom.container).removeClass(this.classes.hide);\n      $$1(this.dom.titleRow).removeClass(this.classes.hide);\n      $$1(this.dom.titleRow).remove();\n      $$1(this.dom.title).appendTo(this.dom.titleRow); // If the clear button is permitted attach it\n\n      if (this.c.clear) {\n        $$1(this.dom.clearAll).appendTo(this.dom.titleRow);\n      }\n\n      $$1(this.dom.titleRow).appendTo(this.dom.container);\n      return this.dom.container;\n    };\n    /**\n     * If there are no panes to display then this method is called to either\n     * display a message in their place or hide them completely.\n     */\n\n\n    SearchPanes.prototype._attachMessage = function () {\n      // Create a message to display on the screen\n      var message;\n\n      try {\n        message = this.s.dt.i18n('searchPanes.emptyPanes', this.c.i18n.emptyPanes);\n      } catch (error) {\n        message = null;\n      } // If the message is an empty string then searchPanes.emptyPanes is undefined,\n      //  therefore the pane container should be removed from the display\n\n\n      if (message === null) {\n        $$1(this.dom.container).addClass(this.classes.hide);\n        $$1(this.dom.titleRow).removeClass(this.classes.hide);\n        return;\n      } else {\n        $$1(this.dom.container).removeClass(this.classes.hide);\n        $$1(this.dom.titleRow).addClass(this.classes.hide);\n      } // Otherwise display the message\n\n\n      $$1(this.dom.emptyMessage).text(message);\n      this.dom.emptyMessage.appendTo(this.dom.container);\n      return this.dom.container;\n    };\n    /**\n     * Attaches the panes to the document and displays a message or hides if there are none\n     */\n\n\n    SearchPanes.prototype._attachPaneContainer = function () {\n      // If a pane is to be displayed then attach the normal pane output\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i];\n\n        if (pane.s.displayed === true) {\n          return this._attach();\n        }\n      } // Otherwise attach the custom message or remove the container from the display\n\n\n      return this._attachMessage();\n    };\n    /**\n     * Prepares the panes for selections to be made when cascade is active and a deselect has occured\n     *\n     * @param newSelectionList the list of selections which are to be made\n     */\n\n\n    SearchPanes.prototype._cascadeRegen = function (newSelectionList, selectTotal) {\n      // Set this to true so that the actions taken do not cause this to run until it is finished\n      this.regenerating = true; // If only one pane has been selected then take note of its index\n\n      var solePane = -1;\n\n      if (newSelectionList.length === 1 && selectTotal !== null && selectTotal !== 0) {\n        solePane = newSelectionList[0].index;\n      } // Let the pane know that a cascadeRegen is taking place to avoid unexpected behaviour\n      //  and clear all of the previous selections in the pane\n\n\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i];\n        pane.setCascadeRegen(true);\n        pane.setClear(true); // If this is the same as the pane with the only selection then pass it as a parameter into clearPane\n\n        if (pane.s.dtPane !== undefined && pane.s.index === solePane || pane.s.dtPane !== undefined) {\n          pane.clearPane();\n        }\n\n        pane.setClear(false);\n      } // Rebin panes\n\n\n      this.s.dt.draw(); // While all of the selections have been removed, check the table lengths\n      // If they are different, another filter is in place and we need to force viewTotal to be used\n\n      var noSelectionsTableLength = this.s.dt.rows({\n        search: 'applied'\n      }).data().toArray().length;\n      var tableLength = this.s.dt.rows().data().toArray().length;\n\n      if (tableLength !== noSelectionsTableLength) {\n        for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n          var pane = _c[_b];\n          pane.s.forceViewTotal = true;\n        }\n      }\n\n      for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {\n        var pane = _e[_d];\n        pane.updatePane(true);\n      } // Remake Selections\n\n\n      this._makeCascadeSelections(newSelectionList); // Set the selection list property to be the list without the selections from the deselect pane\n\n\n      this.s.selectionList = newSelectionList; // The regeneration of selections is over so set it back to false\n\n      for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {\n        var pane = _g[_f];\n        pane.setCascadeRegen(false);\n      }\n\n      this.regenerating = false; // ViewTotal has already been forced at this point so can cancel that for future\n\n      if (tableLength !== noSelectionsTableLength) {\n        for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {\n          var pane = _j[_h];\n          pane.s.forceViewTotal = false;\n        }\n      }\n    };\n    /**\n     * Attaches the message to the document but does not add any panes\n     */\n\n\n    SearchPanes.prototype._checkMessage = function () {\n      // If a pane is to be displayed then attach the normal pane output\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i];\n\n        if (pane.s.displayed === true) {\n          // Ensure that the empty message is removed if a pane is displayed\n          $$1(this.dom.emptyMessage).remove();\n          $$1(this.dom.titleRow).removeClass(this.classes.hide);\n          return;\n        }\n      } // Otherwise attach the custom message or remove the container from the display\n\n\n      return this._attachMessage();\n    };\n    /**\n     * Gets the selection list from the previous state and stores it in the selectionList Property\n     */\n\n\n    SearchPanes.prototype._getState = function () {\n      var loadedFilter = this.s.dt.state.loaded();\n\n      if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.selectionList !== undefined) {\n        this.s.selectionList = loadedFilter.searchPanes.selectionList;\n      }\n    };\n    /**\n     * Makes all of the selections when cascade is active\n     *\n     * @param newSelectionList the list of selections to be made, in the order they were originally selected\n     */\n\n\n    SearchPanes.prototype._makeCascadeSelections = function (newSelectionList) {\n      // make selections in the order they were made previously,\n      //  excluding those from the pane where a deselect was made\n      for (var i = 0; i < newSelectionList.length; i++) {\n        var _loop_1 = function (pane) {\n          if (pane.s.index === newSelectionList[i].index && pane.s.dtPane !== undefined) {\n            // When regenerating the cascade selections we need this flag so that\n            //  the panes are only ignored if it\n            //  is the last selection and the pane for that selection\n            if (i === newSelectionList.length - 1) {\n              pane.s.lastCascade = true;\n            } // if there are any selections currently in the pane then\n            //  deselect them as we are about to make our new selections\n\n\n            if (pane.s.dtPane.rows({\n              selected: true\n            }).data().toArray().length > 0 && pane.s.dtPane !== undefined) {\n              pane.setClear(true);\n              pane.clearPane();\n              pane.setClear(false);\n            }\n\n            var _loop_2 = function (row) {\n              var found = false;\n              pane.s.dtPane.rows().every(function (rowIdx) {\n                if (pane.s.dtPane.row(rowIdx).data() !== undefined && row !== undefined && pane.s.dtPane.row(rowIdx).data().filter === row.filter) {\n                  found = true;\n                  pane.s.dtPane.row(rowIdx).select();\n                }\n              });\n\n              if (!found) {\n                var newRow = pane.addRow(row.display, row.filter, 0, row.total, row.sort, row.type, row.className);\n                newRow.select();\n              }\n            }; // select every row in the pane that was selected previously\n\n\n            for (var _i = 0, _a = newSelectionList[i].rows; _i < _a.length; _i++) {\n              var row = _a[_i];\n\n              _loop_2(row);\n            }\n\n            pane.s.dtPane.draw(); // Update the label that shows how many filters are in place\n\n            this_1._updateFilterCount();\n\n            pane.s.lastCascade = false;\n          }\n        };\n\n        var this_1 = this; // As the selections may have been made across the panes\n        //  in a different order to the pane index we must identify\n        //   which pane has the index of the selection. This is also important for colreorder etc\n\n        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n          var pane = _a[_i];\n\n          _loop_1(pane);\n        }\n      } // Make sure that the state is saved after all of these selections\n\n\n      this.s.dt.state.save();\n    };\n    /**\n     * Declares the instances of individual searchpanes dependant on the number of columns.\n     * It is necessary to run this once preInit has completed otherwise no panes will be\n     * created as the column count will be 0.\n     *\n     * @param table the DataTable api for the parent table\n     * @param paneSettings the settings passed into the constructor\n     * @param opts the options passed into the constructor\n     */\n\n\n    SearchPanes.prototype._paneDeclare = function (table, paneSettings, opts) {\n      var _this = this; // Create Panes\n\n\n      table.columns(this.c.columns.length > 0 ? this.c.columns : undefined).eq(0).each(function (idx) {\n        _this.s.panes.push(new SearchPane(paneSettings, opts, idx, _this.c.layout, _this.dom.panes));\n      }); // If there is any extra custom panes defined then create panes for them too\n\n      var rowLength = table.columns().eq(0).toArray().length;\n      var paneLength = this.c.panes.length;\n\n      for (var i = 0; i < paneLength; i++) {\n        var id = rowLength + i;\n        this.s.panes.push(new SearchPane(paneSettings, opts, id, this.c.layout, this.dom.panes, this.c.panes[i]));\n      } // If a custom ordering is being used\n\n\n      if (this.c.order.length > 0) {\n        // Make a new Array of panes based upon the order\n        var newPanes = this.c.order.map(function (name, index, values) {\n          return _this._findPane(name);\n        }); // Remove the old panes from the dom\n\n        this.dom.panes.empty();\n        this.s.panes = newPanes; // Append the panes in the correct order\n\n        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n          var pane = _a[_i];\n          this.dom.panes.append(pane.dom.container);\n        }\n      } // If this internal property is true then the DataTable has been initialised already\n\n\n      if (this.s.dt.settings()[0]._bInitComplete) {\n        this._startup(table);\n      } else {\n        // Otherwise add the paneStartup function to the list of functions\n        //  that are to be run when the table is initialised. This will garauntee that the\n        //   panes are initialised before the init event and init Complete callback is fired\n        this.s.dt.settings()[0].aoInitComplete.push({\n          fn: function () {\n            _this._startup(table);\n          }\n        });\n      }\n    };\n    /**\n     * Finds a pane based upon the name of that pane\n     *\n     * @param name string representing the name of the pane\n     * @returns SearchPane The pane which has that name\n     */\n\n\n    SearchPanes.prototype._findPane = function (name) {\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i];\n\n        if (name === pane.s.name) {\n          return pane;\n        }\n      }\n    };\n    /**\n     * Works out which panes to update when data is recieved from the server and viewTotal is active\n     */\n\n\n    SearchPanes.prototype._serverTotals = function () {\n      var selectPresent = false;\n      var deselectPresent = false;\n      var table = this.s.dt;\n\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i]; // Identify the pane where a selection or deselection has been made and add it to the list.\n\n        if (pane.s.selectPresent) {\n          this.s.selectionList.push({\n            index: pane.s.index,\n            protect: false,\n            rows: pane.s.dtPane.rows({\n              selected: true\n            }).data().toArray()\n          });\n          table.state.save();\n          pane.s.selectPresent = false;\n          selectPresent = true;\n          break;\n        } else if (pane.s.deselect) {\n          var selectedData = pane.s.dtPane.rows({\n            selected: true\n          }).data().toArray();\n\n          if (selectedData.length > 0) {\n            this.s.selectionList.push({\n              index: pane.s.index,\n              protect: true,\n              rows: selectedData\n            });\n          }\n\n          selectPresent = true;\n          deselectPresent = true;\n        }\n      } // Build an updated list based on any selections or deselections added\n\n\n      if (!selectPresent) {\n        this.s.selectionList = [];\n      } else {\n        var newSelectionList = [];\n\n        for (var i = 0; i < this.s.selectionList.length; i++) {\n          var further = false; // Find out if this selection is the last one in the list for that pane\n\n          for (var j = i + 1; j < this.s.selectionList.length; j++) {\n            if (this.s.selectionList[j].index === this.s.selectionList[i].index) {\n              further = true;\n            }\n          } // If there are no selections for this pane in the list then just push this one\n\n\n          if (!further) {\n            var push = false;\n\n            for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n              var pane = _c[_b];\n\n              if (pane.s.index === this.s.selectionList[i].index && pane.s.dtPane.rows({\n                selected: true\n              }).data().toArray().length > 0) {\n                push = true;\n              }\n            }\n\n            if (push) {\n              newSelectionList.push(this.s.selectionList[i]);\n            }\n          }\n        }\n\n        this.s.selectionList = newSelectionList;\n      }\n\n      var initIdx = -1; // If there has been a deselect and only one pane has a selection then update everything\n\n      if (deselectPresent && this.s.selectionList.length === 1) {\n        for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {\n          var pane = _e[_d];\n          pane.s.lastSelect = false;\n          pane.s.deselect = false;\n\n          if (pane.s.dtPane !== undefined && pane.s.dtPane.rows({\n            selected: true\n          }).data().toArray().length > 0) {\n            initIdx = pane.s.index;\n          }\n        }\n      } // Otherwise if there are more 1 selections then find the last one and set it to not update that pane\n      else if (this.s.selectionList.length > 0) {\n        var last = this.s.selectionList[this.s.selectionList.length - 1].index;\n\n        for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {\n          var pane = _g[_f];\n          pane.s.lastSelect = pane.s.index === last;\n          pane.s.deselect = false;\n        }\n      } // Otherwise if there are no selections then find where that took place and do not update to maintain scrolling\n      else if (this.s.selectionList.length === 0) {\n        for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {\n          var pane = _j[_h]; // pane.s.lastSelect = (pane.s.deselect === true);\n\n          pane.s.lastSelect = false;\n          pane.s.deselect = false;\n        }\n      }\n\n      $$1(this.dom.panes).empty(); // Rebuild the desired panes\n\n      for (var _k = 0, _l = this.s.panes; _k < _l.length; _k++) {\n        var pane = _l[_k];\n\n        if (!pane.s.lastSelect) {\n          pane.rebuildPane(undefined, this.s.dt.page.info().serverSide ? this.s.serverData : undefined, pane.s.index === initIdx ? true : null, true);\n        } else {\n          pane._setListeners();\n        } // append all of the panes and enable select\n\n\n        $$1(this.dom.panes).append(pane.dom.container);\n\n        if (pane.s.dtPane !== undefined) {\n          $$1(pane.s.dtPane.table().node()).parent()[0].scrollTop = pane.s.scrollTop;\n          $$1.fn.dataTable.select.init(pane.s.dtPane);\n        }\n      }\n\n      this._updateSelection();\n    };\n    /**\n     * Initialises the tables previous/preset selections and initialises callbacks for events\n     *\n     * @param table the parent table for which the searchPanes are being created\n     */\n\n\n    SearchPanes.prototype._startup = function (table) {\n      var _this = this;\n\n      $$1(this.dom.container).text(''); // Attach clear button and title bar to the document\n\n      this._attachExtras();\n\n      $$1(this.dom.container).append(this.dom.panes);\n      $$1(this.dom.panes).empty();\n      var loadedFilter = this.s.dt.state.loaded();\n\n      if (this.c.viewTotal && !this.c.cascadePanes) {\n        if (loadedFilter !== null && loadedFilter !== undefined && loadedFilter.searchPanes !== undefined && loadedFilter.searchPanes.panes !== undefined) {\n          var filterActive = false;\n\n          for (var _i = 0, _a = loadedFilter.searchPanes.panes; _i < _a.length; _i++) {\n            var pane = _a[_i];\n\n            if (pane.selected.length > 0) {\n              filterActive = true;\n              break;\n            }\n          }\n\n          if (filterActive) {\n            for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n              var pane = _c[_b];\n              pane.s.showFiltered = true;\n            }\n          }\n        }\n      }\n\n      for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {\n        var pane = _e[_d];\n        pane.rebuildPane(undefined, Object.keys(this.s.serverData).length > 0 ? this.s.serverData : undefined);\n        $$1(this.dom.panes).append(pane.dom.container);\n      } // If the layout is set to auto then the panes need to be resized to their best fit\n\n\n      if (this.c.layout === 'auto') {\n        this.resizePanes();\n      } // Reset the paging if that has been saved in the state\n\n\n      if (!this.s.stateRead && loadedFilter !== null && loadedFilter !== undefined) {\n        this.s.dt.page(loadedFilter.start / this.s.dt.page.len());\n        this.s.dt.draw('page');\n      }\n\n      this.s.stateRead = true;\n\n      if (this.c.viewTotal && !this.c.cascadePanes) {\n        for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {\n          var pane = _g[_f];\n          pane.updatePane();\n        }\n      }\n\n      this._updateFilterCount();\n\n      this._checkMessage(); // When a draw is called on the DataTable, update all of the panes incase the data in the DataTable has changed\n\n\n      table.on('preDraw.dtsps', function () {\n        if (!_this.s.updating) {\n          _this._updateFilterCount();\n\n          if ((_this.c.cascadePanes || _this.c.viewTotal) && !_this.s.dt.page.info().serverSide) {\n            _this.redrawPanes(_this.c.viewTotal);\n          } else {\n            _this._updateSelection();\n          }\n\n          _this.s.filterPane = -1;\n        }\n      });\n      $$1(window).on('resize.dtsp', dataTable$1.util.throttle(function () {\n        _this.resizePanes();\n      })); // Whenever a state save occurs store the selection list in the state object\n\n      this.s.dt.on('stateSaveParams.dtsp', function (e, settings, data) {\n        if (data.searchPanes === undefined) {\n          data.searchPanes = {};\n        }\n\n        data.searchPanes.selectionList = _this.s.selectionList;\n      });\n\n      if (this.s.dt.page.info().serverSide) {\n        table.off('page');\n        table.on('page', function () {\n          _this.s.page = _this.s.dt.page();\n        });\n        table.off('preXhr.dt');\n        table.on('preXhr.dt', function (e, settings, data) {\n          if (data.searchPanes === undefined) {\n            data.searchPanes = {};\n          }\n\n          if (data.searchPanes_null === undefined) {\n            data.searchPanes_null = {};\n          } // Count how many filters are being applied\n\n\n          var filterCount = 0;\n\n          for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {\n            var pane = _a[_i];\n\n            var src = _this.s.dt.column(pane.s.index).dataSrc();\n\n            if (data.searchPanes[src] === undefined) {\n              data.searchPanes[src] = {};\n            }\n\n            if (data.searchPanes_null[src] === undefined) {\n              data.searchPanes_null[src] = {};\n            }\n\n            if (pane.s.dtPane !== undefined) {\n              var rowData = pane.s.dtPane.rows({\n                selected: true\n              }).data().toArray();\n\n              for (var i = 0; i < rowData.length; i++) {\n                data.searchPanes[src][i] = rowData[i].filter;\n\n                if (data.searchPanes[src][i] === null) {\n                  data.searchPanes_null[src][i] = true;\n                }\n\n                filterCount++;\n              }\n            }\n          }\n\n          if (_this.c.viewTotal) {\n            _this._prepViewTotal(filterCount);\n          } // If there is a filter to be applied, then we need to read from the start of the result set\n          //  and set the paging to 0. This matches the behaviour of client side processing\n\n\n          if (filterCount > 0) {\n            // If the number of filters has changed we need to read from the start of the\n            //  result set and reset the paging\n            if (filterCount !== _this.s.filterCount) {\n              data.start = 0;\n              _this.s.page = 0;\n            } // Otherwise it is a paging request and we need to read from whatever the paging has been set to\n            else {\n              data.start = _this.s.page * _this.s.dt.page.len();\n            }\n\n            _this.s.dt.page(_this.s.page);\n\n            _this.s.filterCount = filterCount;\n          }\n        });\n      } else {\n        table.on('preXhr.dt', function (e, settings, data) {\n          for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {\n            var pane = _a[_i];\n            pane.clearData();\n          }\n        });\n      } // If the data is reloaded from the server then it is possible that it has changed completely,\n      // so we need to rebuild the panes\n\n\n      this.s.dt.on('xhr', function (e, settings, json, xhr) {\n        if (settings.nTable !== _this.s.dt.table().node()) {\n          return;\n        }\n\n        var processing = false;\n\n        if (!_this.s.dt.page.info().serverSide) {\n          _this.s.dt.one('preDraw', function () {\n            if (processing) {\n              return;\n            }\n\n            var page = _this.s.dt.page();\n\n            processing = true;\n            _this.s.updating = true;\n            $$1(_this.dom.panes).empty();\n\n            for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {\n              var pane = _a[_i];\n              pane.clearData(); // Clears all of the bins and will mean that the data has to be re-read\n              // Pass a boolean to say whether this is the last choice made for maintaining selections\n              //  when rebuilding\n\n              pane.rebuildPane(_this.s.selectionList[_this.s.selectionList.length - 1] !== undefined ? pane.s.index === _this.s.selectionList[_this.s.selectionList.length - 1].index : false, undefined, undefined, true);\n              $$1(_this.dom.panes).append(pane.dom.container);\n            }\n\n            if (!_this.s.dt.page.info().serverSide) {\n              _this.s.dt.draw();\n            }\n\n            _this.s.updating = false;\n\n            if (_this.c.cascadePanes || _this.c.viewTotal) {\n              _this.redrawPanes(_this.c.cascadePanes);\n            } else {\n              _this._updateSelection();\n            }\n\n            _this._checkMessage();\n\n            _this.s.dt.one('draw', function () {\n              _this.s.updating = true;\n\n              _this.s.dt.page(page).draw(false);\n\n              _this.s.updating = false;\n            });\n          });\n        }\n      }); // PreSelect any selections which have been defined using the preSelect option\n\n      for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {\n        var pane = _j[_h];\n\n        if (pane !== undefined && pane.s.dtPane !== undefined && (pane.s.colOpts.preSelect !== undefined && pane.s.colOpts.preSelect.length > 0 || pane.customPaneSettings !== null && pane.customPaneSettings.preSelect !== undefined && pane.customPaneSettings.preSelect.length > 0)) {\n          var tableLength = pane.s.dtPane.rows().data().toArray().length;\n\n          for (var i = 0; i < tableLength; i++) {\n            if (pane.s.colOpts.preSelect.indexOf(pane.s.dtPane.cell(i, 0).data()) !== -1 || pane.customPaneSettings !== null && pane.customPaneSettings.preSelect !== undefined && pane.customPaneSettings.preSelect.indexOf(pane.s.dtPane.cell(i, 0).data()) !== -1) {\n              pane.s.dtPane.row(i).select();\n            }\n          }\n\n          pane.updateTable();\n        }\n      }\n\n      if (this.s.selectionList !== undefined && this.s.selectionList.length > 0) {\n        var last = this.s.selectionList[this.s.selectionList.length - 1].index;\n\n        for (var _k = 0, _l = this.s.panes; _k < _l.length; _k++) {\n          var pane = _l[_k];\n          pane.s.lastSelect = pane.s.index === last;\n        }\n      } // If cascadePanes is active then make the previous selections in the order they were previously\n\n\n      if (this.s.selectionList.length > 0 && this.c.cascadePanes) {\n        this._cascadeRegen(this.s.selectionList, this.s.selectionList.length);\n      } // Update the title bar to show how many filters have been selected\n\n\n      this._updateFilterCount(); // If the table is destroyed and restarted then clear the selections so that they do not persist.\n\n\n      table.on('destroy.dtsps', function () {\n        for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {\n          var pane = _a[_i];\n          pane.destroy();\n        }\n\n        table.off('.dtsps');\n        $$1(_this.dom.clearAll).off('.dtsps');\n        $$1(_this.dom.container).remove();\n\n        _this.clearSelections();\n      }); // When the clear All button has been pressed clear all of the selections in the panes\n\n      if (this.c.clear) {\n        $$1(this.dom.clearAll).on('click.dtsps', function () {\n          _this.clearSelections();\n        });\n      }\n\n      table.settings()[0]._searchPanes = this;\n      this.s.dt.state.save();\n    };\n\n    SearchPanes.prototype._prepViewTotal = function (selectTotal) {\n      var filterPane = this.s.filterPane;\n      var filterActive = false;\n\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i];\n\n        if (pane.s.dtPane !== undefined) {\n          var selectLength = pane.s.dtPane.rows({\n            selected: true\n          }).data().toArray().length; // If filterPane === -1 then a pane with a selection has not been found yet,\n          //  so set filterPane to that panes index\n\n          if (selectLength > 0 && filterPane === -1) {\n            filterPane = pane.s.index;\n            filterActive = true;\n          } // Then if another pane is found with a selection then set filterPane to null to\n          //  show that multiple panes have selections present\n          else if (selectLength > 0) {\n            filterPane = null;\n          }\n        }\n      }\n\n      if (selectTotal !== null && selectTotal !== 0) {\n        filterPane = null;\n      } // Update all of the panes to reflect the current state of the filters\n\n\n      for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n        var pane = _c[_b];\n\n        if (pane.s.dtPane !== undefined) {\n          pane.s.filteringActive = true;\n\n          if (filterPane !== -1 && filterPane !== null && filterPane === pane.s.index || filterActive === false) {\n            pane.s.filteringActive = false;\n          }\n        }\n      }\n    };\n    /**\n     * Updates the number of filters that have been applied in the title\n     */\n\n\n    SearchPanes.prototype._updateFilterCount = function () {\n      var filterCount = 0; // Add the number of all of the filters throughout the panes\n\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i];\n\n        if (pane.s.dtPane !== undefined) {\n          filterCount += pane.getPaneCount();\n        }\n      } // Run the message through the internationalisation method to improve readability\n\n\n      var message = this.s.dt.i18n('searchPanes.title', this.c.i18n.title, filterCount);\n      $$1(this.dom.title).text(message);\n\n      if (this.c.filterChanged !== undefined && typeof this.c.filterChanged === 'function') {\n        this.c.filterChanged.call(this.s.dt, filterCount);\n      }\n\n      if (filterCount === 0) {\n        $$1(this.dom.clearAll).addClass(this.classes.disabledButton).attr('disabled', 'true');\n      } else {\n        $$1(this.dom.clearAll).removeClass(this.classes.disabledButton).removeAttr('disabled');\n      }\n    };\n    /**\n     * Updates the selectionList when cascade is not in place\n     */\n\n\n    SearchPanes.prototype._updateSelection = function () {\n      this.s.selectionList = [];\n\n      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n        var pane = _a[_i];\n\n        if (pane.s.dtPane !== undefined) {\n          this.s.selectionList.push({\n            index: pane.s.index,\n            protect: false,\n            rows: pane.s.dtPane.rows({\n              selected: true\n            }).data().toArray()\n          });\n        }\n      }\n\n      this.s.dt.state.save();\n    };\n\n    SearchPanes.version = '1.3.0';\n    SearchPanes.classes = {\n      clear: 'dtsp-clear',\n      clearAll: 'dtsp-clearAll',\n      container: 'dtsp-searchPanes',\n      disabledButton: 'dtsp-disabledButton',\n      emptyMessage: 'dtsp-emptyMessage',\n      hide: 'dtsp-hidden',\n      panes: 'dtsp-panesContainer',\n      search: 'dtsp-search',\n      title: 'dtsp-title',\n      titleRow: 'dtsp-titleRow'\n    }; // Define SearchPanes default options\n\n    SearchPanes.defaults = {\n      cascadePanes: false,\n      clear: true,\n      columns: [],\n      container: function (dt) {\n        return dt.table().container();\n      },\n      filterChanged: undefined,\n      i18n: {\n        clearMessage: 'Clear All',\n        clearPane: '&times;',\n        collapse: {\n          0: 'SearchPanes',\n          _: 'SearchPanes (%d)'\n        },\n        count: '{total}',\n        countFiltered: '{shown} ({total})',\n        emptyMessage: '<em>No data</em>',\n        emptyPanes: 'No SearchPanes',\n        loadMessage: 'Loading Search Panes...',\n        title: 'Filters Active - %d'\n      },\n      layout: 'auto',\n      order: [],\n      panes: [],\n      viewTotal: false\n    };\n    return SearchPanes;\n  }();\n  /*! SearchPanes 1.3.0\n   * 2019-2020 SpryMedia Ltd - datatables.net/license\n   */\n  // DataTables extensions common UMD. Note that this allows for AMD, CommonJS\n  // (with window and jQuery being allowed as parameters to the returned\n  // function) or just default browser loading.\n\n\n  (function (factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD\n      define(['jquery', 'datatables.net'], function ($) {\n        return factory($, window, document);\n      });\n    } else if (typeof exports === 'object') {\n      // CommonJS\n      module.exports = function (root, $) {\n        if (!root) {\n          root = window;\n        }\n\n        if (!$ || !$.fn.dataTable) {\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\n          $ = require('datatables.net')(root, $).$;\n        }\n\n        return factory($, root, root.document);\n      };\n    } else {\n      // Browser - assume jQuery has already been loaded\n      factory(window.jQuery, window, document);\n    }\n  })(function ($, window, document) {\n    setJQuery($);\n    setJQuery$1($);\n    var dataTable = $.fn.dataTable;\n    $.fn.dataTable.SearchPanes = SearchPanes;\n    $.fn.DataTable.SearchPanes = SearchPanes;\n    $.fn.dataTable.SearchPane = SearchPane;\n    $.fn.DataTable.SearchPane = SearchPane;\n    var apiRegister = $.fn.dataTable.Api.register;\n    apiRegister('searchPanes()', function () {\n      return this;\n    });\n    apiRegister('searchPanes.clearSelections()', function () {\n      return this.iterator('table', function (ctx) {\n        if (ctx._searchPanes) {\n          ctx._searchPanes.clearSelections();\n        }\n      });\n    });\n    apiRegister('searchPanes.rebuildPane()', function (targetIdx, maintainSelections) {\n      return this.iterator('table', function (ctx) {\n        if (ctx._searchPanes) {\n          ctx._searchPanes.rebuild(targetIdx, maintainSelections);\n        }\n      });\n    });\n    apiRegister('searchPanes.resizePanes()', function () {\n      var ctx = this.context[0];\n      return ctx._searchPanes ? ctx._searchPanes.resizePanes() : null;\n    });\n    apiRegister('searchPanes.container()', function () {\n      var ctx = this.context[0];\n      return ctx._searchPanes ? ctx._searchPanes.getNode() : null;\n    });\n    $.fn.dataTable.ext.buttons.searchPanesClear = {\n      action: function (e, dt, node, config) {\n        dt.searchPanes.clearSelections();\n      },\n      text: 'Clear Panes'\n    };\n    $.fn.dataTable.ext.buttons.searchPanes = {\n      action: function (e, dt, node, config) {\n        e.stopPropagation();\n        this.popover(config._panes.getNode(), {\n          align: 'dt-container'\n        });\n\n        config._panes.rebuild(undefined, true);\n      },\n      config: {},\n      init: function (dt, node, config) {\n        var panes = new $.fn.dataTable.SearchPanes(dt, $.extend({\n          filterChanged: function (count) {\n            dt.button(node).text(dt.i18n('searchPanes.collapse', panes.c.i18n.collapse, count));\n          }\n        }, config.config));\n        var message = dt.i18n('searchPanes.collapse', panes.c.i18n.collapse, 0);\n        dt.button(node).text(message);\n        config._panes = panes;\n      },\n      text: 'Search Panes'\n    };\n\n    function _init(settings, options, fromPre) {\n      if (options === void 0) {\n        options = null;\n      }\n\n      if (fromPre === void 0) {\n        fromPre = false;\n      }\n\n      var api = new dataTable.Api(settings);\n      var opts = options ? options : api.init().searchPanes || dataTable.defaults.searchPanes;\n      var searchPanes = new SearchPanes(api, opts, fromPre);\n      var node = searchPanes.getNode();\n      return node;\n    } // Attach a listener to the document which listens for DataTables initialisation\n    // events so we can automatically initialise\n\n\n    $(document).on('preInit.dt.dtsp', function (e, settings, json) {\n      if (e.namespace !== 'dt') {\n        return;\n      }\n\n      if (settings.oInit.searchPanes || dataTable.defaults.searchPanes) {\n        if (!settings._searchPanes) {\n          _init(settings, null, true);\n        }\n      }\n    }); // DataTables `dom` feature option\n\n    dataTable.ext.feature.push({\n      cFeature: 'P',\n      fnInit: _init\n    }); // DataTables 2 layout feature\n\n    if (dataTable.ext.features) {\n      dataTable.ext.features.register('searchPanes', _init);\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/Sher/Desktop/datahub tagging ui/frontend/node_modules/datatables.net-searchpanes/js/dataTables.searchPanes.js"],"names":["$","dataTable","setJQuery","jq","fn","SearchPane","paneSettings","opts","idx","layout","panesContainer","panes","_this","versionCheck","Error","select","table","Api","classes","extend","c","defaults","undefined","hideCount","viewCount","customPaneSettings","s","cascadeRegen","clearing","colOpts","deselect","displayed","dt","dtPane","filteringActive","forceViewTotal","index","indexes","lastCascade","lastSelect","listSet","name","redraw","rowData","arrayFilter","arrayOriginal","arrayTotals","bins","binsOriginal","binsTotal","filterMap","Map","totalOptions","scrollTop","searchFunction","selectPresent","serverSelect","serverSelecting","showFiltered","tableLength","updating","rowLength","columns","eq","toArray","length","colExists","layVal","parseInt","split","dom","buttonGroup","addClass","clear","disabledButton","attr","paneButton","clearButton","container","countButton","dtP","column","header","text","lower","subRow2","narrowButton","nameButton","searchBox","paneInputButton","search","searchButton","searchIcon","searchCont","searchLabelCont","topRow","upper","subRow1","narrowSearch","selections","_getOptions","_getBonusOptions","i18n","clearPane","className","append","tableNode","node","settings","searchData","dataIndex","origData","nTable","filter","orthogonal","get","_search","ext","push","on","searches","find","replace","each","val","trigger","adjustTopRow","e","details","mapping","prototype","addRow","display","shown","total","sort","type","_i","_a","entry","row","add","emptyMessage","subContainers","subRowsContainer","width","narrow","narrowSub","removeClass","clearData","rows","selected","updateTable","destroy","off","remove","searchIdx","indexOf","splice","def","getPaneCount","data","rebuildPane","last","dataIn","init","maintainSelection","selectedRows","prevEl","page","info","serverSide","prev","hidden","_buildPane","removePane","hide","resize","show","setCascadeRegen","setClear","updatePane","draw","_updateCommon","_searchExtras","cascadePanes","viewTotal","_setListeners","t0","clearTimeout","parent","removeAttr","_makeSelection","setTimeout","state","save","isEmptyObject","searchTerm","order","map","item","toString","searchPanes","i","id","_dt","cell","originalEvent","stopPropagation","currentOrder","focus","searchval","_addOption","Array","isArray","countMessage","count","filteredMessage","countFiltered","loadedFilter","loaded","options","_populatePane","_detailsPane","binLength","Object","keys","uniqueRatio","_uniqueRatio","threshold","colTitle","dataSrc","dataPoint","label","value","_displayPane","has","insertAfter","prepend","errMode","haveScroller","Scroller","DataTable","columnDefs","render","message","pill","match","nameCont","targets","aoColumns","_sManualType","badgePill","orderData","visible","deferRender","language","oLanguage","paging","scrollX","scrollY","scroller","stateSave","oFeatures","bStateSave","dtOpts","createdRow","bottomLeft","bottomRight","topLeft","topRight","headerText","title","sTitle","substr","count_1","forEach","element","ien","_b","_c","option","String","_d","_e","_getComparisonRows","_f","selectedRows_1","selection","_g","_h","_reloadSelect","_j","_k","pane","indexArray","indexArray_1","rowIdx","_populatePaneArray","empty","smallGap","appendTo","searching","controls","_searchContSetup","orderable","prependTo","defaultMutator","tableVals","appRows","tableValsTotal","allRows","options_1","comp","insert","comparisonObj","tVal","call","columnOptions","rendered","oApi","_fnGetCellData","set","colSelect","combiner","filters","pluck","nullIndex","rowCount","_loop_1","dataP","this_1","selectIndex","findIndex","_loop_2","rows_1","selected_1","selectedEl","parentNode","version","buttonSub","clearAll","preSelect","$$1","dataTable$1","setJQuery$1","SearchPanes","fromInit","regenerating","loadMessage","titleRow","wrapper","filterCount","filterPane","selectionList","serverData","stateRead","_searchPanes","_getState","searchPanes_null","src","json","xhr","recordsTotal","_serverTotals","clearMessage","_bInitComplete","_paneDeclare","one","clearSelections","returnArray","getNode","rebuild","targetIdx","redrawPanes","_updateSelection","_updateFilterCount","_attachPaneContainer","resizePanes","filterActive","selectTotal","selectLength","deselectIdx","newSelectionList","protect","selectedData","further","j","solePane","_l","tempFilter","_cascadeRegen","_m","_o","_p","_q","paneUpdate","_r","_s","contWidth","target","Math","floor","highest","highestmod","dispIndex","displayCount","ppr","rem","widerIndexes","slice","_attach","_attachExtras","_attachMessage","emptyPanes","error","noSelectionsTableLength","_makeCascadeSelections","_checkMessage","found","every","newRow","paneLength","newPanes","values","_findPane","_startup","aoInitComplete","deselectPresent","initIdx","start","len","window","util","throttle","_prepViewTotal","processing","filterChanged","collapse","_","factory","define","amd","document","exports","module","root","require","jQuery","apiRegister","register","iterator","ctx","maintainSelections","context","buttons","searchPanesClear","action","config","popover","_panes","align","button","_init","fromPre","api","namespace","oInit","feature","cFeature","fnInit","features"],"mappings":"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","sourcesContent":["/*! SearchPanes 1.3.0\n * 2019-2020 SpryMedia Ltd - datatables.net/license\n */\n(function () {\n    'use strict';\n\n    var $;\n    var dataTable;\n    function setJQuery(jq) {\n        $ = jq;\n        dataTable = jq.fn.dataTable;\n    }\n    var SearchPane = /** @class */ (function () {\n        /**\n         * Creates the panes, sets up the search function\n         *\n         * @param paneSettings The settings for the searchPanes\n         * @param opts The options for the default features\n         * @param idx the index of the column for this pane\n         * @returns {object} the pane that has been created, including the table and the index of the pane\n         */\n        function SearchPane(paneSettings, opts, idx, layout, panesContainer, panes) {\n            var _this = this;\n            if (panes === void 0) { panes = null; }\n            // Check that the required version of DataTables is included\n            if (!dataTable || !dataTable.versionCheck || !dataTable.versionCheck('1.10.0')) {\n                throw new Error('SearchPane requires DataTables 1.10 or newer');\n            }\n            // Check that Select is included\n            if (!dataTable.select) {\n                throw new Error('SearchPane requires Select');\n            }\n            var table = new dataTable.Api(paneSettings);\n            this.classes = $.extend(true, {}, SearchPane.classes);\n            // Get options from user\n            this.c = $.extend(true, {}, SearchPane.defaults, opts);\n            if (opts !== undefined && opts.hideCount !== undefined && opts.viewCount === undefined) {\n                this.c.viewCount = !this.c.hideCount;\n            }\n            this.customPaneSettings = panes;\n            this.s = {\n                cascadeRegen: false,\n                clearing: false,\n                colOpts: [],\n                deselect: false,\n                displayed: false,\n                dt: table,\n                dtPane: undefined,\n                filteringActive: false,\n                forceViewTotal: false,\n                index: idx,\n                indexes: [],\n                lastCascade: false,\n                lastSelect: false,\n                listSet: false,\n                name: undefined,\n                redraw: false,\n                rowData: {\n                    arrayFilter: [],\n                    arrayOriginal: [],\n                    arrayTotals: [],\n                    bins: {},\n                    binsOriginal: {},\n                    binsTotal: {},\n                    filterMap: new Map(),\n                    totalOptions: 0\n                },\n                scrollTop: 0,\n                searchFunction: undefined,\n                selectPresent: false,\n                serverSelect: [],\n                serverSelecting: false,\n                showFiltered: false,\n                tableLength: null,\n                updating: false\n            };\n            var rowLength = table.columns().eq(0).toArray().length;\n            this.colExists = this.s.index < rowLength;\n            // Add extra elements to DOM object including clear and hide buttons\n            this.c.layout = layout;\n            var layVal = parseInt(layout.split('-')[1], 10);\n            this.dom = {\n                buttonGroup: $('<div/>').addClass(this.classes.buttonGroup),\n                clear: $('<button type=\"button\">&#215;</button>')\n                    .addClass(this.classes.disabledButton)\n                    .attr('disabled', 'true')\n                    .addClass(this.classes.paneButton)\n                    .addClass(this.classes.clearButton),\n                container: $('<div/>')\n                    .addClass(this.classes.container)\n                    .addClass(this.classes.layout +\n                    (layVal < 10 ? layout : layout.split('-')[0] + '-9')),\n                countButton: $('<button type=\"button\"></button>')\n                    .addClass(this.classes.paneButton)\n                    .addClass(this.classes.countButton),\n                dtP: $('<table><thead><tr><th>' +\n                    (this.colExists\n                        ? $(table.column(this.colExists ? this.s.index : 0).header()).text()\n                        : this.customPaneSettings.header || 'Custom Pane') + '</th><th/></tr></thead></table>'),\n                lower: $('<div/>').addClass(this.classes.subRow2).addClass(this.classes.narrowButton),\n                nameButton: $('<button type=\"button\"></button>')\n                    .addClass(this.classes.paneButton)\n                    .addClass(this.classes.nameButton),\n                panesContainer: panesContainer,\n                searchBox: $('<input/>').addClass(this.classes.paneInputButton).addClass(this.classes.search),\n                searchButton: $('<button type = \"button\" class=\"' + this.classes.searchIcon + '\"></button>')\n                    .addClass(this.classes.paneButton),\n                searchCont: $('<div/>').addClass(this.classes.searchCont),\n                searchLabelCont: $('<div/>').addClass(this.classes.searchLabelCont),\n                topRow: $('<div/>').addClass(this.classes.topRow),\n                upper: $('<div/>').addClass(this.classes.subRow1).addClass(this.classes.narrowSearch)\n            };\n            this.s.displayed = false;\n            table = this.s.dt;\n            this.selections = [];\n            this.s.colOpts = this.colExists ? this._getOptions() : this._getBonusOptions();\n            var colOpts = this.s.colOpts;\n            var clear = $('<button type=\"button\">X</button>').addClass(this.classes.paneButton);\n            $(clear).text(table.i18n('searchPanes.clearPane', this.c.i18n.clearPane));\n            this.dom.container.addClass(colOpts.className);\n            this.dom.container.addClass((this.customPaneSettings !== null && this.customPaneSettings.className !== undefined)\n                ? this.customPaneSettings.className\n                : '');\n            // Set the value of name incase ordering is desired\n            if (this.s.colOpts.name !== undefined) {\n                this.s.name = this.s.colOpts.name;\n            }\n            else if (this.customPaneSettings !== null && this.customPaneSettings.name !== undefined) {\n                this.s.name = this.customPaneSettings.name;\n            }\n            else {\n                this.s.name = this.colExists ?\n                    $(table.column(this.s.index).header()).text() :\n                    this.customPaneSettings.header || 'Custom Pane';\n            }\n            $(panesContainer).append(this.dom.container);\n            var tableNode = table.table(0).node();\n            // Custom search function for table\n            this.s.searchFunction = function (settings, searchData, dataIndex, origData) {\n                // If no data has been selected then show all\n                if (_this.selections.length === 0) {\n                    return true;\n                }\n                if (settings.nTable !== tableNode) {\n                    return true;\n                }\n                var filter = null;\n                if (_this.colExists) {\n                    // Get the current filtered data\n                    filter = searchData[_this.s.index];\n                    if (colOpts.orthogonal.filter !== 'filter') {\n                        // get the filter value from the map\n                        filter = _this.s.rowData.filterMap.get(dataIndex);\n                        if (filter instanceof $.fn.dataTable.Api) {\n                            filter = filter.toArray();\n                        }\n                    }\n                }\n                return _this._search(filter, dataIndex);\n            };\n            $.fn.dataTable.ext.search.push(this.s.searchFunction);\n            // If the clear button for this pane is clicked clear the selections\n            if (this.c.clear) {\n                $(clear).on('click', function () {\n                    var searches = _this.dom.container.find('.' + _this.classes.search.replace(/\\s+/g, '.'));\n                    searches.each(function () {\n                        $(this).val('');\n                        $(this).trigger('input');\n                    });\n                    _this.clearPane();\n                });\n            }\n            // Sometimes the top row of the panes containing the search box and ordering buttons appears\n            //  weird if the width of the panes is lower than expected, this fixes the design.\n            // Equally this may occur when the table is resized.\n            table.on('draw.dtsp', function () {\n                _this.adjustTopRow();\n            });\n            table.on('buttons-action', function () {\n                _this.adjustTopRow();\n            });\n            // When column-reorder is present and the columns are moved, it is necessary to\n            //  reassign all of the panes indexes to the new index of the column.\n            table.on('column-reorder.dtsp', function (e, settings, details) {\n                _this.s.index = details.mapping[_this.s.index];\n            });\n            return this;\n        }\n        /**\n         * Adds a row to the panes table\n         *\n         * @param display the value to be displayed to the user\n         * @param filter the value to be filtered on when searchpanes is implemented\n         * @param shown the number of rows in the table that are currently visible matching this criteria\n         * @param total the total number of rows in the table that match this criteria\n         * @param sort the value to be sorted in the pane table\n         * @param type the value of which the type is to be derived from\n         */\n        SearchPane.prototype.addRow = function (display, filter, shown, total, sort, type, className) {\n            var index;\n            for (var _i = 0, _a = this.s.indexes; _i < _a.length; _i++) {\n                var entry = _a[_i];\n                if (entry.filter === filter) {\n                    index = entry.index;\n                }\n            }\n            if (index === undefined) {\n                index = this.s.indexes.length;\n                this.s.indexes.push({ filter: filter, index: index });\n            }\n            return this.s.dtPane.row.add({\n                className: className,\n                display: display !== '' ?\n                    display :\n                    this.emptyMessage(),\n                filter: filter,\n                index: index,\n                shown: shown,\n                sort: sort,\n                total: total,\n                type: type\n            });\n        };\n        /**\n         * Adjusts the layout of the top row when the screen is resized\n         */\n        SearchPane.prototype.adjustTopRow = function () {\n            var subContainers = this.dom.container.find('.' + this.classes.subRowsContainer.replace(/\\s+/g, '.'));\n            var subRow1 = this.dom.container.find('.' + this.classes.subRow1.replace(/\\s+/g, '.'));\n            var subRow2 = this.dom.container.find('.' + this.classes.subRow2.replace(/\\s+/g, '.'));\n            var topRow = this.dom.container.find('.' + this.classes.topRow.replace(/\\s+/g, '.'));\n            // If the width is 0 then it is safe to assume that the pane has not yet been displayed.\n            //  Even if it has, if the width is 0 it won't make a difference if it has the narrow class or not\n            if (($(subContainers[0]).width() < 252 || $(topRow[0]).width() < 252) && $(subContainers[0]).width() !== 0) {\n                $(subContainers[0]).addClass(this.classes.narrow);\n                $(subRow1[0]).addClass(this.classes.narrowSub).removeClass(this.classes.narrowSearch);\n                $(subRow2[0]).addClass(this.classes.narrowSub).removeClass(this.classes.narrowButton);\n            }\n            else {\n                $(subContainers[0]).removeClass(this.classes.narrow);\n                $(subRow1[0]).removeClass(this.classes.narrowSub).addClass(this.classes.narrowSearch);\n                $(subRow2[0]).removeClass(this.classes.narrowSub).addClass(this.classes.narrowButton);\n            }\n        };\n        /**\n         * In the case of a rebuild there is potential for new data to have been included or removed\n         * so all of the rowData must be reset as a precaution.\n         */\n        SearchPane.prototype.clearData = function () {\n            this.s.rowData = {\n                arrayFilter: [],\n                arrayOriginal: [],\n                arrayTotals: [],\n                bins: {},\n                binsOriginal: {},\n                binsTotal: {},\n                filterMap: new Map(),\n                totalOptions: 0\n            };\n        };\n        /**\n         * Clear the selections in the pane\n         */\n        SearchPane.prototype.clearPane = function () {\n            // Deselect all rows which are selected and update the table and filter count.\n            this.s.dtPane.rows({ selected: true }).deselect();\n            this.updateTable();\n            return this;\n        };\n        /**\n         * Strips all of the SearchPanes elements from the document and turns all of the listeners for the buttons off\n         */\n        SearchPane.prototype.destroy = function () {\n            $(this.s.dtPane).off('.dtsp');\n            $(this.s.dt).off('.dtsp');\n            $(this.dom.nameButton).off('.dtsp');\n            $(this.dom.countButton).off('.dtsp');\n            $(this.dom.clear).off('.dtsp');\n            $(this.dom.searchButton).off('.dtsp');\n            $(this.dom.container).remove();\n            var searchIdx = $.fn.dataTable.ext.search.indexOf(this.s.searchFunction);\n            while (searchIdx !== -1) {\n                $.fn.dataTable.ext.search.splice(searchIdx, 1);\n                searchIdx = $.fn.dataTable.ext.search.indexOf(this.s.searchFunction);\n            }\n            // If the datatables have been defined for the panes then also destroy these\n            if (this.s.dtPane !== undefined) {\n                this.s.dtPane.destroy();\n            }\n            this.s.listSet = false;\n        };\n        /**\n         * Getting the legacy message is a little complex due a legacy parameter\n         */\n        SearchPane.prototype.emptyMessage = function () {\n            var def = this.c.i18n.emptyMessage;\n            // Legacy parameter support\n            if (this.c.emptyMessage) {\n                def = this.c.emptyMessage;\n            }\n            // Override per column\n            if (this.s.colOpts.emptyMessage !== false && this.s.colOpts.emptyMessage !== null) {\n                def = this.s.colOpts.emptyMessage;\n            }\n            return this.s.dt.i18n('searchPanes.emptyMessage', def);\n        };\n        /**\n         * Updates the number of filters that have been applied in the title\n         */\n        SearchPane.prototype.getPaneCount = function () {\n            return this.s.dtPane !== undefined ?\n                this.s.dtPane.rows({ selected: true }).data().toArray().length :\n                0;\n        };\n        /**\n         * Rebuilds the panes from the start having deleted the old ones\n         *\n         * @param? last boolean to indicate if this is the last pane a selection was made in\n         * @param? dataIn data to be used in buildPane\n         * @param? init Whether this is the initial draw or not\n         * @param? maintainSelection Whether the current selections are to be maintained over rebuild\n         */\n        SearchPane.prototype.rebuildPane = function (last, dataIn, init, maintainSelection) {\n            if (last === void 0) { last = false; }\n            if (dataIn === void 0) { dataIn = null; }\n            if (init === void 0) { init = null; }\n            if (maintainSelection === void 0) { maintainSelection = false; }\n            this.clearData();\n            var selectedRows = [];\n            this.s.serverSelect = [];\n            var prevEl = null;\n            // When rebuilding strip all of the HTML Elements out of the container and start from scratch\n            if (this.s.dtPane !== undefined) {\n                if (maintainSelection) {\n                    if (!this.s.dt.page.info().serverSide) {\n                        selectedRows = this.s.dtPane.rows({ selected: true }).data().toArray();\n                    }\n                    else {\n                        this.s.serverSelect = this.s.dtPane.rows({ selected: true }).data().toArray();\n                    }\n                }\n                this.s.dtPane.clear().destroy();\n                prevEl = $(this.dom.container).prev();\n                this.destroy();\n                this.s.dtPane = undefined;\n                $.fn.dataTable.ext.search.push(this.s.searchFunction);\n            }\n            this.dom.container.removeClass(this.classes.hidden);\n            this.s.displayed = false;\n            this._buildPane(!this.s.dt.page.info().serverSide ?\n                selectedRows :\n                this.s.serverSelect, last, dataIn, init, prevEl);\n            return this;\n        };\n        /**\n         * removes the pane from the page and sets the displayed property to false.\n         */\n        SearchPane.prototype.removePane = function () {\n            this.s.displayed = false;\n            $(this.dom.container).hide();\n        };\n        /**\n         * Resizes the pane based on the layout that is passed in\n         *\n         * @param layout the layout to be applied to this pane\n         */\n        SearchPane.prototype.resize = function (layout) {\n            this.c.layout = layout;\n            var layVal = parseInt(layout.split('-')[1], 10);\n            $(this.dom.container)\n                .removeClass()\n                .addClass(this.classes.container)\n                .addClass(this.classes.layout +\n                (layVal < 10 ? layout : layout.split('-')[0] + '-9'))\n                .addClass(this.s.colOpts.className)\n                .addClass((this.customPaneSettings !== null && this.customPaneSettings.className !== undefined)\n                ? this.customPaneSettings.className\n                : '')\n                .addClass(this.classes.show);\n            this.adjustTopRow();\n        };\n        /**\n         * Sets the cascadeRegen property of the pane. Accessible from above because as SearchPanes.ts\n         * deals with the rebuilds.\n         *\n         * @param val the boolean value that the cascadeRegen property is to be set to\n         */\n        SearchPane.prototype.setCascadeRegen = function (val) {\n            this.s.cascadeRegen = val;\n        };\n        /**\n         * This function allows the clearing property to be assigned. This is used when implementing cascadePane.\n         * In setting this to true for the clearing of the panes selection on the deselects it forces the pane to\n         * repopulate from the entire dataset not just the displayed values.\n         *\n         * @param val the boolean value which the clearing property is to be assigned\n         */\n        SearchPane.prototype.setClear = function (val) {\n            this.s.clearing = val;\n        };\n        /**\n         * Updates the values of all of the panes\n         *\n         * @param draw whether this has been triggered by a draw event or not\n         */\n        SearchPane.prototype.updatePane = function (draw) {\n            if (draw === void 0) { draw = false; }\n            this.s.updating = true;\n            this._updateCommon(draw);\n            this.s.updating = false;\n        };\n        /**\n         * Updates the panes if one of the options to do so has been set to true\n         * rather than the filtered message when using viewTotal.\n         */\n        SearchPane.prototype.updateTable = function () {\n            var selectedRows = this.s.dtPane.rows({ selected: true }).data().toArray();\n            this.selections = selectedRows;\n            this._searchExtras();\n            // If either of the options that effect how the panes are displayed are selected then update the Panes\n            if (this.c.cascadePanes || this.c.viewTotal) {\n                this.updatePane();\n            }\n        };\n        /**\n         * Sets the listeners for the pane.\n         *\n         * Having it in it's own function makes it easier to only set them once\n         */\n        SearchPane.prototype._setListeners = function () {\n            var _this = this;\n            var rowData = this.s.rowData;\n            var t0;\n            // When an item is selected on the pane, add these to the array which holds selected items.\n            // Custom search will perform.\n            this.s.dtPane.on('select.dtsp', function () {\n                clearTimeout(t0);\n                if (_this.s.dt.page.info().serverSide && !_this.s.updating) {\n                    if (!_this.s.serverSelecting) {\n                        _this.s.serverSelect = _this.s.dtPane.rows({ selected: true }).data().toArray();\n                        _this.s.scrollTop = $(_this.s.dtPane.table().node()).parent()[0].scrollTop;\n                        _this.s.selectPresent = true;\n                        _this.s.dt.draw(false);\n                    }\n                }\n                else {\n                    $(_this.dom.clear).removeClass(_this.classes.disabledButton).removeAttr('disabled');\n                    if (!_this.s.updating) {\n                        _this.s.selectPresent = true;\n                        _this._makeSelection();\n                        _this.s.selectPresent = false;\n                    }\n                }\n            });\n            // When an item is deselected on the pane, re add the currently selected items to the array\n            // which holds selected items. Custom search will be performed.\n            this.s.dtPane.on('deselect.dtsp', function () {\n                t0 = setTimeout(function () {\n                    if (_this.s.dt.page.info().serverSide && !_this.s.updating) {\n                        if (!_this.s.serverSelecting) {\n                            _this.s.serverSelect = _this.s.dtPane.rows({ selected: true }).data().toArray();\n                            _this.s.deselect = true;\n                            _this.s.dt.draw(false);\n                        }\n                    }\n                    else {\n                        _this.s.deselect = true;\n                        if (_this.s.dtPane.rows({ selected: true }).data().toArray().length === 0) {\n                            $(_this.dom.clear).addClass(_this.classes.disabledButton).attr('disabled', 'true');\n                        }\n                        _this._makeSelection();\n                        _this.s.deselect = false;\n                        _this.s.dt.state.save();\n                    }\n                }, 50);\n            });\n            // When saving the state store all of the selected rows for preselection next time around\n            this.s.dt.on('stateSaveParams.dtsp', function (e, settings, data) {\n                // If the data being passed in is empty then state clear must have occured so clear the panes state as well\n                if ($.isEmptyObject(data)) {\n                    _this.s.dtPane.state.clear();\n                    return;\n                }\n                var selected = [];\n                var searchTerm;\n                var order;\n                var bins;\n                var arrayFilter;\n                // Get all of the data needed for the state save from the pane\n                if (_this.s.dtPane !== undefined) {\n                    selected = _this.s.dtPane.rows({ selected: true }).data().map(function (item) { return item.filter.toString(); }).toArray();\n                    searchTerm = $(_this.dom.searchBox).val();\n                    order = _this.s.dtPane.order();\n                    bins = rowData.binsOriginal;\n                    arrayFilter = rowData.arrayOriginal;\n                }\n                if (data.searchPanes === undefined) {\n                    data.searchPanes = {};\n                }\n                if (data.searchPanes.panes === undefined) {\n                    data.searchPanes.panes = [];\n                }\n                for (var i = 0; i < data.searchPanes.panes.length; i++) {\n                    if (data.searchPanes.panes[i].id === _this.s.index) {\n                        data.searchPanes.panes.splice(i, 1);\n                        i--;\n                    }\n                }\n                // Add the panes data to the state object\n                data.searchPanes.panes.push({\n                    arrayFilter: arrayFilter,\n                    bins: bins,\n                    id: _this.s.index,\n                    order: order,\n                    searchTerm: searchTerm,\n                    selected: selected\n                });\n            });\n            this.s.dtPane.on('user-select.dtsp', function (e, _dt, type, cell, originalEvent) {\n                originalEvent.stopPropagation();\n            });\n            this.s.dtPane.on('draw.dtsp', function () {\n                _this.adjustTopRow();\n            });\n            // When the button to order by the name of the options is clicked then\n            //  change the ordering to whatever it isn't currently\n            $(this.dom.nameButton).on('click.dtsp', function () {\n                var currentOrder = _this.s.dtPane.order()[0][1];\n                _this.s.dtPane.order([0, currentOrder === 'asc' ? 'desc' : 'asc']).draw();\n                _this.s.dt.state.save();\n            });\n            // When the button to order by the number of entries in the column is clicked then\n            //  change the ordering to whatever it isn't currently\n            $(this.dom.countButton).on('click.dtsp', function () {\n                var currentOrder = _this.s.dtPane.order()[0][1];\n                _this.s.dtPane.order([1, currentOrder === 'asc' ? 'desc' : 'asc']).draw();\n                _this.s.dt.state.save();\n            });\n            // When the clear button is clicked reset the pane\n            $(this.dom.clear).on('click.dtsp', function () {\n                var searches = _this.dom.container.find('.' + _this.classes.search.replace(/ /g, '.'));\n                searches.each(function () {\n                    // set the value of the search box to be an empty string and then search on that, effectively reseting\n                    $(this).val('');\n                    $(this).trigger('input');\n                });\n                _this.clearPane();\n            });\n            // When the search button is clicked then draw focus to the search box\n            $(this.dom.searchButton).on('click.dtsp', function () {\n                $(_this.dom.searchBox).focus();\n            });\n            // When a character is inputted into the searchbox search the pane for matching values.\n            // Doing it this way means that no button has to be clicked to trigger a search, it is done asynchronously\n            $(this.dom.searchBox).on('input.dtsp', function () {\n                var searchval = $(_this.dom.searchBox).val();\n                _this.s.dtPane.search(searchval).draw();\n                if (searchval.length > 0 ||\n                    (searchval.length === 0 && _this.s.dtPane.rows({ selected: true }).data().toArray().length > 0)) {\n                    _this.dom.clear.removeClass(_this.classes.disabledButton).removeAttr('disabled');\n                }\n                else {\n                    _this.dom.clear.addClass(_this.classes.disabledButton).attr('disabled', 'true');\n                }\n                _this.s.dt.state.save();\n            });\n            // Make sure to save the state once the pane has been built\n            this.s.dt.state.save();\n            return true;\n        };\n        /**\n         * Takes in potentially undetected rows and adds them to the array if they are not yet featured\n         *\n         * @param filter the filter value of the potential row\n         * @param display the display value of the potential row\n         * @param sort the sort value of the potential row\n         * @param type the type value of the potential row\n         * @param arrayFilter the array to be populated\n         * @param bins the bins to be populated\n         */\n        SearchPane.prototype._addOption = function (filter, display, sort, type, arrayFilter, bins) {\n            // If the filter is an array then take a note of this, and add the elements to the arrayFilter array\n            if (Array.isArray(filter) || filter instanceof dataTable.Api) {\n                // Convert to an array so that we can work with it\n                if (filter instanceof dataTable.Api) {\n                    filter = filter.toArray();\n                    display = display.toArray();\n                }\n                if (filter.length === display.length) {\n                    for (var i = 0; i < filter.length; i++) {\n                        // If we haven't seen this row before add it\n                        if (!bins[filter[i]]) {\n                            bins[filter[i]] = 1;\n                            arrayFilter.push({\n                                display: display[i],\n                                filter: filter[i],\n                                sort: sort[i],\n                                type: type[i]\n                            });\n                        }\n                        // Otherwise just increment the count\n                        else {\n                            bins[filter[i]]++;\n                        }\n                        this.s.rowData.totalOptions++;\n                    }\n                    return;\n                }\n                else {\n                    throw new Error('display and filter not the same length');\n                }\n            }\n            // If the values were affected by othogonal data and are not an array then check if it is already present\n            else if (typeof this.s.colOpts.orthogonal === 'string') {\n                if (!bins[filter]) {\n                    bins[filter] = 1;\n                    arrayFilter.push({\n                        display: display,\n                        filter: filter,\n                        sort: sort,\n                        type: type\n                    });\n                    this.s.rowData.totalOptions++;\n                }\n                else {\n                    bins[filter]++;\n                    this.s.rowData.totalOptions++;\n                    return;\n                }\n            }\n            // Otherwise we must just be adding an option\n            else {\n                arrayFilter.push({\n                    display: display,\n                    filter: filter,\n                    sort: sort,\n                    type: type\n                });\n            }\n        };\n        /**\n         * Method to construct the actual pane.\n         *\n         * @param selectedRows previously selected Rows to be reselected\n         * @last boolean to indicate whether this pane was the last one to have a selection made\n         */\n        SearchPane.prototype._buildPane = function (selectedRows, last, dataIn, init, prevEl) {\n            var _this = this;\n            if (selectedRows === void 0) { selectedRows = []; }\n            if (last === void 0) { last = false; }\n            if (dataIn === void 0) { dataIn = null; }\n            if (init === void 0) { init = null; }\n            if (prevEl === void 0) { prevEl = null; }\n            // Aliases\n            this.selections = [];\n            var table = this.s.dt;\n            var column = table.column(this.colExists ? this.s.index : 0);\n            var colOpts = this.s.colOpts;\n            var rowData = this.s.rowData;\n            // Other Variables\n            var countMessage = table.i18n('searchPanes.count', this.c.i18n.count);\n            var filteredMessage = table.i18n('searchPanes.countFiltered', this.c.i18n.countFiltered);\n            var loadedFilter = table.state.loaded();\n            // If the listeners have not been set yet then using the latest state may result in funny errors\n            if (this.s.listSet) {\n                loadedFilter = table.state();\n            }\n            // If it is not a custom pane in place\n            if (this.colExists) {\n                var idx = -1;\n                if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.panes) {\n                    for (var i = 0; i < loadedFilter.searchPanes.panes.length; i++) {\n                        if (loadedFilter.searchPanes.panes[i].id === this.s.index) {\n                            idx = i;\n                            break;\n                        }\n                    }\n                }\n                // Perform checks that do not require populate pane to run\n                if ((colOpts.show === false\n                    || (colOpts.show !== undefined && colOpts.show !== true)) &&\n                    idx === -1) {\n                    this.dom.container.addClass(this.classes.hidden);\n                    this.s.displayed = false;\n                    return false;\n                }\n                else if (colOpts.show === true || idx !== -1) {\n                    this.s.displayed = true;\n                }\n                if (!this.s.dt.page.info().serverSide &&\n                    (dataIn === null ||\n                        dataIn.searchPanes === null ||\n                        dataIn.searchPanes.options === null)) {\n                    // Only run populatePane if the data has not been collected yet\n                    if (rowData.arrayFilter.length === 0) {\n                        this._populatePane(last);\n                        this.s.rowData.totalOptions = 0;\n                        this._detailsPane();\n                        // If the index is not found then no data has been added to the state for this pane,\n                        //  which will only occur if it has previously failed to meet the criteria to be\n                        //  displayed, therefore we can just hide it again here\n                        if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.panes && idx === -1) {\n                            this.dom.container.addClass(this.classes.hidden);\n                            this.s.displayed = false;\n                            return;\n                        }\n                        rowData.arrayOriginal = rowData.arrayTotals;\n                        rowData.binsOriginal = rowData.binsTotal;\n                    }\n                    var binLength = Object.keys(rowData.binsOriginal).length;\n                    var uniqueRatio = this._uniqueRatio(binLength, table.rows()[0].length);\n                    // Don't show the pane if there isn't enough variance in the data, or there is only 1 entry\n                    //  for that pane\n                    if (this.s.displayed === false && ((colOpts.show === undefined && colOpts.threshold === null ?\n                        uniqueRatio > this.c.threshold :\n                        uniqueRatio > colOpts.threshold)\n                        || (colOpts.show !== true && binLength <= 1))) {\n                        this.dom.container.addClass(this.classes.hidden);\n                        this.s.displayed = false;\n                        return;\n                    }\n                    // If the option viewTotal is true then find\n                    // the total count for the whole table to display alongside the displayed count\n                    if (this.c.viewTotal && rowData.arrayTotals.length === 0) {\n                        this.s.rowData.totalOptions = 0;\n                        this._detailsPane();\n                    }\n                    else {\n                        rowData.binsTotal = rowData.bins;\n                    }\n                    this.dom.container.addClass(this.classes.show);\n                    this.s.displayed = true;\n                }\n                else if (dataIn !== null && dataIn.searchPanes !== null && dataIn.searchPanes.options !== null) {\n                    if (dataIn.tableLength !== undefined) {\n                        this.s.tableLength = dataIn.tableLength;\n                        this.s.rowData.totalOptions = this.s.tableLength;\n                    }\n                    else if (this.s.tableLength === null || table.rows()[0].length > this.s.tableLength) {\n                        this.s.tableLength = table.rows()[0].length;\n                        this.s.rowData.totalOptions = this.s.tableLength;\n                    }\n                    var colTitle = table.column(this.s.index).dataSrc();\n                    if (dataIn.searchPanes.options[colTitle] !== undefined) {\n                        for (var _i = 0, _a = dataIn.searchPanes.options[colTitle]; _i < _a.length; _i++) {\n                            var dataPoint = _a[_i];\n                            this.s.rowData.arrayFilter.push({\n                                display: dataPoint.label,\n                                filter: dataPoint.value,\n                                sort: dataPoint.label,\n                                type: dataPoint.label\n                            });\n                            this.s.rowData.bins[dataPoint.value] = this.c.viewTotal || this.c.cascadePanes ?\n                                dataPoint.count :\n                                dataPoint.total;\n                            this.s.rowData.binsTotal[dataPoint.value] = dataPoint.total;\n                        }\n                    }\n                    var binLength = Object.keys(rowData.binsTotal).length;\n                    var uniqueRatio = this._uniqueRatio(binLength, this.s.tableLength);\n                    // Don't show the pane if there isnt enough variance in the data, or there is only 1 entry for that pane\n                    if (this.s.displayed === false && ((colOpts.show === undefined && colOpts.threshold === null ?\n                        uniqueRatio > this.c.threshold :\n                        uniqueRatio > colOpts.threshold)\n                        || (colOpts.show !== true && binLength <= 1))) {\n                        this.dom.container.addClass(this.classes.hidden);\n                        this.s.displayed = false;\n                        return;\n                    }\n                    this.s.rowData.arrayOriginal = this.s.rowData.arrayFilter;\n                    this.s.rowData.binsOriginal = this.s.rowData.bins;\n                    this.s.displayed = true;\n                }\n            }\n            else {\n                this.s.displayed = true;\n            }\n            // If the variance is accceptable then display the search pane\n            this._displayPane();\n            if (!this.s.listSet) {\n                // Here, when the state is loaded if the data object on the original table is empty,\n                //  then a state.clear() must have occurred, so delete all of the panes tables state objects too.\n                this.dom.dtP.on('stateLoadParams.dt', function (e, settings, data) {\n                    if ($.isEmptyObject(table.state.loaded())) {\n                        $.each(data, function (index, value) {\n                            delete data[index];\n                        });\n                    }\n                });\n            }\n            // Add the container to the document in its original location\n            if (prevEl !== null && $(this.dom.panesContainer).has(prevEl).length > 0) {\n                $(this.dom.container).insertAfter(prevEl);\n            }\n            else {\n                $(this.dom.panesContainer).prepend(this.dom.container);\n            }\n            // Declare the datatable for the pane\n            var errMode = $.fn.dataTable.ext.errMode;\n            $.fn.dataTable.ext.errMode = 'none';\n            var haveScroller = dataTable.Scroller;\n            this.s.dtPane = $(this.dom.dtP).DataTable($.extend(true, {\n                columnDefs: [\n                    {\n                        className: 'dtsp-nameColumn',\n                        data: 'display',\n                        render: function (data, type, row) {\n                            if (type === 'sort') {\n                                return row.sort;\n                            }\n                            else if (type === 'type') {\n                                return row.type;\n                            }\n                            var message;\n                            message = ((_this.s.filteringActive || _this.s.showFiltered) && _this.c.viewTotal) ||\n                                (_this.c.viewTotal && _this.s.forceViewTotal) ?\n                                filteredMessage.replace(/{total}/, row.total) :\n                                countMessage.replace(/{total}/, row.total);\n                            message = message.replace(/{shown}/, row.shown);\n                            while (message.indexOf('{total}') !== -1) {\n                                message = message.replace(/{total}/, row.total);\n                            }\n                            while (message.indexOf('{shown}') !== -1) {\n                                message = message.replace(/{shown}/, row.shown);\n                            }\n                            // We are displaying the count in the same columne as the name of the search option.\n                            // This is so that there is not need to call columns.adjust()\n                            //  which in turn speeds up the code\n                            var pill = '<span class=\"' + _this.classes.pill + '\">' + message + '</span>';\n                            if (!_this.c.viewCount || !colOpts.viewCount) {\n                                pill = '';\n                            }\n                            if (type === 'filter') {\n                                return typeof data === 'string' && data.match(/<[^>]*>/) !== null ?\n                                    data.replace(/<[^>]*>/g, '') :\n                                    data;\n                            }\n                            return '<div class=\"' + _this.classes.nameCont + '\"><span title=\"' +\n                                (typeof data === 'string' && data.match(/<[^>]*>/) !== null ?\n                                    data.replace(/<[^>]*>/g, '') :\n                                    data) +\n                                '\" class=\"' + _this.classes.name + '\">' +\n                                data + '</span>' +\n                                pill + '</div>';\n                        },\n                        targets: 0,\n                        // Accessing the private datatables property to set type based on the original table.\n                        // This is null if not defined by the user, meaning that automatic type detection\n                        //  would take place\n                        type: table.settings()[0].aoColumns[this.s.index] !== undefined ?\n                            table.settings()[0].aoColumns[this.s.index]._sManualType :\n                            null\n                    },\n                    {\n                        className: 'dtsp-countColumn ' + this.classes.badgePill,\n                        data: 'shown',\n                        orderData: [1, 2],\n                        targets: 1,\n                        visible: false\n                    },\n                    {\n                        data: 'total',\n                        targets: 2,\n                        visible: false\n                    }\n                ],\n                deferRender: true,\n                dom: 't',\n                info: false,\n                language: this.s.dt.settings()[0].oLanguage,\n                paging: haveScroller ? true : false,\n                scrollX: false,\n                scrollY: '200px',\n                scroller: haveScroller ? true : false,\n                select: true,\n                stateSave: table.settings()[0].oFeatures.bStateSave ? true : false\n            }, this.c.dtOpts, colOpts !== undefined ? colOpts.dtOpts : {}, (this.s.colOpts.options !== undefined || !this.colExists)\n                ? {\n                    createdRow: function (row, data, dataIndex) {\n                        $(row).addClass(data.className);\n                    }\n                }\n                : undefined, (this.customPaneSettings !== null && this.customPaneSettings.dtOpts !== undefined)\n                ? this.customPaneSettings.dtOpts\n                : {}, $.fn.dataTable.versionCheck('2')\n                ? {\n                    layout: {\n                        bottomLeft: null,\n                        bottomRight: null,\n                        topLeft: null,\n                        topRight: null\n                    }\n                }\n                : {}));\n            $(this.dom.dtP).addClass(this.classes.table);\n            // Getting column titles is a little messy\n            var headerText = 'Custom Pane';\n            if (this.customPaneSettings && this.customPaneSettings.header) {\n                headerText = this.customPaneSettings.header;\n            }\n            else if (colOpts.header) {\n                headerText = colOpts.header;\n            }\n            else if (this.colExists) {\n                headerText = $.fn.dataTable.versionCheck('2')\n                    ? table.column(this.s.index).title()\n                    : table.settings()[0].aoColumns[this.s.index].sTitle;\n            }\n            this.dom.searchBox.attr('placeholder', headerText);\n            // As the pane table is not in the document yet we must initialise select ourselves\n            $.fn.dataTable.select.init(this.s.dtPane);\n            $.fn.dataTable.ext.errMode = errMode;\n            // If it is not a custom pane\n            if (this.colExists) {\n                // On initialisation, do we need to set a filtering value from a\n                // saved state or init option?\n                var search = column.search();\n                search = search ? search.substr(1, search.length - 2).split('|') : [];\n                // Count the number of empty cells\n                var count_1 = 0;\n                rowData.arrayFilter.forEach(function (element) {\n                    if (element.filter === '') {\n                        count_1++;\n                    }\n                });\n                // Add all of the search options to the pane\n                for (var i = 0, ien = rowData.arrayFilter.length; i < ien; i++) {\n                    var selected = false;\n                    for (var _b = 0, _c = this.s.serverSelect; _b < _c.length; _b++) {\n                        var option = _c[_b];\n                        if (option.filter === rowData.arrayFilter[i].filter) {\n                            selected = true;\n                        }\n                    }\n                    if (this.s.dt.page.info().serverSide &&\n                        (!this.c.cascadePanes ||\n                            (this.c.cascadePanes && rowData.bins[rowData.arrayFilter[i].filter] !== 0) ||\n                            (this.c.cascadePanes && init !== null) ||\n                            selected)) {\n                        var row = this.addRow(rowData.arrayFilter[i].display, rowData.arrayFilter[i].filter, init ?\n                            rowData.binsTotal[rowData.arrayFilter[i].filter] :\n                            rowData.bins[rowData.arrayFilter[i].filter], this.c.viewTotal || init\n                            ? String(rowData.binsTotal[rowData.arrayFilter[i].filter])\n                            : rowData.bins[rowData.arrayFilter[i].filter], rowData.arrayFilter[i].sort, rowData.arrayFilter[i].type);\n                        for (var _d = 0, _e = this.s.serverSelect; _d < _e.length; _d++) {\n                            var option = _e[_d];\n                            if (option.filter === rowData.arrayFilter[i].filter) {\n                                this.s.serverSelecting = true;\n                                row.select();\n                                this.s.serverSelecting = false;\n                            }\n                        }\n                    }\n                    else if (!this.s.dt.page.info().serverSide &&\n                        rowData.arrayFilter[i] &&\n                        (rowData.bins[rowData.arrayFilter[i].filter] !== undefined || !this.c.cascadePanes)) {\n                        this.addRow(rowData.arrayFilter[i].display, rowData.arrayFilter[i].filter, rowData.bins[rowData.arrayFilter[i].filter], rowData.binsTotal[rowData.arrayFilter[i].filter], rowData.arrayFilter[i].sort, rowData.arrayFilter[i].type);\n                    }\n                    else if (!this.s.dt.page.info().serverSide) {\n                        // Just pass an empty string as the message will be calculated based on that in addRow()\n                        this.addRow('', count_1, count_1, '', '', '');\n                    }\n                }\n            }\n            dataTable.select.init(this.s.dtPane);\n            // If there are custom options set or it is a custom pane then get them\n            if (colOpts.options !== undefined ||\n                (this.customPaneSettings !== null && this.customPaneSettings.options !== undefined)) {\n                this._getComparisonRows();\n            }\n            // Display the pane\n            this.s.dtPane.draw();\n            this.adjustTopRow();\n            if (!this.s.listSet) {\n                this._setListeners();\n                this.s.listSet = true;\n            }\n            for (var _f = 0, selectedRows_1 = selectedRows; _f < selectedRows_1.length; _f++) {\n                var selection = selectedRows_1[_f];\n                if (selection !== undefined) {\n                    for (var _g = 0, _h = this.s.dtPane.rows().indexes().toArray(); _g < _h.length; _g++) {\n                        var row = _h[_g];\n                        if (this.s.dtPane.row(row).data() !== undefined &&\n                            selection.filter === this.s.dtPane.row(row).data().filter) {\n                            // If this is happening when serverSide processing is happening then\n                            //  different behaviour is needed\n                            if (this.s.dt.page.info().serverSide) {\n                                this.s.serverSelecting = true;\n                                this.s.dtPane.row(row).select();\n                                this.s.serverSelecting = false;\n                            }\n                            else {\n                                this.s.dtPane.row(row).select();\n                            }\n                        }\n                    }\n                }\n            }\n            //  If SSP and the table is ready, apply the search for the pane\n            if (this.s.dt.page.info().serverSide) {\n                this.s.dtPane.search($(this.dom.searchBox).val()).draw();\n            }\n            // Reload the selection, searchbox entry and ordering from the previous state\n            // Need to check here if SSP that this is the first draw, otherwise it will infinite loop\n            if (loadedFilter &&\n                loadedFilter.searchPanes &&\n                loadedFilter.searchPanes.panes &&\n                (dataIn === null ||\n                    dataIn.draw === 1)) {\n                if (!this.c.cascadePanes) {\n                    this._reloadSelect(loadedFilter);\n                }\n                for (var _j = 0, _k = loadedFilter.searchPanes.panes; _j < _k.length; _j++) {\n                    var pane = _k[_j];\n                    if (pane.id === this.s.index) {\n                        $(this.dom.searchBox).val(pane.searchTerm);\n                        $(this.dom.searchBox).trigger('input');\n                        this.s.dtPane.order(pane.order).draw();\n                    }\n                }\n            }\n            // Make sure to save the state once the pane has been built\n            this.s.dt.state.save();\n            return true;\n        };\n        /**\n         * Update the array which holds the display and filter values for the table\n         */\n        SearchPane.prototype._detailsPane = function () {\n            var table = this.s.dt;\n            this.s.rowData.arrayTotals = [];\n            this.s.rowData.binsTotal = {};\n            var settings = this.s.dt.settings()[0];\n            var indexArray = table.rows().indexes();\n            if (!this.s.dt.page.info().serverSide) {\n                for (var _i = 0, indexArray_1 = indexArray; _i < indexArray_1.length; _i++) {\n                    var rowIdx = indexArray_1[_i];\n                    this._populatePaneArray(rowIdx, this.s.rowData.arrayTotals, settings, this.s.rowData.binsTotal);\n                }\n            }\n        };\n        /**\n         * Appends all of the HTML elements to their relevant parent Elements\n         */\n        SearchPane.prototype._displayPane = function () {\n            var container = this.dom.container;\n            var colOpts = this.s.colOpts;\n            var layVal = parseInt(this.c.layout.split('-')[1], 10);\n            //  Empty everything to start again\n            $(this.dom.topRow).empty();\n            $(this.dom.dtP).empty();\n            $(this.dom.topRow).addClass(this.classes.topRow);\n            // If there are more than 3 columns defined then make there be a smaller gap between the panes\n            if (layVal > 3) {\n                $(this.dom.container).addClass(this.classes.smallGap);\n            }\n            $(this.dom.topRow).addClass(this.classes.subRowsContainer);\n            $(this.dom.upper).appendTo(this.dom.topRow);\n            $(this.dom.lower).appendTo(this.dom.topRow);\n            $(this.dom.searchCont).appendTo(this.dom.upper);\n            $(this.dom.buttonGroup).appendTo(this.dom.lower);\n            // If no selections have been made in the pane then disable the clear button\n            if (this.c.dtOpts.searching === false ||\n                (colOpts.dtOpts !== undefined &&\n                    colOpts.dtOpts.searching === false) ||\n                (!this.c.controls || !colOpts.controls) ||\n                (this.customPaneSettings !== null &&\n                    this.customPaneSettings.dtOpts !== undefined &&\n                    this.customPaneSettings.dtOpts.searching !== undefined &&\n                    !this.customPaneSettings.dtOpts.searching)) {\n                $(this.dom.searchBox)\n                    .removeClass(this.classes.paneInputButton)\n                    .addClass(this.classes.disabledButton)\n                    .attr('disabled', 'true');\n            }\n            $(this.dom.searchBox).appendTo(this.dom.searchCont);\n            // Create the contents of the searchCont div. Worth noting that this function will change when using semantic ui\n            this._searchContSetup();\n            // If the clear button is allowed to show then display it\n            if (this.c.clear && this.c.controls && colOpts.controls) {\n                $(this.dom.clear).appendTo(this.dom.buttonGroup);\n            }\n            if (this.c.orderable && colOpts.orderable && this.c.controls && colOpts.controls) {\n                $(this.dom.nameButton).appendTo(this.dom.buttonGroup);\n            }\n            // If the count column is hidden then don't display the ordering button for it\n            if (this.c.viewCount &&\n                colOpts.viewCount &&\n                this.c.orderable &&\n                colOpts.orderable &&\n                this.c.controls &&\n                colOpts.controls) {\n                $(this.dom.countButton).appendTo(this.dom.buttonGroup);\n            }\n            $(this.dom.topRow).prependTo(this.dom.container);\n            $(container).append(this.dom.dtP);\n            $(container).show();\n        };\n        /**\n         * Gets the options for the row for the customPanes\n         *\n         * @returns {object} The options for the row extended to include the options from the user.\n         */\n        SearchPane.prototype._getBonusOptions = function () {\n            // We need to reset the thresholds as if they have a value in colOpts then that value will be used\n            var defaultMutator = {\n                orthogonal: {\n                    threshold: null\n                },\n                threshold: null\n            };\n            return $.extend(true, {}, SearchPane.defaults, defaultMutator, this.c !== undefined ? this.c : {});\n        };\n        /**\n         * Adds the custom options to the pane\n         *\n         * @returns {Array} Returns the array of rows which have been added to the pane\n         */\n        SearchPane.prototype._getComparisonRows = function () {\n            var colOpts = this.s.colOpts;\n            // Find the appropriate options depending on whether this is a pane for a specific column or a custom pane\n            var options = colOpts.options !== undefined\n                ? colOpts.options\n                : this.customPaneSettings !== null && this.customPaneSettings.options !== undefined\n                    ? this.customPaneSettings.options\n                    : undefined;\n            if (options === undefined) {\n                return;\n            }\n            var tableVals = this.s.dt.rows({ search: 'applied' }).data().toArray();\n            var appRows = this.s.dt.rows({ search: 'applied' });\n            var tableValsTotal = this.s.dt.rows().data().toArray();\n            var allRows = this.s.dt.rows();\n            var rows = [];\n            // Clear all of the other rows from the pane, only custom options are to be displayed when they are defined\n            this.s.dtPane.clear();\n            for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {\n                var comp = options_1[_i];\n                // Initialise the object which is to be placed in the row\n                var insert = comp.label !== '' ?\n                    comp.label :\n                    this.emptyMessage();\n                var comparisonObj = {\n                    className: comp.className,\n                    display: insert,\n                    filter: typeof comp.value === 'function' ? comp.value : [],\n                    shown: 0,\n                    sort: insert,\n                    total: 0,\n                    type: insert\n                };\n                // If a custom function is in place\n                if (typeof comp.value === 'function') {\n                    // Count the number of times the function evaluates to true for the data currently being displayed\n                    for (var tVal = 0; tVal < tableVals.length; tVal++) {\n                        if (comp.value.call(this.s.dt, tableVals[tVal], appRows[0][tVal])) {\n                            comparisonObj.shown++;\n                        }\n                    }\n                    // Count the number of times the function evaluates to true for the original data in the Table\n                    for (var i = 0; i < tableValsTotal.length; i++) {\n                        if (comp.value.call(this.s.dt, tableValsTotal[i], allRows[0][i])) {\n                            comparisonObj.total++;\n                        }\n                    }\n                    // Update the comparisonObj\n                    if (typeof comparisonObj.filter !== 'function') {\n                        comparisonObj.filter.push(comp.filter);\n                    }\n                }\n                // If cascadePanes is not active or if it is and the comparisonObj should be shown then add it to the pane\n                if (!this.c.cascadePanes || (this.c.cascadePanes && comparisonObj.shown !== 0)) {\n                    rows.push(this.addRow(comparisonObj.display, comparisonObj.filter, comparisonObj.shown, comparisonObj.total, comparisonObj.sort, comparisonObj.type, comparisonObj.className));\n                }\n            }\n            return rows;\n        };\n        /**\n         * Gets the options for the row for the customPanes\n         *\n         * @returns {object} The options for the row extended to include the options from the user.\n         */\n        SearchPane.prototype._getOptions = function () {\n            var table = this.s.dt;\n            // We need to reset the thresholds as if they have a value in colOpts then that value will be used\n            var defaultMutator = {\n                emptyMessage: false,\n                orthogonal: {\n                    threshold: null\n                },\n                threshold: null\n            };\n            var columnOptions = table.settings()[0].aoColumns[this.s.index].searchPanes;\n            var colOpts = $.extend(true, {}, SearchPane.defaults, defaultMutator, columnOptions);\n            if (columnOptions !== undefined &&\n                columnOptions.hideCount !== undefined &&\n                columnOptions.viewCount === undefined) {\n                colOpts.viewCount = !columnOptions.hideCount;\n            }\n            return colOpts;\n        };\n        /**\n         * This method allows for changes to the panes and table to be made when a selection or a deselection occurs\n         *\n         * @param select Denotes whether a selection has been made or not\n         */\n        SearchPane.prototype._makeSelection = function () {\n            this.updateTable();\n            this.s.updating = true;\n            this.s.dt.draw();\n            this.s.updating = false;\n        };\n        /**\n         * Fill the array with the values that are currently being displayed in the table\n         *\n         * @param last boolean to indicate whether this was the last pane a selection was made in\n         */\n        SearchPane.prototype._populatePane = function (last) {\n            if (last === void 0) { last = false; }\n            var table = this.s.dt;\n            this.s.rowData.arrayFilter = [];\n            this.s.rowData.bins = {};\n            var settings = this.s.dt.settings()[0];\n            // If cascadePanes or viewTotal are active it is necessary to get the data which is currently\n            //  being displayed for their functionality.\n            // Also make sure that this was not the last pane to have a selection made\n            if (!this.s.dt.page.info().serverSide) {\n                var indexArray = (this.c.cascadePanes || this.c.viewTotal) && (!this.s.clearing && !last) ?\n                    table.rows({ search: 'applied' }).indexes() :\n                    table.rows().indexes();\n                for (var _i = 0, _a = indexArray.toArray(); _i < _a.length; _i++) {\n                    var index = _a[_i];\n                    this._populatePaneArray(index, this.s.rowData.arrayFilter, settings);\n                }\n            }\n        };\n        /**\n         * Populates an array with all of the data for the table\n         *\n         * @param rowIdx The current row index to be compared\n         * @param arrayFilter The array that is to be populated with row Details\n         * @param bins The bins object that is to be populated with the row counts\n         */\n        SearchPane.prototype._populatePaneArray = function (rowIdx, arrayFilter, settings, bins) {\n            if (bins === void 0) { bins = this.s.rowData.bins; }\n            var colOpts = this.s.colOpts;\n            // Retrieve the rendered data from the cell using the fnGetCellData function\n            //  rather than the cell().render API method for optimisation\n            if (typeof colOpts.orthogonal === 'string') {\n                var rendered = settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal);\n                this.s.rowData.filterMap.set(rowIdx, rendered);\n                this._addOption(rendered, rendered, rendered, rendered, arrayFilter, bins);\n            }\n            else {\n                var filter = settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.search);\n                // Null and empty string are to be considered the same value\n                if (filter === null) {\n                    filter = '';\n                }\n                if (typeof filter === 'string') {\n                    filter = filter.replace(/<[^>]*>/g, '');\n                }\n                this.s.rowData.filterMap.set(rowIdx, filter);\n                if (!bins[filter]) {\n                    bins[filter] = 1;\n                    this._addOption(filter, settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.display), settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.sort), settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.type), arrayFilter, bins);\n                    this.s.rowData.totalOptions++;\n                }\n                else {\n                    bins[filter]++;\n                    this.s.rowData.totalOptions++;\n                    return;\n                }\n            }\n        };\n        /**\n         * Reloads all of the previous selects into the panes\n         *\n         * @param loadedFilter The loaded filters from a previous state\n         */\n        SearchPane.prototype._reloadSelect = function (loadedFilter) {\n            // If the state was not saved don't selected any\n            if (loadedFilter === undefined) {\n                return;\n            }\n            var idx;\n            // For each pane, check that the loadedFilter list exists and is not null,\n            // find the id of each search item and set it to be selected.\n            for (var i = 0; i < loadedFilter.searchPanes.panes.length; i++) {\n                if (loadedFilter.searchPanes.panes[i].id === this.s.index) {\n                    idx = i;\n                    break;\n                }\n            }\n            if (idx !== undefined) {\n                var table = this.s.dtPane;\n                var rows = table.rows({ order: 'index' }).data().map(function (item) { return item.filter !== null ?\n                    item.filter.toString() :\n                    null; }).toArray();\n                for (var _i = 0, _a = loadedFilter.searchPanes.panes[idx].selected; _i < _a.length; _i++) {\n                    var filter = _a[_i];\n                    var id = -1;\n                    if (filter !== null) {\n                        id = rows.indexOf(filter.toString());\n                    }\n                    if (id > -1) {\n                        this.s.serverSelecting = true;\n                        table.row(id).select();\n                        this.s.serverSelecting = false;\n                    }\n                }\n            }\n        };\n        /**\n         * This method decides whether a row should contribute to the pane or not\n         *\n         * @param filter the value that the row is to be filtered on\n         * @param dataIndex the row index\n         */\n        SearchPane.prototype._search = function (filter, dataIndex) {\n            var colOpts = this.s.colOpts;\n            var table = this.s.dt;\n            // For each item selected in the pane, check if it is available in the cell\n            for (var _i = 0, _a = this.selections; _i < _a.length; _i++) {\n                var colSelect = _a[_i];\n                if (typeof colSelect.filter === 'string' && typeof filter === 'string') {\n                    // The filter value will not have the &amp; in place but a &,\n                    //  so we need to do a replace to make sure that they will match\n                    colSelect.filter = colSelect.filter\n                        .replace(/&amp;/g, '&')\n                        .replace(/&lt;/g, '<')\n                        .replace(/&gt;/g, '>')\n                        .replace(/&quot;/g, '\"');\n                }\n                // if the filter is an array then is the column present in it\n                if (Array.isArray(filter)) {\n                    if (filter.indexOf(colSelect.filter) !== -1) {\n                        return true;\n                    }\n                }\n                // if the filter is a function then does it meet the criteria of that function or not\n                else if (typeof colSelect.filter === 'function') {\n                    if (colSelect.filter.call(table, table.row(dataIndex).data(), dataIndex)) {\n                        if (colOpts.combiner === 'or') {\n                            return true;\n                        }\n                    }\n                    // If the combiner is an \"and\" then we need to check against all possible selections\n                    //  so if it fails here then the and is not met and return false\n                    else if (colOpts.combiner === 'and') {\n                        return false;\n                    }\n                }\n                // otherwise if the two filter values are equal then return true\n                else if ((filter === colSelect.filter) ||\n                    // Loose type checking incase number type in column comparing to a string\n                    // eslint-disable-next-line eqeqeq\n                    (!(typeof filter === 'string' && filter.length === 0) && filter == colSelect.filter) ||\n                    (colSelect.filter === null && typeof filter === 'string' && filter === '')) {\n                    return true;\n                }\n            }\n            // If the combiner is an and then we need to check against all possible selections\n            //  so return true here if so because it would have returned false earlier if it had failed\n            if (colOpts.combiner === 'and') {\n                return true;\n            }\n            // Otherwise it hasn't matched with anything by this point so it must be false\n            else {\n                return false;\n            }\n        };\n        /**\n         * Creates the contents of the searchCont div\n         *\n         * NOTE This is overridden when semantic ui styling in order to integrate the search button into the text box.\n         */\n        SearchPane.prototype._searchContSetup = function () {\n            if (this.c.controls && this.s.colOpts.controls) {\n                $(this.dom.searchButton).appendTo(this.dom.searchLabelCont);\n            }\n            if (!(this.c.dtOpts.searching === false ||\n                this.s.colOpts.dtOpts.searching === false ||\n                (this.customPaneSettings !== null &&\n                    this.customPaneSettings.dtOpts !== undefined &&\n                    this.customPaneSettings.dtOpts.searching !== undefined &&\n                    !this.customPaneSettings.dtOpts.searching))) {\n                $(this.dom.searchLabelCont).appendTo(this.dom.searchCont);\n            }\n        };\n        /**\n         * Adds outline to the pane when a selection has been made\n         */\n        SearchPane.prototype._searchExtras = function () {\n            var updating = this.s.updating;\n            this.s.updating = true;\n            var filters = this.s.dtPane.rows({ selected: true }).data().pluck('filter').toArray();\n            var nullIndex = filters.indexOf(this.emptyMessage());\n            var container = $(this.s.dtPane.table().container());\n            // If null index is found then search for empty cells as a filter.\n            if (nullIndex > -1) {\n                filters[nullIndex] = '';\n            }\n            // If a filter has been applied then outline the respective pane, remove it when it no longer is.\n            if (filters.length > 0) {\n                container.addClass(this.classes.selected);\n            }\n            else if (filters.length === 0) {\n                container.removeClass(this.classes.selected);\n            }\n            this.s.updating = updating;\n        };\n        /**\n         * Finds the ratio of the number of different options in the table to the number of rows\n         *\n         * @param bins the number of different options in the table\n         * @param rowCount the total number of rows in the table\n         * @returns {number} returns the ratio\n         */\n        SearchPane.prototype._uniqueRatio = function (bins, rowCount) {\n            if (rowCount > 0 &&\n                ((this.s.rowData.totalOptions > 0 && !this.s.dt.page.info().serverSide) ||\n                    (this.s.dt.page.info().serverSide && this.s.tableLength > 0))) {\n                return bins / this.s.rowData.totalOptions;\n            }\n            else {\n                return 1;\n            }\n        };\n        /**\n         * updates the options within the pane\n         *\n         * @param draw a flag to define whether this has been called due to a draw event or not\n         */\n        SearchPane.prototype._updateCommon = function (draw) {\n            if (draw === void 0) { draw = false; }\n            // Update the panes if doing a deselect. if doing a select then\n            // update all of the panes except for the one causing the change\n            if (!this.s.dt.page.info().serverSide &&\n                this.s.dtPane !== undefined &&\n                (!this.s.filteringActive || this.c.cascadePanes || draw === true) &&\n                (this.c.cascadePanes !== true || this.s.selectPresent !== true) &&\n                (!this.s.lastSelect || !this.s.lastCascade)) {\n                var colOpts = this.s.colOpts;\n                var selected = this.s.dtPane.rows({ selected: true }).data().toArray();\n                var scrollTop = $(this.s.dtPane.table().node()).parent()[0].scrollTop;\n                var rowData = this.s.rowData;\n                // Clear the pane in preparation for adding the updated search options\n                this.s.dtPane.clear();\n                // If it is not a custom pane\n                if (this.colExists) {\n                    // Only run populatePane if the data has not been collected yet\n                    if (rowData.arrayFilter.length === 0) {\n                        this._populatePane(!this.s.filteringActive);\n                    }\n                    // If cascadePanes is active and the table has returned to its default state then\n                    //  there is a need to update certain parts ofthe rowData.\n                    else if (this.c.cascadePanes &&\n                        this.s.dt.rows().data().toArray().length ===\n                            this.s.dt.rows({ search: 'applied' }).data().toArray().length) {\n                        rowData.arrayFilter = rowData.arrayOriginal;\n                        rowData.bins = rowData.binsOriginal;\n                    }\n                    // Otherwise if viewTotal or cascadePanes is active then the data from the table must be read.\n                    else if (this.c.viewTotal || this.c.cascadePanes) {\n                        this._populatePane(!this.s.filteringActive);\n                    }\n                    // If the viewTotal option is selected then find the totals for the table\n                    if (this.c.viewTotal) {\n                        this._detailsPane();\n                    }\n                    else {\n                        rowData.binsTotal = rowData.bins;\n                    }\n                    if (this.c.viewTotal && !this.c.cascadePanes) {\n                        rowData.arrayFilter = rowData.arrayTotals;\n                    }\n                    var _loop_1 = function (dataP) {\n                        // If both view Total and cascadePanes have been selected and the count of the row\n                        //  is not 0 then add it to pane\n                        // Do this also if the viewTotal option has been selected and cascadePanes has not\n                        if (dataP && ((rowData.bins[dataP.filter] !== undefined &&\n                            rowData.bins[dataP.filter] !== 0 && this_1.c.cascadePanes) ||\n                            !this_1.c.cascadePanes ||\n                            this_1.s.clearing)) {\n                            var row = this_1.addRow(dataP.display, dataP.filter, !this_1.c.viewTotal ?\n                                rowData.bins[dataP.filter] :\n                                rowData.bins[dataP.filter] !== undefined ?\n                                    rowData.bins[dataP.filter] :\n                                    0, this_1.c.viewTotal ?\n                                String(rowData.binsTotal[dataP.filter]) :\n                                rowData.bins[dataP.filter], dataP.sort, dataP.type);\n                            // Find out if the filter was selected in the previous search,\n                            //  if so select it and remove from array.\n                            var selectIndex = selected.findIndex(function (element) {\n                                return element.filter === dataP.filter;\n                            });\n                            if (selectIndex !== -1) {\n                                row.select();\n                                selected.splice(selectIndex, 1);\n                            }\n                        }\n                    };\n                    var this_1 = this;\n                    for (var _i = 0, _a = rowData.arrayFilter; _i < _a.length; _i++) {\n                        var dataP = _a[_i];\n                        _loop_1(dataP);\n                    }\n                }\n                if ((colOpts.searchPanes !== undefined && colOpts.searchPanes.options !== undefined) ||\n                    colOpts.options !== undefined ||\n                    (this.customPaneSettings !== null && this.customPaneSettings.options !== undefined)) {\n                    var rows = this._getComparisonRows();\n                    var _loop_2 = function (row) {\n                        var selectIndex = selected.findIndex(function (element) {\n                            if (element.display === row.data().display) {\n                                return true;\n                            }\n                        });\n                        if (selectIndex !== -1) {\n                            row.select();\n                            selected.splice(selectIndex, 1);\n                        }\n                    };\n                    for (var _b = 0, rows_1 = rows; _b < rows_1.length; _b++) {\n                        var row = rows_1[_b];\n                        _loop_2(row);\n                    }\n                }\n                // Add search options which were previously selected but whos results are no\n                // longer present in the resulting data set.\n                for (var _c = 0, selected_1 = selected; _c < selected_1.length; _c++) {\n                    var selectedEl = selected_1[_c];\n                    var row = this.addRow(selectedEl.display, selectedEl.filter, 0, this.c.viewTotal\n                        ? selectedEl.total\n                        : 0, selectedEl.display, selectedEl.display);\n                    this.s.updating = true;\n                    row.select();\n                    this.s.updating = false;\n                }\n                this.s.dtPane.draw();\n                this.s.dtPane.table().node().parentNode.scrollTop = scrollTop;\n            }\n        };\n        SearchPane.version = '1.3.0';\n        SearchPane.classes = {\n            buttonGroup: 'dtsp-buttonGroup',\n            buttonSub: 'dtsp-buttonSub',\n            clear: 'dtsp-clear',\n            clearAll: 'dtsp-clearAll',\n            clearButton: 'clearButton',\n            container: 'dtsp-searchPane',\n            countButton: 'dtsp-countButton',\n            disabledButton: 'dtsp-disabledButton',\n            hidden: 'dtsp-hidden',\n            hide: 'dtsp-hide',\n            layout: 'dtsp-',\n            name: 'dtsp-name',\n            nameButton: 'dtsp-nameButton',\n            nameCont: 'dtsp-nameCont',\n            narrow: 'dtsp-narrow',\n            paneButton: 'dtsp-paneButton',\n            paneInputButton: 'dtsp-paneInputButton',\n            pill: 'dtsp-pill',\n            search: 'dtsp-search',\n            searchCont: 'dtsp-searchCont',\n            searchIcon: 'dtsp-searchIcon',\n            searchLabelCont: 'dtsp-searchButtonCont',\n            selected: 'dtsp-selected',\n            smallGap: 'dtsp-smallGap',\n            subRow1: 'dtsp-subRow1',\n            subRow2: 'dtsp-subRow2',\n            subRowsContainer: 'dtsp-subRowsContainer',\n            title: 'dtsp-title',\n            topRow: 'dtsp-topRow'\n        };\n        // Define SearchPanes default options\n        SearchPane.defaults = {\n            cascadePanes: false,\n            clear: true,\n            combiner: 'or',\n            container: function (dt) {\n                return dt.table().container();\n            },\n            controls: true,\n            dtOpts: {},\n            emptyMessage: null,\n            hideCount: false,\n            i18n: {\n                clearPane: '&times;',\n                count: '{total}',\n                countFiltered: '{shown} ({total})',\n                emptyMessage: '<em>No data</em>'\n            },\n            layout: 'auto',\n            name: undefined,\n            orderable: true,\n            orthogonal: {\n                display: 'display',\n                filter: 'filter',\n                hideCount: false,\n                search: 'filter',\n                show: undefined,\n                sort: 'sort',\n                threshold: 0.6,\n                type: 'type',\n                viewCount: true\n            },\n            preSelect: [],\n            threshold: 0.6,\n            viewCount: true,\n            viewTotal: false\n        };\n        return SearchPane;\n    }());\n\n    var $$1;\n    var dataTable$1;\n    function setJQuery$1(jq) {\n        $$1 = jq;\n        dataTable$1 = jq.fn.dataTable;\n    }\n    var SearchPanes = /** @class */ (function () {\n        function SearchPanes(paneSettings, opts, fromInit) {\n            var _this = this;\n            if (fromInit === void 0) { fromInit = false; }\n            this.regenerating = false;\n            // Check that the required version of DataTables is included\n            if (!dataTable$1 || !dataTable$1.versionCheck || !dataTable$1.versionCheck('1.10.0')) {\n                throw new Error('SearchPane requires DataTables 1.10 or newer');\n            }\n            // Check that Select is included\n            if (!dataTable$1.select) {\n                throw new Error('SearchPane requires Select');\n            }\n            var table = new dataTable$1.Api(paneSettings);\n            this.classes = $$1.extend(true, {}, SearchPanes.classes);\n            // Get options from user\n            this.c = $$1.extend(true, {}, SearchPanes.defaults, opts);\n            // Add extra elements to DOM object including clear\n            this.dom = {\n                clearAll: $$1('<button type=\"button\">Clear All</button>').addClass(this.classes.clearAll),\n                container: $$1('<div/>').addClass(this.classes.panes).text(table.i18n('searchPanes.loadMessage', this.c.i18n.loadMessage)),\n                emptyMessage: $$1('<div/>').addClass(this.classes.emptyMessage),\n                options: $$1('<div/>').addClass(this.classes.container),\n                panes: $$1('<div/>').addClass(this.classes.container),\n                title: $$1('<div/>').addClass(this.classes.title),\n                titleRow: $$1('<div/>').addClass(this.classes.titleRow),\n                wrapper: $$1('<div/>')\n            };\n            this.s = {\n                colOpts: [],\n                dt: table,\n                filterCount: 0,\n                filterPane: -1,\n                page: 0,\n                panes: [],\n                selectionList: [],\n                serverData: {},\n                stateRead: false,\n                updating: false\n            };\n            if (table.settings()[0]._searchPanes !== undefined) {\n                return;\n            }\n            this._getState();\n            if (this.s.dt.page.info().serverSide) {\n                table.on('preXhr.dt', function (e, settings, data) {\n                    if (data.searchPanes === undefined) {\n                        data.searchPanes = {};\n                    }\n                    if (data.searchPanes_null === undefined) {\n                        data.searchPanes_null = {};\n                    }\n                    for (var _i = 0, _a = _this.s.selectionList; _i < _a.length; _i++) {\n                        var selection = _a[_i];\n                        var src = _this.s.dt.column(selection.index).dataSrc();\n                        if (data.searchPanes[src] === undefined) {\n                            data.searchPanes[src] = {};\n                        }\n                        if (data.searchPanes_null[src] === undefined) {\n                            data.searchPanes_null[src] = {};\n                        }\n                        for (var i = 0; i < selection.rows.length; i++) {\n                            data.searchPanes[src][i] = selection.rows[i].filter;\n                            if (data.searchPanes[src][i] === null) {\n                                data.searchPanes_null[src][i] = true;\n                            }\n                        }\n                    }\n                });\n            }\n            // We are using the xhr event to rebuild the panes if required due to viewTotal being enabled\n            // If viewTotal is not enabled then we simply update the data from the server\n            table.on('xhr', function (e, settings, json, xhr) {\n                if (json && json.searchPanes && json.searchPanes.options) {\n                    _this.s.serverData = json;\n                    _this.s.serverData.tableLength = json.recordsTotal;\n                    _this._serverTotals();\n                }\n            });\n            table.settings()[0]._searchPanes = this;\n            this.dom.clearAll.text(table.i18n('searchPanes.clearMessage', this.c.i18n.clearMessage));\n            if (this.s.dt.settings()[0]._bInitComplete || fromInit) {\n                this._paneDeclare(table, paneSettings, opts);\n            }\n            else {\n                table.one('preInit.dt', function (settings) {\n                    _this._paneDeclare(table, paneSettings, opts);\n                });\n            }\n            return this;\n        }\n        /**\n         * Clear the selections of all of the panes\n         */\n        SearchPanes.prototype.clearSelections = function () {\n            // Load in all of the searchBoxes in the documents\n            var searches = this.dom.container.find('.' + this.classes.search.replace(/\\s+/g, '.'));\n            // For each searchBox set the input text to be empty and then trigger\n            //  an input on them so that they no longer filter the panes\n            searches.each(function () {\n                $$1(this).val('');\n                $$1(this).trigger('input');\n            });\n            var returnArray = [];\n            // For every pane, clear the selections in the pane\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                if (pane.s.dtPane !== undefined) {\n                    returnArray.push(pane.clearPane());\n                }\n            }\n            return returnArray;\n        };\n        /**\n         * returns the container node for the searchPanes\n         */\n        SearchPanes.prototype.getNode = function () {\n            return this.dom.container;\n        };\n        /**\n         * rebuilds all of the panes\n         */\n        SearchPanes.prototype.rebuild = function (targetIdx, maintainSelection) {\n            if (targetIdx === void 0) { targetIdx = false; }\n            if (maintainSelection === void 0) { maintainSelection = false; }\n            $$1(this.dom.emptyMessage).remove();\n            // As a rebuild from scratch is required, empty the searchpanes container.\n            var returnArray = [];\n            // Rebuild each pane individually, if a specific pane has been selected then only rebuild that one\n            if (targetIdx === false) {\n                $$1(this.dom.panes).empty();\n            }\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                if (targetIdx !== false && pane.s.index !== targetIdx) {\n                    continue;\n                }\n                pane.clearData();\n                returnArray.push(\n                // Pass a boolean to say whether this is the last choice made for maintaining selections when rebuilding\n                pane.rebuildPane(this.s.selectionList[this.s.selectionList.length - 1] !== undefined ?\n                    pane.s.index === this.s.selectionList[this.s.selectionList.length - 1].index :\n                    false, this.s.dt.page.info().serverSide ?\n                    this.s.serverData :\n                    undefined, null, maintainSelection));\n                $$1(this.dom.panes).append(pane.dom.container);\n            }\n            if (this.c.cascadePanes || this.c.viewTotal) {\n                this.redrawPanes(true);\n            }\n            else {\n                this._updateSelection();\n            }\n            // Attach panes, clear buttons, and title bar to the document\n            this._updateFilterCount();\n            this._attachPaneContainer();\n            this.s.dt.draw();\n            // Resize the panes incase there has been a change\n            this.resizePanes();\n            // If a single pane has been rebuilt then return only that pane\n            if (returnArray.length === 1) {\n                return returnArray[0];\n            }\n            // Otherwise return all of the panes that have been rebuilt\n            else {\n                return returnArray;\n            }\n        };\n        /**\n         * Redraws all of the panes\n         */\n        SearchPanes.prototype.redrawPanes = function (rebuild) {\n            if (rebuild === void 0) { rebuild = false; }\n            var table = this.s.dt;\n            // Only do this if the redraw isn't being triggered by the panes updating themselves\n            if (!this.s.updating && !this.s.dt.page.info().serverSide) {\n                var filterActive = true;\n                var filterPane = this.s.filterPane;\n                var selectTotal = null;\n                for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                    var pane = _a[_i];\n                    if (pane.s.dtPane !== undefined) {\n                        selectTotal += pane.s.dtPane.rows({ selected: true }).data().toArray().length;\n                    }\n                }\n                // If the number of rows currently visible is equal to the number of rows in the table\n                //  then there can't be any filtering taking place\n                if (selectTotal === 0 &&\n                    table.rows({ search: 'applied' }).data().toArray().length === table.rows().data().toArray().length) {\n                    filterActive = false;\n                }\n                // Otherwise if viewTotal is active then it is necessary to determine which panes a select is present in.\n                //  If there is only one pane with a selection present then it should not show the filtered message as\n                //  more selections may be made in that pane.\n                else if (this.c.viewTotal) {\n                    for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n                        var pane = _c[_b];\n                        if (pane.s.dtPane !== undefined) {\n                            var selectLength = pane.s.dtPane.rows({ selected: true }).data().toArray().length;\n                            if (selectLength === 0) {\n                                for (var _d = 0, _e = this.s.selectionList; _d < _e.length; _d++) {\n                                    var selection = _e[_d];\n                                    if (selection.index === pane.s.index && selection.rows.length !== 0) {\n                                        selectLength = selection.rows.length;\n                                    }\n                                }\n                            }\n                            // If filterPane === -1 then a pane with a selection has not been found yet,\n                            //  so set filterPane to that panes index\n                            if (selectLength > 0 && filterPane === -1) {\n                                filterPane = pane.s.index;\n                            }\n                            // Then if another pane is found with a selection then set filterPane to null to\n                            //  show that multiple panes have selections present\n                            else if (selectLength > 0) {\n                                filterPane = null;\n                            }\n                        }\n                    }\n                    // If the searchbox is in place and filtering is applied then need to cascade down anyway\n                    if (selectTotal === 0) {\n                        filterPane = null;\n                    }\n                }\n                var deselectIdx = void 0;\n                var newSelectionList = [];\n                // Don't run this if it is due to the panes regenerating\n                if (!this.regenerating) {\n                    for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {\n                        var pane = _g[_f];\n                        // Identify the pane where a selection or deselection has been made and add it to the list.\n                        if (pane.s.selectPresent) {\n                            this.s.selectionList.push({\n                                index: pane.s.index,\n                                protect: false,\n                                rows: pane.s.dtPane.rows({ selected: true }).data().toArray()\n                            });\n                            table.state.save();\n                            break;\n                        }\n                        else if (pane.s.deselect) {\n                            deselectIdx = pane.s.index;\n                            var selectedData = pane.s.dtPane.rows({ selected: true }).data().toArray();\n                            if (selectedData.length > 0) {\n                                this.s.selectionList.push({\n                                    index: pane.s.index,\n                                    protect: true,\n                                    rows: selectedData\n                                });\n                            }\n                        }\n                    }\n                    if (this.s.selectionList.length > 0) {\n                        var last = this.s.selectionList[this.s.selectionList.length - 1].index;\n                        for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {\n                            var pane = _j[_h];\n                            pane.s.lastSelect = (pane.s.index === last);\n                        }\n                    }\n                    // Remove selections from the list from the pane where a deselect has taken place\n                    for (var i = 0; i < this.s.selectionList.length; i++) {\n                        if (this.s.selectionList[i].index !== deselectIdx || this.s.selectionList[i].protect === true) {\n                            var further = false;\n                            // Find out if this selection is the last one in the list for that pane\n                            for (var j = i + 1; j < this.s.selectionList.length; j++) {\n                                if (this.s.selectionList[j].index === this.s.selectionList[i].index) {\n                                    further = true;\n                                }\n                            }\n                            // If there are no selections for this pane in the list then just push this one\n                            if (!further) {\n                                newSelectionList.push(this.s.selectionList[i]);\n                                this.s.selectionList[i].protect = false;\n                            }\n                        }\n                    }\n                    var solePane = -1;\n                    if (newSelectionList.length === 1 && selectTotal !== null && selectTotal !== 0) {\n                        solePane = newSelectionList[0].index;\n                    }\n                    // Update all of the panes to reflect the current state of the filters\n                    for (var _k = 0, _l = this.s.panes; _k < _l.length; _k++) {\n                        var pane = _l[_k];\n                        if (pane.s.dtPane !== undefined) {\n                            var tempFilter = true;\n                            pane.s.filteringActive = true;\n                            if ((filterPane !== -1 && filterPane !== null && filterPane === pane.s.index) ||\n                                filterActive === false ||\n                                pane.s.index === solePane) {\n                                tempFilter = false;\n                                pane.s.filteringActive = false;\n                            }\n                            pane.updatePane(!tempFilter ? false : filterActive);\n                        }\n                    }\n                    // Update the label that shows how many filters are in place\n                    this._updateFilterCount();\n                    // If the length of the selections are different then some of them have been\n                    //  removed and a deselect has occured\n                    if (newSelectionList.length > 0 && (newSelectionList.length < this.s.selectionList.length || rebuild)) {\n                        this._cascadeRegen(newSelectionList, selectTotal);\n                        var last = newSelectionList[newSelectionList.length - 1].index;\n                        for (var _m = 0, _o = this.s.panes; _m < _o.length; _m++) {\n                            var pane = _o[_m];\n                            pane.s.lastSelect = (pane.s.index === last);\n                        }\n                    }\n                    else if (newSelectionList.length > 0) {\n                        // Update all of the other panes as you would just making a normal selection\n                        for (var _p = 0, _q = this.s.panes; _p < _q.length; _p++) {\n                            var paneUpdate = _q[_p];\n                            if (paneUpdate.s.dtPane !== undefined) {\n                                var tempFilter = true;\n                                paneUpdate.s.filteringActive = true;\n                                if ((filterPane !== -1 && filterPane !== null && filterPane === paneUpdate.s.index) ||\n                                    filterActive === false ||\n                                    paneUpdate.s.index === solePane) {\n                                    tempFilter = false;\n                                    paneUpdate.s.filteringActive = false;\n                                }\n                                paneUpdate.updatePane(!tempFilter ? tempFilter : filterActive);\n                            }\n                        }\n                    }\n                }\n                else {\n                    var solePane = -1;\n                    if (newSelectionList.length === 1 && selectTotal !== null && selectTotal !== 0) {\n                        solePane = newSelectionList[0].index;\n                    }\n                    for (var _r = 0, _s = this.s.panes; _r < _s.length; _r++) {\n                        var pane = _s[_r];\n                        if (pane.s.dtPane !== undefined) {\n                            var tempFilter = true;\n                            pane.s.filteringActive = true;\n                            if ((filterPane !== -1 && filterPane !== null && filterPane === pane.s.index) ||\n                                filterActive === false ||\n                                pane.s.index === solePane) {\n                                tempFilter = false;\n                                pane.s.filteringActive = false;\n                            }\n                            pane.updatePane(!tempFilter ? tempFilter : filterActive);\n                        }\n                    }\n                    // Update the label that shows how many filters are in place\n                    this._updateFilterCount();\n                }\n                if (!filterActive || selectTotal === 0) {\n                    this.s.selectionList = [];\n                }\n            }\n        };\n        /**\n         * Resizes all of the panes\n         */\n        SearchPanes.prototype.resizePanes = function () {\n            if (this.c.layout === 'auto') {\n                var contWidth = $$1(this.s.dt.searchPanes.container()).width();\n                var target = Math.floor(contWidth / 260.0); // The neatest number of panes per row\n                var highest = 1;\n                var highestmod = 0;\n                var dispIndex = [];\n                // Get the indexes of all of the displayed panes\n                for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                    var pane = _a[_i];\n                    if (pane.s.displayed) {\n                        dispIndex.push(pane.s.index);\n                    }\n                }\n                var displayCount = dispIndex.length;\n                // If the neatest number is the number we have then use this.\n                if (target === displayCount) {\n                    highest = target;\n                }\n                else {\n                    // Go from the target down and find the value with the most panes left over, this will be the best fit\n                    for (var ppr = target; ppr > 1; ppr--) {\n                        var rem = displayCount % ppr;\n                        if (rem === 0) {\n                            highest = ppr;\n                            highestmod = 0;\n                            break;\n                        }\n                        // If there are more left over at this amount of panes per row (ppr)\n                        //  then it fits better so new values\n                        else if (rem > highestmod) {\n                            highest = ppr;\n                            highestmod = rem;\n                        }\n                    }\n                }\n                // If there is a perfect fit then none are to be wider\n                var widerIndexes = highestmod !== 0 ? dispIndex.slice(dispIndex.length - highestmod, dispIndex.length) : [];\n                for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n                    var pane = _c[_b];\n                    // Resize the pane with the new layout\n                    if (pane.s.displayed) {\n                        var layout = 'columns-' + (widerIndexes.indexOf(pane.s.index) === -1 ? highest : highestmod);\n                        pane.resize(layout);\n                    }\n                }\n            }\n            else {\n                for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {\n                    var pane = _e[_d];\n                    pane.adjustTopRow();\n                }\n            }\n            return this;\n        };\n        /**\n         * Attach the panes, buttons and title to the document\n         */\n        SearchPanes.prototype._attach = function () {\n            var _this = this;\n            $$1(this.dom.container).removeClass(this.classes.hide);\n            $$1(this.dom.titleRow).removeClass(this.classes.hide);\n            $$1(this.dom.titleRow).remove();\n            $$1(this.dom.title).appendTo(this.dom.titleRow);\n            // If the clear button is permitted attach it\n            if (this.c.clear) {\n                $$1(this.dom.clearAll).appendTo(this.dom.titleRow);\n                $$1(this.dom.clearAll).on('click.dtsps', function () {\n                    _this.clearSelections();\n                });\n            }\n            $$1(this.dom.titleRow).appendTo(this.dom.container);\n            // Attach the container for each individual pane to the overall container\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                $$1(pane.dom.container).appendTo(this.dom.panes);\n            }\n            // Attach everything to the document\n            $$1(this.dom.panes).appendTo(this.dom.container);\n            if ($$1('div.' + this.classes.container).length === 0) {\n                $$1(this.dom.container).prependTo(this.s.dt);\n            }\n            return this.dom.container;\n        };\n        /**\n         * Attach the top row containing the filter count and clear all button\n         */\n        SearchPanes.prototype._attachExtras = function () {\n            $$1(this.dom.container).removeClass(this.classes.hide);\n            $$1(this.dom.titleRow).removeClass(this.classes.hide);\n            $$1(this.dom.titleRow).remove();\n            $$1(this.dom.title).appendTo(this.dom.titleRow);\n            // If the clear button is permitted attach it\n            if (this.c.clear) {\n                $$1(this.dom.clearAll).appendTo(this.dom.titleRow);\n            }\n            $$1(this.dom.titleRow).appendTo(this.dom.container);\n            return this.dom.container;\n        };\n        /**\n         * If there are no panes to display then this method is called to either\n         * display a message in their place or hide them completely.\n         */\n        SearchPanes.prototype._attachMessage = function () {\n            // Create a message to display on the screen\n            var message;\n            try {\n                message = this.s.dt.i18n('searchPanes.emptyPanes', this.c.i18n.emptyPanes);\n            }\n            catch (error) {\n                message = null;\n            }\n            // If the message is an empty string then searchPanes.emptyPanes is undefined,\n            //  therefore the pane container should be removed from the display\n            if (message === null) {\n                $$1(this.dom.container).addClass(this.classes.hide);\n                $$1(this.dom.titleRow).removeClass(this.classes.hide);\n                return;\n            }\n            else {\n                $$1(this.dom.container).removeClass(this.classes.hide);\n                $$1(this.dom.titleRow).addClass(this.classes.hide);\n            }\n            // Otherwise display the message\n            $$1(this.dom.emptyMessage).text(message);\n            this.dom.emptyMessage.appendTo(this.dom.container);\n            return this.dom.container;\n        };\n        /**\n         * Attaches the panes to the document and displays a message or hides if there are none\n         */\n        SearchPanes.prototype._attachPaneContainer = function () {\n            // If a pane is to be displayed then attach the normal pane output\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                if (pane.s.displayed === true) {\n                    return this._attach();\n                }\n            }\n            // Otherwise attach the custom message or remove the container from the display\n            return this._attachMessage();\n        };\n        /**\n         * Prepares the panes for selections to be made when cascade is active and a deselect has occured\n         *\n         * @param newSelectionList the list of selections which are to be made\n         */\n        SearchPanes.prototype._cascadeRegen = function (newSelectionList, selectTotal) {\n            // Set this to true so that the actions taken do not cause this to run until it is finished\n            this.regenerating = true;\n            // If only one pane has been selected then take note of its index\n            var solePane = -1;\n            if (newSelectionList.length === 1 && selectTotal !== null && selectTotal !== 0) {\n                solePane = newSelectionList[0].index;\n            }\n            // Let the pane know that a cascadeRegen is taking place to avoid unexpected behaviour\n            //  and clear all of the previous selections in the pane\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                pane.setCascadeRegen(true);\n                pane.setClear(true);\n                // If this is the same as the pane with the only selection then pass it as a parameter into clearPane\n                if ((pane.s.dtPane !== undefined && pane.s.index === solePane) || pane.s.dtPane !== undefined) {\n                    pane.clearPane();\n                }\n                pane.setClear(false);\n            }\n            // Rebin panes\n            this.s.dt.draw();\n            // While all of the selections have been removed, check the table lengths\n            // If they are different, another filter is in place and we need to force viewTotal to be used\n            var noSelectionsTableLength = this.s.dt.rows({ search: 'applied' }).data().toArray().length;\n            var tableLength = this.s.dt.rows().data().toArray().length;\n            if (tableLength !== noSelectionsTableLength) {\n                for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n                    var pane = _c[_b];\n                    pane.s.forceViewTotal = true;\n                }\n            }\n            for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {\n                var pane = _e[_d];\n                pane.updatePane(true);\n            }\n            // Remake Selections\n            this._makeCascadeSelections(newSelectionList);\n            // Set the selection list property to be the list without the selections from the deselect pane\n            this.s.selectionList = newSelectionList;\n            // The regeneration of selections is over so set it back to false\n            for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {\n                var pane = _g[_f];\n                pane.setCascadeRegen(false);\n            }\n            this.regenerating = false;\n            // ViewTotal has already been forced at this point so can cancel that for future\n            if (tableLength !== noSelectionsTableLength) {\n                for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {\n                    var pane = _j[_h];\n                    pane.s.forceViewTotal = false;\n                }\n            }\n        };\n        /**\n         * Attaches the message to the document but does not add any panes\n         */\n        SearchPanes.prototype._checkMessage = function () {\n            // If a pane is to be displayed then attach the normal pane output\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                if (pane.s.displayed === true) {\n                    // Ensure that the empty message is removed if a pane is displayed\n                    $$1(this.dom.emptyMessage).remove();\n                    $$1(this.dom.titleRow).removeClass(this.classes.hide);\n                    return;\n                }\n            }\n            // Otherwise attach the custom message or remove the container from the display\n            return this._attachMessage();\n        };\n        /**\n         * Gets the selection list from the previous state and stores it in the selectionList Property\n         */\n        SearchPanes.prototype._getState = function () {\n            var loadedFilter = this.s.dt.state.loaded();\n            if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.selectionList !== undefined) {\n                this.s.selectionList = loadedFilter.searchPanes.selectionList;\n            }\n        };\n        /**\n         * Makes all of the selections when cascade is active\n         *\n         * @param newSelectionList the list of selections to be made, in the order they were originally selected\n         */\n        SearchPanes.prototype._makeCascadeSelections = function (newSelectionList) {\n            // make selections in the order they were made previously,\n            //  excluding those from the pane where a deselect was made\n            for (var i = 0; i < newSelectionList.length; i++) {\n                var _loop_1 = function (pane) {\n                    if (pane.s.index === newSelectionList[i].index && pane.s.dtPane !== undefined) {\n                        // When regenerating the cascade selections we need this flag so that\n                        //  the panes are only ignored if it\n                        //  is the last selection and the pane for that selection\n                        if (i === newSelectionList.length - 1) {\n                            pane.s.lastCascade = true;\n                        }\n                        // if there are any selections currently in the pane then\n                        //  deselect them as we are about to make our new selections\n                        if (pane.s.dtPane.rows({ selected: true }).data().toArray().length > 0 && pane.s.dtPane !== undefined) {\n                            pane.setClear(true);\n                            pane.clearPane();\n                            pane.setClear(false);\n                        }\n                        var _loop_2 = function (row) {\n                            var found = false;\n                            pane.s.dtPane.rows().every(function (rowIdx) {\n                                if (pane.s.dtPane.row(rowIdx).data() !== undefined &&\n                                    row !== undefined &&\n                                    pane.s.dtPane.row(rowIdx).data().filter === row.filter) {\n                                    found = true;\n                                    pane.s.dtPane.row(rowIdx).select();\n                                }\n                            });\n                            if (!found) {\n                                var newRow = pane.addRow(row.display, row.filter, 0, row.total, row.sort, row.type, row.className);\n                                newRow.select();\n                            }\n                        };\n                        // select every row in the pane that was selected previously\n                        for (var _i = 0, _a = newSelectionList[i].rows; _i < _a.length; _i++) {\n                            var row = _a[_i];\n                            _loop_2(row);\n                        }\n                        pane.s.dtPane.draw();\n                        // Update the label that shows how many filters are in place\n                        this_1._updateFilterCount();\n                        pane.s.lastCascade = false;\n                    }\n                };\n                var this_1 = this;\n                // As the selections may have been made across the panes\n                //  in a different order to the pane index we must identify\n                //   which pane has the index of the selection. This is also important for colreorder etc\n                for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                    var pane = _a[_i];\n                    _loop_1(pane);\n                }\n            }\n            // Make sure that the state is saved after all of these selections\n            this.s.dt.state.save();\n        };\n        /**\n         * Declares the instances of individual searchpanes dependant on the number of columns.\n         * It is necessary to run this once preInit has completed otherwise no panes will be\n         * created as the column count will be 0.\n         *\n         * @param table the DataTable api for the parent table\n         * @param paneSettings the settings passed into the constructor\n         * @param opts the options passed into the constructor\n         */\n        SearchPanes.prototype._paneDeclare = function (table, paneSettings, opts) {\n            var _this = this;\n            // Create Panes\n            table\n                .columns(this.c.columns.length > 0 ? this.c.columns : undefined)\n                .eq(0)\n                .each(function (idx) {\n                _this.s.panes.push(new SearchPane(paneSettings, opts, idx, _this.c.layout, _this.dom.panes));\n            });\n            // If there is any extra custom panes defined then create panes for them too\n            var rowLength = table.columns().eq(0).toArray().length;\n            var paneLength = this.c.panes.length;\n            for (var i = 0; i < paneLength; i++) {\n                var id = rowLength + i;\n                this.s.panes.push(new SearchPane(paneSettings, opts, id, this.c.layout, this.dom.panes, this.c.panes[i]));\n            }\n            // If a custom ordering is being used\n            if (this.c.order.length > 0) {\n                // Make a new Array of panes based upon the order\n                var newPanes = this.c.order.map(function (name, index, values) { return _this._findPane(name); });\n                // Remove the old panes from the dom\n                this.dom.panes.empty();\n                this.s.panes = newPanes;\n                // Append the panes in the correct order\n                for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                    var pane = _a[_i];\n                    this.dom.panes.append(pane.dom.container);\n                }\n            }\n            // If this internal property is true then the DataTable has been initialised already\n            if (this.s.dt.settings()[0]._bInitComplete) {\n                this._startup(table);\n            }\n            else {\n                // Otherwise add the paneStartup function to the list of functions\n                //  that are to be run when the table is initialised. This will garauntee that the\n                //   panes are initialised before the init event and init Complete callback is fired\n                this.s.dt.settings()[0].aoInitComplete.push({ fn: function () {\n                        _this._startup(table);\n                    } });\n            }\n        };\n        /**\n         * Finds a pane based upon the name of that pane\n         *\n         * @param name string representing the name of the pane\n         * @returns SearchPane The pane which has that name\n         */\n        SearchPanes.prototype._findPane = function (name) {\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                if (name === pane.s.name) {\n                    return pane;\n                }\n            }\n        };\n        /**\n         * Works out which panes to update when data is recieved from the server and viewTotal is active\n         */\n        SearchPanes.prototype._serverTotals = function () {\n            var selectPresent = false;\n            var deselectPresent = false;\n            var table = this.s.dt;\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                // Identify the pane where a selection or deselection has been made and add it to the list.\n                if (pane.s.selectPresent) {\n                    this.s.selectionList.push({\n                        index: pane.s.index,\n                        protect: false,\n                        rows: pane.s.dtPane.rows({ selected: true }).data().toArray()\n                    });\n                    table.state.save();\n                    pane.s.selectPresent = false;\n                    selectPresent = true;\n                    break;\n                }\n                else if (pane.s.deselect) {\n                    var selectedData = pane.s.dtPane.rows({ selected: true }).data().toArray();\n                    if (selectedData.length > 0) {\n                        this.s.selectionList.push({\n                            index: pane.s.index,\n                            protect: true,\n                            rows: selectedData\n                        });\n                    }\n                    selectPresent = true;\n                    deselectPresent = true;\n                }\n            }\n            // Build an updated list based on any selections or deselections added\n            if (!selectPresent) {\n                this.s.selectionList = [];\n            }\n            else {\n                var newSelectionList = [];\n                for (var i = 0; i < this.s.selectionList.length; i++) {\n                    var further = false;\n                    // Find out if this selection is the last one in the list for that pane\n                    for (var j = i + 1; j < this.s.selectionList.length; j++) {\n                        if (this.s.selectionList[j].index === this.s.selectionList[i].index) {\n                            further = true;\n                        }\n                    }\n                    // If there are no selections for this pane in the list then just push this one\n                    if (!further) {\n                        var push = false;\n                        for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n                            var pane = _c[_b];\n                            if (pane.s.index === this.s.selectionList[i].index &&\n                                pane.s.dtPane.rows({ selected: true }).data().toArray().length > 0) {\n                                push = true;\n                            }\n                        }\n                        if (push) {\n                            newSelectionList.push(this.s.selectionList[i]);\n                        }\n                    }\n                }\n                this.s.selectionList = newSelectionList;\n            }\n            var initIdx = -1;\n            // If there has been a deselect and only one pane has a selection then update everything\n            if (deselectPresent && this.s.selectionList.length === 1) {\n                for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {\n                    var pane = _e[_d];\n                    pane.s.lastSelect = false;\n                    pane.s.deselect = false;\n                    if (pane.s.dtPane !== undefined && pane.s.dtPane.rows({ selected: true }).data().toArray().length > 0) {\n                        initIdx = pane.s.index;\n                    }\n                }\n            }\n            // Otherwise if there are more 1 selections then find the last one and set it to not update that pane\n            else if (this.s.selectionList.length > 0) {\n                var last = this.s.selectionList[this.s.selectionList.length - 1].index;\n                for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {\n                    var pane = _g[_f];\n                    pane.s.lastSelect = (pane.s.index === last);\n                    pane.s.deselect = false;\n                }\n            }\n            // Otherwise if there are no selections then find where that took place and do not update to maintain scrolling\n            else if (this.s.selectionList.length === 0) {\n                for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {\n                    var pane = _j[_h];\n                    // pane.s.lastSelect = (pane.s.deselect === true);\n                    pane.s.lastSelect = false;\n                    pane.s.deselect = false;\n                }\n            }\n            $$1(this.dom.panes).empty();\n            // Rebuild the desired panes\n            for (var _k = 0, _l = this.s.panes; _k < _l.length; _k++) {\n                var pane = _l[_k];\n                if (!pane.s.lastSelect) {\n                    pane.rebuildPane(undefined, this.s.dt.page.info().serverSide ? this.s.serverData : undefined, pane.s.index === initIdx ? true : null, true);\n                }\n                else {\n                    pane._setListeners();\n                }\n                // append all of the panes and enable select\n                $$1(this.dom.panes).append(pane.dom.container);\n                if (pane.s.dtPane !== undefined) {\n                    $$1(pane.s.dtPane.table().node()).parent()[0].scrollTop = pane.s.scrollTop;\n                    $$1.fn.dataTable.select.init(pane.s.dtPane);\n                }\n            }\n            this._updateSelection();\n        };\n        /**\n         * Initialises the tables previous/preset selections and initialises callbacks for events\n         *\n         * @param table the parent table for which the searchPanes are being created\n         */\n        SearchPanes.prototype._startup = function (table) {\n            var _this = this;\n            $$1(this.dom.container).text('');\n            // Attach clear button and title bar to the document\n            this._attachExtras();\n            $$1(this.dom.container).append(this.dom.panes);\n            $$1(this.dom.panes).empty();\n            var loadedFilter = this.s.dt.state.loaded();\n            if (this.c.viewTotal && !this.c.cascadePanes) {\n                if (loadedFilter !== null &&\n                    loadedFilter !== undefined &&\n                    loadedFilter.searchPanes !== undefined &&\n                    loadedFilter.searchPanes.panes !== undefined) {\n                    var filterActive = false;\n                    for (var _i = 0, _a = loadedFilter.searchPanes.panes; _i < _a.length; _i++) {\n                        var pane = _a[_i];\n                        if (pane.selected.length > 0) {\n                            filterActive = true;\n                            break;\n                        }\n                    }\n                    if (filterActive) {\n                        for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n                            var pane = _c[_b];\n                            pane.s.showFiltered = true;\n                        }\n                    }\n                }\n            }\n            for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {\n                var pane = _e[_d];\n                pane.rebuildPane(undefined, Object.keys(this.s.serverData).length > 0 ? this.s.serverData : undefined);\n                $$1(this.dom.panes).append(pane.dom.container);\n            }\n            // If the layout is set to auto then the panes need to be resized to their best fit\n            if (this.c.layout === 'auto') {\n                this.resizePanes();\n            }\n            // Reset the paging if that has been saved in the state\n            if (!this.s.stateRead && loadedFilter !== null && loadedFilter !== undefined) {\n                this.s.dt.page((loadedFilter.start / this.s.dt.page.len()));\n                this.s.dt.draw('page');\n            }\n            this.s.stateRead = true;\n            if (this.c.viewTotal && !this.c.cascadePanes) {\n                for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {\n                    var pane = _g[_f];\n                    pane.updatePane();\n                }\n            }\n            this._updateFilterCount();\n            this._checkMessage();\n            // When a draw is called on the DataTable, update all of the panes incase the data in the DataTable has changed\n            table.on('preDraw.dtsps', function () {\n                if (!_this.s.updating) {\n                    _this._updateFilterCount();\n                    if ((_this.c.cascadePanes || _this.c.viewTotal) && !_this.s.dt.page.info().serverSide) {\n                        _this.redrawPanes(_this.c.viewTotal);\n                    }\n                    else {\n                        _this._updateSelection();\n                    }\n                    _this.s.filterPane = -1;\n                }\n            });\n            $$1(window).on('resize.dtsp', dataTable$1.util.throttle(function () {\n                _this.resizePanes();\n            }));\n            // Whenever a state save occurs store the selection list in the state object\n            this.s.dt.on('stateSaveParams.dtsp', function (e, settings, data) {\n                if (data.searchPanes === undefined) {\n                    data.searchPanes = {};\n                }\n                data.searchPanes.selectionList = _this.s.selectionList;\n            });\n            if (this.s.dt.page.info().serverSide) {\n                table.off('page');\n                table.on('page', function () {\n                    _this.s.page = _this.s.dt.page();\n                });\n                table.off('preXhr.dt');\n                table.on('preXhr.dt', function (e, settings, data) {\n                    if (data.searchPanes === undefined) {\n                        data.searchPanes = {};\n                    }\n                    if (data.searchPanes_null === undefined) {\n                        data.searchPanes_null = {};\n                    }\n                    // Count how many filters are being applied\n                    var filterCount = 0;\n                    for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {\n                        var pane = _a[_i];\n                        var src = _this.s.dt.column(pane.s.index).dataSrc();\n                        if (data.searchPanes[src] === undefined) {\n                            data.searchPanes[src] = {};\n                        }\n                        if (data.searchPanes_null[src] === undefined) {\n                            data.searchPanes_null[src] = {};\n                        }\n                        if (pane.s.dtPane !== undefined) {\n                            var rowData = pane.s.dtPane.rows({ selected: true }).data().toArray();\n                            for (var i = 0; i < rowData.length; i++) {\n                                data.searchPanes[src][i] = rowData[i].filter;\n                                if (data.searchPanes[src][i] === null) {\n                                    data.searchPanes_null[src][i] = true;\n                                }\n                                filterCount++;\n                            }\n                        }\n                    }\n                    if (_this.c.viewTotal) {\n                        _this._prepViewTotal(filterCount);\n                    }\n                    // If there is a filter to be applied, then we need to read from the start of the result set\n                    //  and set the paging to 0. This matches the behaviour of client side processing\n                    if (filterCount > 0) {\n                        // If the number of filters has changed we need to read from the start of the\n                        //  result set and reset the paging\n                        if (filterCount !== _this.s.filterCount) {\n                            data.start = 0;\n                            _this.s.page = 0;\n                        }\n                        // Otherwise it is a paging request and we need to read from whatever the paging has been set to\n                        else {\n                            data.start = _this.s.page * _this.s.dt.page.len();\n                        }\n                        _this.s.dt.page(_this.s.page);\n                        _this.s.filterCount = filterCount;\n                    }\n                });\n            }\n            else {\n                table.on('preXhr.dt', function (e, settings, data) {\n                    for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {\n                        var pane = _a[_i];\n                        pane.clearData();\n                    }\n                });\n            }\n            // If the data is reloaded from the server then it is possible that it has changed completely,\n            // so we need to rebuild the panes\n            this.s.dt.on('xhr', function (e, settings, json, xhr) {\n                if (settings.nTable !== _this.s.dt.table().node()) {\n                    return;\n                }\n                var processing = false;\n                if (!_this.s.dt.page.info().serverSide) {\n                    _this.s.dt.one('preDraw', function () {\n                        if (processing) {\n                            return;\n                        }\n                        var page = _this.s.dt.page();\n                        processing = true;\n                        _this.s.updating = true;\n                        $$1(_this.dom.panes).empty();\n                        for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {\n                            var pane = _a[_i];\n                            pane.clearData(); // Clears all of the bins and will mean that the data has to be re-read\n                            // Pass a boolean to say whether this is the last choice made for maintaining selections\n                            //  when rebuilding\n                            pane.rebuildPane(_this.s.selectionList[_this.s.selectionList.length - 1] !== undefined ?\n                                pane.s.index === _this.s.selectionList[_this.s.selectionList.length - 1].index :\n                                false, undefined, undefined, true);\n                            $$1(_this.dom.panes).append(pane.dom.container);\n                        }\n                        if (!_this.s.dt.page.info().serverSide) {\n                            _this.s.dt.draw();\n                        }\n                        _this.s.updating = false;\n                        if (_this.c.cascadePanes || _this.c.viewTotal) {\n                            _this.redrawPanes(_this.c.cascadePanes);\n                        }\n                        else {\n                            _this._updateSelection();\n                        }\n                        _this._checkMessage();\n                        _this.s.dt.one('draw', function () {\n                            _this.s.updating = true;\n                            _this.s.dt.page(page).draw(false);\n                            _this.s.updating = false;\n                        });\n                    });\n                }\n            });\n            // PreSelect any selections which have been defined using the preSelect option\n            for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {\n                var pane = _j[_h];\n                if (pane !== undefined &&\n                    pane.s.dtPane !== undefined &&\n                    ((pane.s.colOpts.preSelect !== undefined && pane.s.colOpts.preSelect.length > 0) ||\n                        (pane.customPaneSettings !== null &&\n                            pane.customPaneSettings.preSelect !== undefined &&\n                            pane.customPaneSettings.preSelect.length > 0))) {\n                    var tableLength = pane.s.dtPane.rows().data().toArray().length;\n                    for (var i = 0; i < tableLength; i++) {\n                        if (pane.s.colOpts.preSelect.indexOf(pane.s.dtPane.cell(i, 0).data()) !== -1 ||\n                            (pane.customPaneSettings !== null &&\n                                pane.customPaneSettings.preSelect !== undefined &&\n                                pane.customPaneSettings.preSelect.indexOf(pane.s.dtPane.cell(i, 0).data()) !== -1)) {\n                            pane.s.dtPane.row(i).select();\n                        }\n                    }\n                    pane.updateTable();\n                }\n            }\n            if (this.s.selectionList !== undefined && this.s.selectionList.length > 0) {\n                var last = this.s.selectionList[this.s.selectionList.length - 1].index;\n                for (var _k = 0, _l = this.s.panes; _k < _l.length; _k++) {\n                    var pane = _l[_k];\n                    pane.s.lastSelect = (pane.s.index === last);\n                }\n            }\n            // If cascadePanes is active then make the previous selections in the order they were previously\n            if (this.s.selectionList.length > 0 && this.c.cascadePanes) {\n                this._cascadeRegen(this.s.selectionList, this.s.selectionList.length);\n            }\n            // Update the title bar to show how many filters have been selected\n            this._updateFilterCount();\n            // If the table is destroyed and restarted then clear the selections so that they do not persist.\n            table.on('destroy.dtsps', function () {\n                for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {\n                    var pane = _a[_i];\n                    pane.destroy();\n                }\n                table.off('.dtsps');\n                $$1(_this.dom.clearAll).off('.dtsps');\n                $$1(_this.dom.container).remove();\n                _this.clearSelections();\n            });\n            // When the clear All button has been pressed clear all of the selections in the panes\n            if (this.c.clear) {\n                $$1(this.dom.clearAll).on('click.dtsps', function () {\n                    _this.clearSelections();\n                });\n            }\n            table.settings()[0]._searchPanes = this;\n            this.s.dt.state.save();\n        };\n        SearchPanes.prototype._prepViewTotal = function (selectTotal) {\n            var filterPane = this.s.filterPane;\n            var filterActive = false;\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                if (pane.s.dtPane !== undefined) {\n                    var selectLength = pane.s.dtPane.rows({ selected: true }).data().toArray().length;\n                    // If filterPane === -1 then a pane with a selection has not been found yet,\n                    //  so set filterPane to that panes index\n                    if (selectLength > 0 && filterPane === -1) {\n                        filterPane = pane.s.index;\n                        filterActive = true;\n                    }\n                    // Then if another pane is found with a selection then set filterPane to null to\n                    //  show that multiple panes have selections present\n                    else if (selectLength > 0) {\n                        filterPane = null;\n                    }\n                }\n            }\n            if (selectTotal !== null && selectTotal !== 0) {\n                filterPane = null;\n            }\n            // Update all of the panes to reflect the current state of the filters\n            for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {\n                var pane = _c[_b];\n                if (pane.s.dtPane !== undefined) {\n                    pane.s.filteringActive = true;\n                    if ((filterPane !== -1 && filterPane !== null && filterPane === pane.s.index) ||\n                        filterActive === false) {\n                        pane.s.filteringActive = false;\n                    }\n                }\n            }\n        };\n        /**\n         * Updates the number of filters that have been applied in the title\n         */\n        SearchPanes.prototype._updateFilterCount = function () {\n            var filterCount = 0;\n            // Add the number of all of the filters throughout the panes\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                if (pane.s.dtPane !== undefined) {\n                    filterCount += pane.getPaneCount();\n                }\n            }\n            // Run the message through the internationalisation method to improve readability\n            var message = this.s.dt.i18n('searchPanes.title', this.c.i18n.title, filterCount);\n            $$1(this.dom.title).text(message);\n            if (this.c.filterChanged !== undefined && typeof this.c.filterChanged === 'function') {\n                this.c.filterChanged.call(this.s.dt, filterCount);\n            }\n            if (filterCount === 0) {\n                $$1(this.dom.clearAll).addClass(this.classes.disabledButton).attr('disabled', 'true');\n            }\n            else {\n                $$1(this.dom.clearAll).removeClass(this.classes.disabledButton).removeAttr('disabled');\n            }\n        };\n        /**\n         * Updates the selectionList when cascade is not in place\n         */\n        SearchPanes.prototype._updateSelection = function () {\n            this.s.selectionList = [];\n            for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {\n                var pane = _a[_i];\n                if (pane.s.dtPane !== undefined) {\n                    this.s.selectionList.push({\n                        index: pane.s.index,\n                        protect: false,\n                        rows: pane.s.dtPane.rows({ selected: true }).data().toArray()\n                    });\n                }\n            }\n            this.s.dt.state.save();\n        };\n        SearchPanes.version = '1.3.0';\n        SearchPanes.classes = {\n            clear: 'dtsp-clear',\n            clearAll: 'dtsp-clearAll',\n            container: 'dtsp-searchPanes',\n            disabledButton: 'dtsp-disabledButton',\n            emptyMessage: 'dtsp-emptyMessage',\n            hide: 'dtsp-hidden',\n            panes: 'dtsp-panesContainer',\n            search: 'dtsp-search',\n            title: 'dtsp-title',\n            titleRow: 'dtsp-titleRow'\n        };\n        // Define SearchPanes default options\n        SearchPanes.defaults = {\n            cascadePanes: false,\n            clear: true,\n            columns: [],\n            container: function (dt) {\n                return dt.table().container();\n            },\n            filterChanged: undefined,\n            i18n: {\n                clearMessage: 'Clear All',\n                clearPane: '&times;',\n                collapse: {\n                    0: 'SearchPanes',\n                    _: 'SearchPanes (%d)'\n                },\n                count: '{total}',\n                countFiltered: '{shown} ({total})',\n                emptyMessage: '<em>No data</em>',\n                emptyPanes: 'No SearchPanes',\n                loadMessage: 'Loading Search Panes...',\n                title: 'Filters Active - %d'\n            },\n            layout: 'auto',\n            order: [],\n            panes: [],\n            viewTotal: false\n        };\n        return SearchPanes;\n    }());\n\n    /*! SearchPanes 1.3.0\n     * 2019-2020 SpryMedia Ltd - datatables.net/license\n     */\n    // DataTables extensions common UMD. Note that this allows for AMD, CommonJS\n    // (with window and jQuery being allowed as parameters to the returned\n    // function) or just default browser loading.\n    (function (factory) {\n        if (typeof define === 'function' && define.amd) {\n            // AMD\n            define(['jquery', 'datatables.net'], function ($) {\n                return factory($, window, document);\n            });\n        }\n        else if (typeof exports === 'object') {\n            // CommonJS\n            module.exports = function (root, $) {\n                if (!root) {\n                    root = window;\n                }\n                if (!$ || !$.fn.dataTable) {\n                    // eslint-disable-next-line @typescript-eslint/no-var-requires\n                    $ = require('datatables.net')(root, $).$;\n                }\n                return factory($, root, root.document);\n            };\n        }\n        else {\n            // Browser - assume jQuery has already been loaded\n            factory(window.jQuery, window, document);\n        }\n    }(function ($, window, document) {\n        setJQuery($);\n        setJQuery$1($);\n        var dataTable = $.fn.dataTable;\n        $.fn.dataTable.SearchPanes = SearchPanes;\n        $.fn.DataTable.SearchPanes = SearchPanes;\n        $.fn.dataTable.SearchPane = SearchPane;\n        $.fn.DataTable.SearchPane = SearchPane;\n        var apiRegister = $.fn.dataTable.Api.register;\n        apiRegister('searchPanes()', function () {\n            return this;\n        });\n        apiRegister('searchPanes.clearSelections()', function () {\n            return this.iterator('table', function (ctx) {\n                if (ctx._searchPanes) {\n                    ctx._searchPanes.clearSelections();\n                }\n            });\n        });\n        apiRegister('searchPanes.rebuildPane()', function (targetIdx, maintainSelections) {\n            return this.iterator('table', function (ctx) {\n                if (ctx._searchPanes) {\n                    ctx._searchPanes.rebuild(targetIdx, maintainSelections);\n                }\n            });\n        });\n        apiRegister('searchPanes.resizePanes()', function () {\n            var ctx = this.context[0];\n            return ctx._searchPanes ?\n                ctx._searchPanes.resizePanes() :\n                null;\n        });\n        apiRegister('searchPanes.container()', function () {\n            var ctx = this.context[0];\n            return ctx._searchPanes\n                ? ctx._searchPanes.getNode()\n                : null;\n        });\n        $.fn.dataTable.ext.buttons.searchPanesClear = {\n            action: function (e, dt, node, config) {\n                dt.searchPanes.clearSelections();\n            },\n            text: 'Clear Panes'\n        };\n        $.fn.dataTable.ext.buttons.searchPanes = {\n            action: function (e, dt, node, config) {\n                e.stopPropagation();\n                this.popover(config._panes.getNode(), {\n                    align: 'dt-container'\n                });\n                config._panes.rebuild(undefined, true);\n            },\n            config: {},\n            init: function (dt, node, config) {\n                var panes = new $.fn.dataTable.SearchPanes(dt, $.extend({\n                    filterChanged: function (count) {\n                        dt.button(node).text(dt.i18n('searchPanes.collapse', panes.c.i18n.collapse, count));\n                    }\n                }, config.config));\n                var message = dt.i18n('searchPanes.collapse', panes.c.i18n.collapse, 0);\n                dt.button(node).text(message);\n                config._panes = panes;\n            },\n            text: 'Search Panes'\n        };\n        function _init(settings, options, fromPre) {\n            if (options === void 0) { options = null; }\n            if (fromPre === void 0) { fromPre = false; }\n            var api = new dataTable.Api(settings);\n            var opts = options\n                ? options\n                : api.init().searchPanes || dataTable.defaults.searchPanes;\n            var searchPanes = new SearchPanes(api, opts, fromPre);\n            var node = searchPanes.getNode();\n            return node;\n        }\n        // Attach a listener to the document which listens for DataTables initialisation\n        // events so we can automatically initialise\n        $(document).on('preInit.dt.dtsp', function (e, settings, json) {\n            if (e.namespace !== 'dt') {\n                return;\n            }\n            if (settings.oInit.searchPanes ||\n                dataTable.defaults.searchPanes) {\n                if (!settings._searchPanes) {\n                    _init(settings, null, true);\n                }\n            }\n        });\n        // DataTables `dom` feature option\n        dataTable.ext.feature.push({\n            cFeature: 'P',\n            fnInit: _init\n        });\n        // DataTables 2 layout feature\n        if (dataTable.ext.features) {\n            dataTable.ext.features.register('searchPanes', _init);\n        }\n    }));\n\n}());\n"]},"metadata":{},"sourceType":"script"}