{"ast":null,"code":"/*! AutoFill 2.3.9\n * Â©2008-2021 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     AutoFill\n * @description Add Excel like click and drag auto-fill options to DataTables\n * @version     2.3.9\n * @file        dataTables.autoFill.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2010-2021 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  var _instance = 0;\n  /** \n   * AutoFill provides Excel like auto-fill features for a DataTable\n   *\n   * @class AutoFill\n   * @constructor\n   * @param {object} oTD DataTables settings object\n   * @param {object} oConfig Configuration object for AutoFill\n   */\n\n  var AutoFill = function (dt, opts) {\n    if (!DataTable.versionCheck || !DataTable.versionCheck('1.10.8')) {\n      throw \"Warning: AutoFill requires DataTables 1.10.8 or greater\";\n    } // User and defaults configuration object\n\n\n    this.c = $.extend(true, {}, DataTable.defaults.autoFill, AutoFill.defaults, opts);\n    /**\n     * @namespace Settings object which contains customisable information for AutoFill instance\n     */\n\n    this.s = {\n      /** @type {DataTable.Api} DataTables' API instance */\n      dt: new DataTable.Api(dt),\n\n      /** @type {String} Unique namespace for events attached to the document */\n      namespace: '.autoFill' + _instance++,\n\n      /** @type {Object} Cached dimension information for use in the mouse move event handler */\n      scroll: {},\n\n      /** @type {integer} Interval object used for smooth scrolling */\n      scrollInterval: null,\n      handle: {\n        height: 0,\n        width: 0\n      },\n\n      /**\n       * Enabled setting\n       * @type {Boolean}\n       */\n      enabled: false\n    };\n    /**\n     * @namespace Common and useful DOM elements for the class instance\n     */\n\n    this.dom = {\n      /** @type {jQuery} AutoFill handle */\n      handle: $('<div class=\"dt-autofill-handle\"/>'),\n\n      /**\n       * @type {Object} Selected cells outline - Need to use 4 elements,\n       *   otherwise the mouse over if you back into the selected rectangle\n       *   will be over that element, rather than the cells!\n       */\n      select: {\n        top: $('<div class=\"dt-autofill-select top\"/>'),\n        right: $('<div class=\"dt-autofill-select right\"/>'),\n        bottom: $('<div class=\"dt-autofill-select bottom\"/>'),\n        left: $('<div class=\"dt-autofill-select left\"/>')\n      },\n\n      /** @type {jQuery} Fill type chooser background */\n      background: $('<div class=\"dt-autofill-background\"/>'),\n\n      /** @type {jQuery} Fill type chooser */\n      list: $('<div class=\"dt-autofill-list\">' + this.s.dt.i18n('autoFill.info', '') + '<ul/></div>'),\n\n      /** @type {jQuery} DataTables scrolling container */\n      dtScroll: null,\n\n      /** @type {jQuery} Offset parent element */\n      offsetParent: null\n    };\n    /* Constructor logic */\n\n    this._constructor();\n  };\n\n  $.extend(AutoFill.prototype, {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Public methods (exposed via the DataTables API below)\n     */\n    enabled: function () {\n      return this.s.enabled;\n    },\n    enable: function (flag) {\n      var that = this;\n\n      if (flag === false) {\n        return this.disable();\n      }\n\n      this.s.enabled = true;\n\n      this._focusListener();\n\n      this.dom.handle.on('mousedown', function (e) {\n        that._mousedown(e);\n\n        return false;\n      });\n      return this;\n    },\n    disable: function () {\n      this.s.enabled = false;\n\n      this._focusListenerRemove();\n\n      return this;\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Constructor\n     */\n\n    /**\n     * Initialise the RowReorder instance\n     *\n     * @private\n     */\n    _constructor: function () {\n      var that = this;\n      var dt = this.s.dt;\n      var dtScroll = $('div.dataTables_scrollBody', this.s.dt.table().container()); // Make the instance accessible to the API\n\n      dt.settings()[0].autoFill = this;\n\n      if (dtScroll.length) {\n        this.dom.dtScroll = dtScroll; // Need to scroll container to be the offset parent\n\n        if (dtScroll.css('position') === 'static') {\n          dtScroll.css('position', 'relative');\n        }\n      }\n\n      if (this.c.enable !== false) {\n        this.enable();\n      }\n\n      dt.on('destroy.autoFill', function () {\n        that._focusListenerRemove();\n      });\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods\n     */\n\n    /**\n     * Display the AutoFill drag handle by appending it to a table cell. This\n     * is the opposite of the _detach method.\n     *\n     * @param  {node} node TD/TH cell to insert the handle into\n     * @private\n     */\n    _attach: function (node) {\n      var dt = this.s.dt;\n      var idx = dt.cell(node).index();\n      var handle = this.dom.handle;\n      var handleDim = this.s.handle;\n\n      if (!idx || dt.columns(this.c.columns).indexes().indexOf(idx.column) === -1) {\n        this._detach();\n\n        return;\n      }\n\n      if (!this.dom.offsetParent) {\n        // We attach to the table's offset parent\n        this.dom.offsetParent = $(dt.table().node()).offsetParent();\n      }\n\n      if (!handleDim.height || !handleDim.width) {\n        // Append to document so we can get its size. Not expecting it to\n        // change during the life time of the page\n        handle.appendTo('body');\n        handleDim.height = handle.outerHeight();\n        handleDim.width = handle.outerWidth();\n      } // Might need to go through multiple offset parents\n\n\n      var offset = this._getPosition(node, this.dom.offsetParent);\n\n      this.dom.attachedTo = node;\n      handle.css({\n        top: offset.top + node.offsetHeight - handleDim.height,\n        left: offset.left + node.offsetWidth - handleDim.width\n      }).appendTo(this.dom.offsetParent);\n    },\n\n    /**\n     * Determine can the fill type should be. This can be automatic, or ask the\n     * end user.\n     *\n     * @param {array} cells Information about the selected cells from the key\n     *     up function\n     * @private\n     */\n    _actionSelector: function (cells) {\n      var that = this;\n      var dt = this.s.dt;\n      var actions = AutoFill.actions;\n      var available = []; // \"Ask\" each plug-in if it wants to handle this data\n\n      $.each(actions, function (key, action) {\n        if (action.available(dt, cells)) {\n          available.push(key);\n        }\n      });\n\n      if (available.length === 1 && this.c.alwaysAsk === false) {\n        // Only one action available - enact it immediately\n        var result = actions[available[0]].execute(dt, cells);\n\n        this._update(result, cells);\n      } else if (available.length > 1) {\n        // Multiple actions available - ask the end user what they want to do\n        var list = this.dom.list.children('ul').empty(); // Add a cancel option\n\n        available.push('cancel');\n        $.each(available, function (i, name) {\n          list.append($('<li/>').append('<div class=\"dt-autofill-question\">' + actions[name].option(dt, cells) + '<div>').append($('<div class=\"dt-autofill-button\">').append($('<button class=\"' + AutoFill.classes.btn + '\">' + dt.i18n('autoFill.button', '&gt;') + '</button>').on('click', function () {\n            var result = actions[name].execute(dt, cells, $(this).closest('li'));\n\n            that._update(result, cells);\n\n            that.dom.background.remove();\n            that.dom.list.remove();\n          }))));\n        });\n        this.dom.background.appendTo('body');\n        this.dom.list.appendTo('body');\n        this.dom.list.css('margin-top', this.dom.list.outerHeight() / 2 * -1);\n      }\n    },\n\n    /**\n     * Remove the AutoFill handle from the document\n     *\n     * @private\n     */\n    _detach: function () {\n      this.dom.attachedTo = null;\n      this.dom.handle.detach();\n    },\n\n    /**\n     * Draw the selection outline by calculating the range between the start\n     * and end cells, then placing the highlighting elements to draw a rectangle\n     *\n     * @param  {node}   target End cell\n     * @param  {object} e      Originating event\n     * @private\n     */\n    _drawSelection: function (target, e) {\n      // Calculate boundary for start cell to this one\n      var dt = this.s.dt;\n      var start = this.s.start;\n      var startCell = $(this.dom.start);\n      var end = {\n        row: this.c.vertical ? dt.rows({\n          page: 'current'\n        }).nodes().indexOf(target.parentNode) : start.row,\n        column: this.c.horizontal ? $(target).index() : start.column\n      };\n      var colIndx = dt.column.index('toData', end.column);\n      var endRow = dt.row(':eq(' + end.row + ')', {\n        page: 'current'\n      }); // Workaround for M581\n\n      var endCell = $(dt.cell(endRow.index(), colIndx).node()); // Be sure that is a DataTables controlled cell\n\n      if (!dt.cell(endCell).any()) {\n        return;\n      } // if target is not in the columns available - do nothing\n\n\n      if (dt.columns(this.c.columns).indexes().indexOf(colIndx) === -1) {\n        return;\n      }\n\n      this.s.end = end;\n      var top, bottom, left, right, height, width;\n      top = start.row < end.row ? startCell : endCell;\n      bottom = start.row < end.row ? endCell : startCell;\n      left = start.column < end.column ? startCell : endCell;\n      right = start.column < end.column ? endCell : startCell;\n      top = this._getPosition(top.get(0)).top;\n      left = this._getPosition(left.get(0)).left;\n      height = this._getPosition(bottom.get(0)).top + bottom.outerHeight() - top;\n      width = this._getPosition(right.get(0)).left + right.outerWidth() - left;\n      var select = this.dom.select;\n      select.top.css({\n        top: top,\n        left: left,\n        width: width\n      });\n      select.left.css({\n        top: top,\n        left: left,\n        height: height\n      });\n      select.bottom.css({\n        top: top + height,\n        left: left,\n        width: width\n      });\n      select.right.css({\n        top: top,\n        left: left + width,\n        height: height\n      });\n    },\n\n    /**\n     * Use the Editor API to perform an update based on the new data for the\n     * cells\n     *\n     * @param {array} cells Information about the selected cells from the key\n     *     up function\n     * @private\n     */\n    _editor: function (cells) {\n      var dt = this.s.dt;\n      var editor = this.c.editor;\n\n      if (!editor) {\n        return;\n      } // Build the object structure for Editor's multi-row editing\n\n\n      var idValues = {};\n      var nodes = [];\n      var fields = editor.fields();\n\n      for (var i = 0, ien = cells.length; i < ien; i++) {\n        for (var j = 0, jen = cells[i].length; j < jen; j++) {\n          var cell = cells[i][j]; // Determine the field name for the cell being edited\n\n          var col = dt.settings()[0].aoColumns[cell.index.column];\n          var fieldName = col.editField;\n\n          if (fieldName === undefined) {\n            var dataSrc = col.mData; // dataSrc is the `field.data` property, but we need to set\n            // using the field name, so we need to translate from the\n            // data to the name\n\n            for (var k = 0, ken = fields.length; k < ken; k++) {\n              var field = editor.field(fields[k]);\n\n              if (field.dataSrc() === dataSrc) {\n                fieldName = field.name();\n                break;\n              }\n            }\n          }\n\n          if (!fieldName) {\n            throw 'Could not automatically determine field data. ' + 'Please see https://datatables.net/tn/11';\n          }\n\n          if (!idValues[fieldName]) {\n            idValues[fieldName] = {};\n          }\n\n          var id = dt.row(cell.index.row).id();\n          idValues[fieldName][id] = cell.set; // Keep a list of cells so we can activate the bubble editing\n          // with them\n\n          nodes.push(cell.index);\n        }\n      } // Perform the edit using bubble editing as it allows us to specify\n      // the cells to be edited, rather than using full rows\n\n\n      editor.bubble(nodes, false).multiSet(idValues).submit();\n    },\n\n    /**\n     * Emit an event on the DataTable for listeners\n     *\n     * @param  {string} name Event name\n     * @param  {array} args Event arguments\n     * @private\n     */\n    _emitEvent: function (name, args) {\n      this.s.dt.iterator('table', function (ctx, i) {\n        $(ctx.nTable).triggerHandler(name + '.dt', args);\n      });\n    },\n\n    /**\n     * Attach suitable listeners (based on the configuration) that will attach\n     * and detach the AutoFill handle in the document.\n     *\n     * @private\n     */\n    _focusListener: function () {\n      var that = this;\n      var dt = this.s.dt;\n      var namespace = this.s.namespace;\n      var focus = this.c.focus !== null ? this.c.focus : dt.init().keys || dt.settings()[0].keytable ? 'focus' : 'hover'; // All event listeners attached here are removed in the `destroy`\n      // callback in the constructor\n\n      if (focus === 'focus') {\n        dt.on('key-focus.autoFill', function (e, dt, cell) {\n          that._attach(cell.node());\n        }).on('key-blur.autoFill', function (e, dt, cell) {\n          that._detach();\n        });\n      } else if (focus === 'click') {\n        $(dt.table().body()).on('click' + namespace, 'td, th', function (e) {\n          that._attach(this);\n        });\n        $(document.body).on('click' + namespace, function (e) {\n          if (!$(e.target).parents().filter(dt.table().body()).length) {\n            that._detach();\n          }\n        });\n      } else {\n        $(dt.table().body()).on('mouseenter' + namespace, 'td, th', function (e) {\n          that._attach(this);\n        }).on('mouseleave' + namespace, function (e) {\n          if ($(e.relatedTarget).hasClass('dt-autofill-handle')) {\n            return;\n          }\n\n          that._detach();\n        });\n      }\n    },\n    _focusListenerRemove: function () {\n      var dt = this.s.dt;\n      dt.off('.autoFill');\n      $(dt.table().body()).off(this.s.namespace);\n      $(document.body).off(this.s.namespace);\n    },\n\n    /**\n     * Get the position of a node, relative to another, including any scrolling\n     * offsets.\n     * @param  {Node}   node         Node to get the position of\n     * @param  {jQuery} targetParent Node to use as the parent\n     * @return {object}              Offset calculation\n     * @private\n     */\n    _getPosition: function (node, targetParent) {\n      var currNode = node,\n          currOffsetParent,\n          top = 0,\n          left = 0;\n\n      if (!targetParent) {\n        targetParent = $($(this.s.dt.table().node())[0].offsetParent);\n      }\n\n      do {\n        // Don't use jQuery().position() the behaviour changes between 1.x and 3.x for\n        // tables\n        var positionTop = currNode.offsetTop;\n        var positionLeft = currNode.offsetLeft; // jQuery doesn't give a `table` as the offset parent oddly, so use DOM directly\n\n        currOffsetParent = $(currNode.offsetParent);\n        top += positionTop + parseInt(currOffsetParent.css('border-top-width') || 0) * 1;\n        left += positionLeft + parseInt(currOffsetParent.css('border-left-width') || 0) * 1; // Emergency fall back. Shouldn't happen, but just in case!\n\n        if (currNode.nodeName.toLowerCase() === 'body') {\n          break;\n        }\n\n        currNode = currOffsetParent.get(0); // for next loop\n      } while (currOffsetParent.get(0) !== targetParent.get(0));\n\n      return {\n        top: top,\n        left: left\n      };\n    },\n\n    /**\n     * Start mouse drag - selects the start cell\n     *\n     * @param  {object} e Mouse down event\n     * @private\n     */\n    _mousedown: function (e) {\n      var that = this;\n      var dt = this.s.dt;\n      this.dom.start = this.dom.attachedTo;\n      this.s.start = {\n        row: dt.rows({\n          page: 'current'\n        }).nodes().indexOf($(this.dom.start).parent()[0]),\n        column: $(this.dom.start).index()\n      };\n      $(document.body).on('mousemove.autoFill', function (e) {\n        that._mousemove(e);\n      }).on('mouseup.autoFill', function (e) {\n        that._mouseup(e);\n      });\n      var select = this.dom.select;\n      var offsetParent = $(dt.table().node()).offsetParent();\n      select.top.appendTo(offsetParent);\n      select.left.appendTo(offsetParent);\n      select.right.appendTo(offsetParent);\n      select.bottom.appendTo(offsetParent);\n\n      this._drawSelection(this.dom.start, e);\n\n      this.dom.handle.css('display', 'none'); // Cache scrolling information so mouse move doesn't need to read.\n      // This assumes that the window and DT scroller will not change size\n      // during an AutoFill drag, which I think is a fair assumption\n\n      var scrollWrapper = this.dom.dtScroll;\n      this.s.scroll = {\n        windowHeight: $(window).height(),\n        windowWidth: $(window).width(),\n        dtTop: scrollWrapper ? scrollWrapper.offset().top : null,\n        dtLeft: scrollWrapper ? scrollWrapper.offset().left : null,\n        dtHeight: scrollWrapper ? scrollWrapper.outerHeight() : null,\n        dtWidth: scrollWrapper ? scrollWrapper.outerWidth() : null\n      };\n    },\n\n    /**\n     * Mouse drag - selects the end cell and update the selection display for\n     * the end user\n     *\n     * @param  {object} e Mouse move event\n     * @private\n     */\n    _mousemove: function (e) {\n      var that = this;\n      var dt = this.s.dt;\n      var name = e.target.nodeName.toLowerCase();\n\n      if (name !== 'td' && name !== 'th') {\n        return;\n      }\n\n      this._drawSelection(e.target, e);\n\n      this._shiftScroll(e);\n    },\n\n    /**\n     * End mouse drag - perform the update actions\n     *\n     * @param  {object} e Mouse up event\n     * @private\n     */\n    _mouseup: function (e) {\n      $(document.body).off('.autoFill');\n      var that = this;\n      var dt = this.s.dt;\n      var select = this.dom.select;\n      select.top.remove();\n      select.left.remove();\n      select.right.remove();\n      select.bottom.remove();\n      this.dom.handle.css('display', 'block'); // Display complete - now do something useful with the selection!\n\n      var start = this.s.start;\n      var end = this.s.end; // Haven't selected multiple cells, so nothing to do\n\n      if (start.row === end.row && start.column === end.column) {\n        return;\n      }\n\n      var startDt = dt.cell(':eq(' + start.row + ')', start.column + ':visible', {\n        page: 'current'\n      }); // If Editor is active inside this cell (inline editing) we need to wait for Editor to\n      // submit and then we can loop back and trigger the fill.\n\n      if ($('div.DTE', startDt.node()).length) {\n        var editor = dt.editor();\n        editor.on('submitSuccess.dtaf close.dtaf', function () {\n          editor.off('.dtaf');\n          setTimeout(function () {\n            that._mouseup(e);\n          }, 100);\n        }).on('submitComplete.dtaf preSubmitCancelled.dtaf close.dtaf', function () {\n          editor.off('.dtaf');\n        }); // Make the current input submit\n\n        editor.submit();\n        return;\n      } // Build a matrix representation of the selected rows\n\n\n      var rows = this._range(start.row, end.row);\n\n      var columns = this._range(start.column, end.column);\n\n      var selected = [];\n      var dtSettings = dt.settings()[0];\n      var dtColumns = dtSettings.aoColumns;\n      var enabledColumns = dt.columns(this.c.columns).indexes(); // Can't use Array.prototype.map as IE8 doesn't support it\n      // Can't use $.map as jQuery flattens 2D arrays\n      // Need to use a good old fashioned for loop\n\n      for (var rowIdx = 0; rowIdx < rows.length; rowIdx++) {\n        selected.push($.map(columns, function (column) {\n          var row = dt.row(':eq(' + rows[rowIdx] + ')', {\n            page: 'current'\n          }); // Workaround for M581\n\n          var cell = dt.cell(row.index(), column + ':visible');\n          var data = cell.data();\n          var cellIndex = cell.index();\n          var editField = dtColumns[cellIndex.column].editField;\n\n          if (editField !== undefined) {\n            data = dtSettings.oApi._fnGetObjectDataFn(editField)(dt.row(cellIndex.row).data());\n          }\n\n          if (enabledColumns.indexOf(cellIndex.column) === -1) {\n            return;\n          }\n\n          return {\n            cell: cell,\n            data: data,\n            label: cell.data(),\n            index: cellIndex\n          };\n        }));\n      }\n\n      this._actionSelector(selected); // Stop shiftScroll\n\n\n      clearInterval(this.s.scrollInterval);\n      this.s.scrollInterval = null;\n    },\n\n    /**\n     * Create an array with a range of numbers defined by the start and end\n     * parameters passed in (inclusive!).\n     * \n     * @param  {integer} start Start\n     * @param  {integer} end   End\n     * @private\n     */\n    _range: function (start, end) {\n      var out = [];\n      var i;\n\n      if (start <= end) {\n        for (i = start; i <= end; i++) {\n          out.push(i);\n        }\n      } else {\n        for (i = start; i >= end; i--) {\n          out.push(i);\n        }\n      }\n\n      return out;\n    },\n\n    /**\n     * Move the window and DataTables scrolling during a drag to scroll new\n     * content into view. This is done by proximity to the edge of the scrolling\n     * container of the mouse - for example near the top edge of the window\n     * should scroll up. This is a little complicated as there are two elements\n     * that can be scrolled - the window and the DataTables scrolling view port\n     * (if scrollX and / or scrollY is enabled).\n     *\n     * @param  {object} e Mouse move event object\n     * @private\n     */\n    _shiftScroll: function (e) {\n      var that = this;\n      var dt = this.s.dt;\n      var scroll = this.s.scroll;\n      var runInterval = false;\n      var scrollSpeed = 5;\n      var buffer = 65;\n      var windowY = e.pageY - document.body.scrollTop,\n          windowX = e.pageX - document.body.scrollLeft,\n          windowVert,\n          windowHoriz,\n          dtVert,\n          dtHoriz; // Window calculations - based on the mouse position in the window,\n      // regardless of scrolling\n\n      if (windowY < buffer) {\n        windowVert = scrollSpeed * -1;\n      } else if (windowY > scroll.windowHeight - buffer) {\n        windowVert = scrollSpeed;\n      }\n\n      if (windowX < buffer) {\n        windowHoriz = scrollSpeed * -1;\n      } else if (windowX > scroll.windowWidth - buffer) {\n        windowHoriz = scrollSpeed;\n      } // DataTables scrolling calculations - based on the table's position in\n      // the document and the mouse position on the page\n\n\n      if (scroll.dtTop !== null && e.pageY < scroll.dtTop + buffer) {\n        dtVert = scrollSpeed * -1;\n      } else if (scroll.dtTop !== null && e.pageY > scroll.dtTop + scroll.dtHeight - buffer) {\n        dtVert = scrollSpeed;\n      }\n\n      if (scroll.dtLeft !== null && e.pageX < scroll.dtLeft + buffer) {\n        dtHoriz = scrollSpeed * -1;\n      } else if (scroll.dtLeft !== null && e.pageX > scroll.dtLeft + scroll.dtWidth - buffer) {\n        dtHoriz = scrollSpeed;\n      } // This is where it gets interesting. We want to continue scrolling\n      // without requiring a mouse move, so we need an interval to be\n      // triggered. The interval should continue until it is no longer needed,\n      // but it must also use the latest scroll commands (for example consider\n      // that the mouse might move from scrolling up to scrolling left, all\n      // with the same interval running. We use the `scroll` object to \"pass\"\n      // this information to the interval. Can't use local variables as they\n      // wouldn't be the ones that are used by an already existing interval!\n\n\n      if (windowVert || windowHoriz || dtVert || dtHoriz) {\n        scroll.windowVert = windowVert;\n        scroll.windowHoriz = windowHoriz;\n        scroll.dtVert = dtVert;\n        scroll.dtHoriz = dtHoriz;\n        runInterval = true;\n      } else if (this.s.scrollInterval) {\n        // Don't need to scroll - remove any existing timer\n        clearInterval(this.s.scrollInterval);\n        this.s.scrollInterval = null;\n      } // If we need to run the interval to scroll and there is no existing\n      // interval (if there is an existing one, it will continue to run)\n\n\n      if (!this.s.scrollInterval && runInterval) {\n        this.s.scrollInterval = setInterval(function () {\n          // Don't need to worry about setting scroll <0 or beyond the\n          // scroll bound as the browser will just reject that.\n          if (scroll.windowVert) {\n            document.body.scrollTop += scroll.windowVert;\n          }\n\n          if (scroll.windowHoriz) {\n            document.body.scrollLeft += scroll.windowHoriz;\n          } // DataTables scrolling\n\n\n          if (scroll.dtVert || scroll.dtHoriz) {\n            var scroller = that.dom.dtScroll[0];\n\n            if (scroll.dtVert) {\n              scroller.scrollTop += scroll.dtVert;\n            }\n\n            if (scroll.dtHoriz) {\n              scroller.scrollLeft += scroll.dtHoriz;\n            }\n          }\n        }, 20);\n      }\n    },\n\n    /**\n     * Update the DataTable after the user has selected what they want to do\n     *\n     * @param  {false|undefined} result Return from the `execute` method - can\n     *   be false internally to do nothing. This is not documented for plug-ins\n     *   and is used only by the cancel option.\n     * @param {array} cells Information about the selected cells from the key\n     *     up function, argumented with the set values\n     * @private\n     */\n    _update: function (result, cells) {\n      // Do nothing on `false` return from an execute function\n      if (result === false) {\n        return;\n      }\n\n      var dt = this.s.dt;\n      var cell;\n      var columns = dt.columns(this.c.columns).indexes(); // Potentially allow modifications to the cells matrix\n\n      this._emitEvent('preAutoFill', [dt, cells]);\n\n      this._editor(cells); // Automatic updates are not performed if `update` is null and the\n      // `editor` parameter is passed in - the reason being that Editor will\n      // update the data once submitted\n\n\n      var update = this.c.update !== null ? this.c.update : this.c.editor ? false : true;\n\n      if (update) {\n        for (var i = 0, ien = cells.length; i < ien; i++) {\n          for (var j = 0, jen = cells[i].length; j < jen; j++) {\n            cell = cells[i][j];\n\n            if (columns.indexOf(cell.index.column) !== -1) {\n              cell.cell.data(cell.set);\n            }\n          }\n        }\n\n        dt.draw(false);\n      }\n\n      this._emitEvent('autoFill', [dt, cells]);\n    }\n  });\n  /**\n   * AutoFill actions. The options here determine how AutoFill will fill the data\n   * in the table when the user has selected a range of cells. Please see the\n   * documentation on the DataTables site for full details on how to create plug-\n   * ins.\n   *\n   * @type {Object}\n   */\n\n  AutoFill.actions = {\n    increment: {\n      available: function (dt, cells) {\n        var d = cells[0][0].label; // is numeric test based on jQuery's old `isNumeric` function\n\n        return !isNaN(d - parseFloat(d));\n      },\n      option: function (dt, cells) {\n        return dt.i18n('autoFill.increment', 'Increment / decrement each cell by: <input type=\"number\" value=\"1\">');\n      },\n      execute: function (dt, cells, node) {\n        var value = cells[0][0].data * 1;\n        var increment = $('input', node).val() * 1;\n\n        for (var i = 0, ien = cells.length; i < ien; i++) {\n          for (var j = 0, jen = cells[i].length; j < jen; j++) {\n            cells[i][j].set = value;\n            value += increment;\n          }\n        }\n      }\n    },\n    fill: {\n      available: function (dt, cells) {\n        return true;\n      },\n      option: function (dt, cells) {\n        return dt.i18n('autoFill.fill', 'Fill all cells with <i>%d</i>', cells[0][0].label);\n      },\n      execute: function (dt, cells, node) {\n        var value = cells[0][0].data;\n\n        for (var i = 0, ien = cells.length; i < ien; i++) {\n          for (var j = 0, jen = cells[i].length; j < jen; j++) {\n            cells[i][j].set = value;\n          }\n        }\n      }\n    },\n    fillHorizontal: {\n      available: function (dt, cells) {\n        return cells.length > 1 && cells[0].length > 1;\n      },\n      option: function (dt, cells) {\n        return dt.i18n('autoFill.fillHorizontal', 'Fill cells horizontally');\n      },\n      execute: function (dt, cells, node) {\n        for (var i = 0, ien = cells.length; i < ien; i++) {\n          for (var j = 0, jen = cells[i].length; j < jen; j++) {\n            cells[i][j].set = cells[i][0].data;\n          }\n        }\n      }\n    },\n    fillVertical: {\n      available: function (dt, cells) {\n        return cells.length > 1;\n      },\n      option: function (dt, cells) {\n        return dt.i18n('autoFill.fillVertical', 'Fill cells vertically');\n      },\n      execute: function (dt, cells, node) {\n        for (var i = 0, ien = cells.length; i < ien; i++) {\n          for (var j = 0, jen = cells[i].length; j < jen; j++) {\n            cells[i][j].set = cells[0][j].data;\n          }\n        }\n      }\n    },\n    // Special type that does not make itself available, but is added\n    // automatically by AutoFill if a multi-choice list is shown. This allows\n    // sensible code reuse\n    cancel: {\n      available: function () {\n        return false;\n      },\n      option: function (dt) {\n        return dt.i18n('autoFill.cancel', 'Cancel');\n      },\n      execute: function () {\n        return false;\n      }\n    }\n  };\n  /**\n   * AutoFill version\n   * \n   * @static\n   * @type      String\n   */\n\n  AutoFill.version = '2.3.9';\n  /**\n   * AutoFill defaults\n   * \n   * @namespace\n   */\n\n  AutoFill.defaults = {\n    /** @type {Boolean} Ask user what they want to do, even for a single option */\n    alwaysAsk: false,\n\n    /** @type {string|null} What will trigger a focus */\n    focus: null,\n    // focus, click, hover\n\n    /** @type {column-selector} Columns to provide auto fill for */\n    columns: '',\n    // all\n\n    /** @type {Boolean} Enable AutoFill on load */\n    enable: true,\n\n    /** @type {boolean|null} Update the cells after a drag */\n    update: null,\n    // false is editor given, true otherwise\n\n    /** @type {DataTable.Editor} Editor instance for automatic submission */\n    editor: null,\n\n    /** @type {boolean} Enable vertical fill */\n    vertical: true,\n\n    /** @type {boolean} Enable horizontal fill */\n    horizontal: true\n  };\n  /**\n   * Classes used by AutoFill that are configurable\n   * \n   * @namespace\n   */\n\n  AutoFill.classes = {\n    /** @type {String} Class used by the selection button */\n    btn: 'btn'\n  };\n  /*\n   * API\n   */\n\n  var Api = $.fn.dataTable.Api; // Doesn't do anything - Not documented\n\n  Api.register('autoFill()', function () {\n    return this;\n  });\n  Api.register('autoFill().enabled()', function () {\n    var ctx = this.context[0];\n    return ctx.autoFill ? ctx.autoFill.enabled() : false;\n  });\n  Api.register('autoFill().enable()', function (flag) {\n    return this.iterator('table', function (ctx) {\n      if (ctx.autoFill) {\n        ctx.autoFill.enable(flag);\n      }\n    });\n  });\n  Api.register('autoFill().disable()', function () {\n    return this.iterator('table', function (ctx) {\n      if (ctx.autoFill) {\n        ctx.autoFill.disable();\n      }\n    });\n  }); // Attach a listener to the document which listens for DataTables initialisation\n  // events so we can automatically initialise\n\n  $(document).on('preInit.dt.autofill', function (e, settings, json) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    var init = settings.oInit.autoFill;\n    var defaults = DataTable.defaults.autoFill;\n\n    if (init || defaults) {\n      var opts = $.extend({}, init, defaults);\n\n      if (init !== false) {\n        new AutoFill(settings, opts);\n      }\n    }\n  }); // Alias for access\n\n  DataTable.AutoFill = AutoFill;\n  DataTable.AutoFill = AutoFill;\n  return AutoFill;\n});","map":{"version":3,"sources":["C:/Users/Sher/Desktop/datahub tagging ui/frontend/node_modules/datatables.net-autofill/js/dataTables.autoFill.js"],"names":["factory","define","amd","$","window","document","exports","module","root","fn","dataTable","require","jQuery","undefined","DataTable","_instance","AutoFill","dt","opts","versionCheck","c","extend","defaults","autoFill","s","Api","namespace","scroll","scrollInterval","handle","height","width","enabled","dom","select","top","right","bottom","left","background","list","i18n","dtScroll","offsetParent","_constructor","prototype","enable","flag","that","disable","_focusListener","on","e","_mousedown","_focusListenerRemove","table","container","settings","length","css","_attach","node","idx","cell","index","handleDim","columns","indexes","indexOf","column","_detach","appendTo","outerHeight","outerWidth","offset","_getPosition","attachedTo","offsetHeight","offsetWidth","_actionSelector","cells","actions","available","each","key","action","push","alwaysAsk","result","execute","_update","children","empty","i","name","append","option","classes","btn","closest","remove","detach","_drawSelection","target","start","startCell","end","row","vertical","rows","page","nodes","parentNode","horizontal","colIndx","endRow","endCell","any","get","_editor","editor","idValues","fields","ien","j","jen","col","aoColumns","fieldName","editField","dataSrc","mData","k","ken","field","id","set","bubble","multiSet","submit","_emitEvent","args","iterator","ctx","nTable","triggerHandler","focus","init","keys","keytable","body","parents","filter","relatedTarget","hasClass","off","targetParent","currNode","currOffsetParent","positionTop","offsetTop","positionLeft","offsetLeft","parseInt","nodeName","toLowerCase","parent","_mousemove","_mouseup","scrollWrapper","windowHeight","windowWidth","dtTop","dtLeft","dtHeight","dtWidth","_shiftScroll","startDt","setTimeout","_range","selected","dtSettings","dtColumns","enabledColumns","rowIdx","map","data","cellIndex","oApi","_fnGetObjectDataFn","label","clearInterval","out","runInterval","scrollSpeed","buffer","windowY","pageY","scrollTop","windowX","pageX","scrollLeft","windowVert","windowHoriz","dtVert","dtHoriz","setInterval","scroller","update","draw","increment","d","isNaN","parseFloat","value","val","fill","fillHorizontal","fillVertical","cancel","version","register","context","json","oInit"],"mappings":"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","sourcesContent":["/*! AutoFill 2.3.9\n * Â©2008-2021 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     AutoFill\n * @description Add Excel like click and drag auto-fill options to DataTables\n * @version     2.3.9\n * @file        dataTables.autoFill.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2010-2021 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n(function( factory ){\n\tif ( typeof define === 'function' && define.amd ) {\n\t\t// AMD\n\t\tdefine( ['jquery', 'datatables.net'], function ( $ ) {\n\t\t\treturn factory( $, window, document );\n\t\t} );\n\t}\n\telse if ( typeof exports === 'object' ) {\n\t\t// CommonJS\n\t\tmodule.exports = function (root, $) {\n\t\t\tif ( ! root ) {\n\t\t\t\troot = window;\n\t\t\t}\n\n\t\t\tif ( ! $ || ! $.fn.dataTable ) {\n\t\t\t\t$ = require('datatables.net')(root, $).$;\n\t\t\t}\n\n\t\t\treturn factory( $, root, root.document );\n\t\t};\n\t}\n\telse {\n\t\t// Browser\n\t\tfactory( jQuery, window, document );\n\t}\n}(function( $, window, document, undefined ) {\n'use strict';\nvar DataTable = $.fn.dataTable;\n\n\nvar _instance = 0;\n\n/** \n * AutoFill provides Excel like auto-fill features for a DataTable\n *\n * @class AutoFill\n * @constructor\n * @param {object} oTD DataTables settings object\n * @param {object} oConfig Configuration object for AutoFill\n */\nvar AutoFill = function( dt, opts )\n{\n\tif ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.8' ) ) {\n\t\tthrow( \"Warning: AutoFill requires DataTables 1.10.8 or greater\");\n\t}\n\n\t// User and defaults configuration object\n\tthis.c = $.extend( true, {},\n\t\tDataTable.defaults.autoFill,\n\t\tAutoFill.defaults,\n\t\topts\n\t);\n\n\t/**\n\t * @namespace Settings object which contains customisable information for AutoFill instance\n\t */\n\tthis.s = {\n\t\t/** @type {DataTable.Api} DataTables' API instance */\n\t\tdt: new DataTable.Api( dt ),\n\n\t\t/** @type {String} Unique namespace for events attached to the document */\n\t\tnamespace: '.autoFill'+(_instance++),\n\n\t\t/** @type {Object} Cached dimension information for use in the mouse move event handler */\n\t\tscroll: {},\n\n\t\t/** @type {integer} Interval object used for smooth scrolling */\n\t\tscrollInterval: null,\n\n\t\thandle: {\n\t\t\theight: 0,\n\t\t\twidth: 0\n\t\t},\n\n\t\t/**\n\t\t * Enabled setting\n\t\t * @type {Boolean}\n\t\t */\n\t\tenabled: false\n\t};\n\n\n\t/**\n\t * @namespace Common and useful DOM elements for the class instance\n\t */\n\tthis.dom = {\n\t\t/** @type {jQuery} AutoFill handle */\n\t\thandle: $('<div class=\"dt-autofill-handle\"/>'),\n\n\t\t/**\n\t\t * @type {Object} Selected cells outline - Need to use 4 elements,\n\t\t *   otherwise the mouse over if you back into the selected rectangle\n\t\t *   will be over that element, rather than the cells!\n\t\t */\n\t\tselect: {\n\t\t\ttop:    $('<div class=\"dt-autofill-select top\"/>'),\n\t\t\tright:  $('<div class=\"dt-autofill-select right\"/>'),\n\t\t\tbottom: $('<div class=\"dt-autofill-select bottom\"/>'),\n\t\t\tleft:   $('<div class=\"dt-autofill-select left\"/>')\n\t\t},\n\n\t\t/** @type {jQuery} Fill type chooser background */\n\t\tbackground: $('<div class=\"dt-autofill-background\"/>'),\n\n\t\t/** @type {jQuery} Fill type chooser */\n\t\tlist: $('<div class=\"dt-autofill-list\">'+this.s.dt.i18n('autoFill.info', '')+'<ul/></div>'),\n\n\t\t/** @type {jQuery} DataTables scrolling container */\n\t\tdtScroll: null,\n\n\t\t/** @type {jQuery} Offset parent element */\n\t\toffsetParent: null\n\t};\n\n\n\t/* Constructor logic */\n\tthis._constructor();\n};\n\n\n\n$.extend( AutoFill.prototype, {\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Public methods (exposed via the DataTables API below)\n\t */\n\tenabled: function ()\n\t{\n\t\treturn this.s.enabled;\n\t},\n\n\n\tenable: function ( flag )\n\t{\n\t\tvar that = this;\n\n\t\tif ( flag === false ) {\n\t\t\treturn this.disable();\n\t\t}\n\n\t\tthis.s.enabled = true;\n\n\t\tthis._focusListener();\n\n\t\tthis.dom.handle.on( 'mousedown', function (e) {\n\t\t\tthat._mousedown( e );\n\t\t\treturn false;\n\t\t} );\n\n\t\treturn this;\n\t},\n\n\tdisable: function ()\n\t{\n\t\tthis.s.enabled = false;\n\n\t\tthis._focusListenerRemove();\n\n\t\treturn this;\n\t},\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Constructor\n\t */\n\n\t/**\n\t * Initialise the RowReorder instance\n\t *\n\t * @private\n\t */\n\t_constructor: function ()\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar dtScroll = $('div.dataTables_scrollBody', this.s.dt.table().container());\n\n\t\t// Make the instance accessible to the API\n\t\tdt.settings()[0].autoFill = this;\n\n\t\tif ( dtScroll.length ) {\n\t\t\tthis.dom.dtScroll = dtScroll;\n\n\t\t\t// Need to scroll container to be the offset parent\n\t\t\tif ( dtScroll.css('position') === 'static' ) {\n\t\t\t\tdtScroll.css( 'position', 'relative' );\n\t\t\t}\n\t\t}\n\n\t\tif ( this.c.enable !== false ) {\n\t\t\tthis.enable();\n\t\t}\n\n\t\tdt.on( 'destroy.autoFill', function () {\n\t\t\tthat._focusListenerRemove();\n\t\t} );\n\t},\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Private methods\n\t */\n\n\t/**\n\t * Display the AutoFill drag handle by appending it to a table cell. This\n\t * is the opposite of the _detach method.\n\t *\n\t * @param  {node} node TD/TH cell to insert the handle into\n\t * @private\n\t */\n\t_attach: function ( node )\n\t{\n\t\tvar dt = this.s.dt;\n\t\tvar idx = dt.cell( node ).index();\n\t\tvar handle = this.dom.handle;\n\t\tvar handleDim = this.s.handle;\n\n\t\tif ( ! idx || dt.columns( this.c.columns ).indexes().indexOf( idx.column ) === -1 ) {\n\t\t\tthis._detach();\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! this.dom.offsetParent ) {\n\t\t\t// We attach to the table's offset parent\n\t\t\tthis.dom.offsetParent = $( dt.table().node() ).offsetParent();\n\t\t}\n\n\t\tif ( ! handleDim.height || ! handleDim.width ) {\n\t\t\t// Append to document so we can get its size. Not expecting it to\n\t\t\t// change during the life time of the page\n\t\t\thandle.appendTo( 'body' );\n\t\t\thandleDim.height = handle.outerHeight();\n\t\t\thandleDim.width = handle.outerWidth();\n\t\t}\n\n\t\t// Might need to go through multiple offset parents\n\t\tvar offset = this._getPosition( node, this.dom.offsetParent );\n\n\t\tthis.dom.attachedTo = node;\n\t\thandle\n\t\t\t.css( {\n\t\t\t\ttop: offset.top + node.offsetHeight - handleDim.height,\n\t\t\t\tleft: offset.left + node.offsetWidth - handleDim.width\n\t\t\t} )\n\t\t\t.appendTo( this.dom.offsetParent );\n\t},\n\n\n\t/**\n\t * Determine can the fill type should be. This can be automatic, or ask the\n\t * end user.\n\t *\n\t * @param {array} cells Information about the selected cells from the key\n\t *     up function\n\t * @private\n\t */\n\t_actionSelector: function ( cells )\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar actions = AutoFill.actions;\n\t\tvar available = [];\n\n\t\t// \"Ask\" each plug-in if it wants to handle this data\n\t\t$.each( actions, function ( key, action ) {\n\t\t\tif ( action.available( dt, cells ) ) {\n\t\t\t\tavailable.push( key );\n\t\t\t}\n\t\t} );\n\n\t\tif ( available.length === 1 && this.c.alwaysAsk === false ) {\n\t\t\t// Only one action available - enact it immediately\n\t\t\tvar result = actions[ available[0] ].execute( dt, cells );\n\t\t\tthis._update( result, cells );\n\t\t}\n\t\telse if ( available.length > 1 ) {\n\t\t\t// Multiple actions available - ask the end user what they want to do\n\t\t\tvar list = this.dom.list.children('ul').empty();\n\n\t\t\t// Add a cancel option\n\t\t\tavailable.push( 'cancel' );\n\n\t\t\t$.each( available, function ( i, name ) {\n\t\t\t\tlist.append( $('<li/>')\n\t\t\t\t\t.append(\n\t\t\t\t\t\t'<div class=\"dt-autofill-question\">'+\n\t\t\t\t\t\t\tactions[ name ].option( dt, cells )+\n\t\t\t\t\t\t'<div>'\n\t\t\t\t\t)\n\t\t\t\t\t.append( $('<div class=\"dt-autofill-button\">' )\n\t\t\t\t\t\t.append( $('<button class=\"'+AutoFill.classes.btn+'\">'+dt.i18n('autoFill.button', '&gt;')+'</button>')\n\t\t\t\t\t\t\t.on( 'click', function () {\n\t\t\t\t\t\t\t\tvar result = actions[ name ].execute(\n\t\t\t\t\t\t\t\t\tdt, cells, $(this).closest('li')\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthat._update( result, cells );\n\n\t\t\t\t\t\t\t\tthat.dom.background.remove();\n\t\t\t\t\t\t\t\tthat.dom.list.remove();\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} );\n\n\t\t\tthis.dom.background.appendTo( 'body' );\n\t\t\tthis.dom.list.appendTo( 'body' );\n\n\t\t\tthis.dom.list.css( 'margin-top', this.dom.list.outerHeight()/2 * -1 );\n\t\t}\n\t},\n\n\n\t/**\n\t * Remove the AutoFill handle from the document\n\t *\n\t * @private\n\t */\n\t_detach: function ()\n\t{\n\t\tthis.dom.attachedTo = null;\n\t\tthis.dom.handle.detach();\n\t},\n\n\n\t/**\n\t * Draw the selection outline by calculating the range between the start\n\t * and end cells, then placing the highlighting elements to draw a rectangle\n\t *\n\t * @param  {node}   target End cell\n\t * @param  {object} e      Originating event\n\t * @private\n\t */\n\t_drawSelection: function ( target, e )\n\t{\n\t\t// Calculate boundary for start cell to this one\n\t\tvar dt = this.s.dt;\n\t\tvar start = this.s.start;\n\t\tvar startCell = $(this.dom.start);\n\t\tvar end = {\n\t\t\trow: this.c.vertical ?\n\t\t\t\tdt.rows( { page: 'current' } ).nodes().indexOf( target.parentNode ) :\n\t\t\t\tstart.row,\n\t\t\tcolumn: this.c.horizontal ?\n\t\t\t\t$(target).index() :\n\t\t\t\tstart.column\n\t\t};\n\t\tvar colIndx = dt.column.index( 'toData', end.column );\n\t\tvar endRow =  dt.row( ':eq('+end.row+')', { page: 'current' } ); // Workaround for M581\n\t\tvar endCell = $( dt.cell( endRow.index(), colIndx ).node() );\n\n\t\t// Be sure that is a DataTables controlled cell\n\t\tif ( ! dt.cell( endCell ).any() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// if target is not in the columns available - do nothing\n\t\tif ( dt.columns( this.c.columns ).indexes().indexOf( colIndx ) === -1 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.s.end = end;\n\n\t\tvar top, bottom, left, right, height, width;\n\n\t\ttop    = start.row    < end.row    ? startCell : endCell;\n\t\tbottom = start.row    < end.row    ? endCell   : startCell;\n\t\tleft   = start.column < end.column ? startCell : endCell;\n\t\tright  = start.column < end.column ? endCell   : startCell;\n\n\t\ttop    = this._getPosition( top.get(0) ).top;\n\t\tleft   = this._getPosition( left.get(0) ).left;\n\t\theight = this._getPosition( bottom.get(0) ).top + bottom.outerHeight() - top;\n\t\twidth  = this._getPosition( right.get(0) ).left + right.outerWidth() - left;\n\n\t\tvar select = this.dom.select;\n\t\tselect.top.css( {\n\t\t\ttop: top,\n\t\t\tleft: left,\n\t\t\twidth: width\n\t\t} );\n\n\t\tselect.left.css( {\n\t\t\ttop: top,\n\t\t\tleft: left,\n\t\t\theight: height\n\t\t} );\n\n\t\tselect.bottom.css( {\n\t\t\ttop: top + height,\n\t\t\tleft: left,\n\t\t\twidth: width\n\t\t} );\n\n\t\tselect.right.css( {\n\t\t\ttop: top,\n\t\t\tleft: left + width,\n\t\t\theight: height\n\t\t} );\n\t},\n\n\n\t/**\n\t * Use the Editor API to perform an update based on the new data for the\n\t * cells\n\t *\n\t * @param {array} cells Information about the selected cells from the key\n\t *     up function\n\t * @private\n\t */\n\t_editor: function ( cells )\n\t{\n\t\tvar dt = this.s.dt;\n\t\tvar editor = this.c.editor;\n\n\t\tif ( ! editor ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Build the object structure for Editor's multi-row editing\n\t\tvar idValues = {};\n\t\tvar nodes = [];\n\t\tvar fields = editor.fields();\n\n\t\tfor ( var i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\tfor ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {\n\t\t\t\tvar cell = cells[i][j];\n\n\t\t\t\t// Determine the field name for the cell being edited\n\t\t\t\tvar col = dt.settings()[0].aoColumns[ cell.index.column ];\n\t\t\t\tvar fieldName = col.editField;\n\n\t\t\t\tif ( fieldName === undefined ) {\n\t\t\t\t\tvar dataSrc = col.mData;\n\n\t\t\t\t\t// dataSrc is the `field.data` property, but we need to set\n\t\t\t\t\t// using the field name, so we need to translate from the\n\t\t\t\t\t// data to the name\n\t\t\t\t\tfor ( var k=0, ken=fields.length ; k<ken ; k++ ) {\n\t\t\t\t\t\tvar field = editor.field( fields[k] );\n\n\t\t\t\t\t\tif ( field.dataSrc() === dataSrc ) {\n\t\t\t\t\t\t\tfieldName = field.name();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( ! fieldName ) {\n\t\t\t\t\tthrow 'Could not automatically determine field data. '+\n\t\t\t\t\t\t'Please see https://datatables.net/tn/11';\n\t\t\t\t}\n\n\t\t\t\tif ( ! idValues[ fieldName ] ) {\n\t\t\t\t\tidValues[ fieldName ] = {};\n\t\t\t\t}\n\n\t\t\t\tvar id = dt.row( cell.index.row ).id();\n\t\t\t\tidValues[ fieldName ][ id ] = cell.set;\n\n\t\t\t\t// Keep a list of cells so we can activate the bubble editing\n\t\t\t\t// with them\n\t\t\t\tnodes.push( cell.index );\n\t\t\t}\n\t\t}\n\n\t\t// Perform the edit using bubble editing as it allows us to specify\n\t\t// the cells to be edited, rather than using full rows\n\t\teditor\n\t\t\t.bubble( nodes, false )\n\t\t\t.multiSet( idValues )\n\t\t\t.submit();\n\t},\n\n\n\t/**\n\t * Emit an event on the DataTable for listeners\n\t *\n\t * @param  {string} name Event name\n\t * @param  {array} args Event arguments\n\t * @private\n\t */\n\t_emitEvent: function ( name, args )\n\t{\n\t\tthis.s.dt.iterator( 'table', function ( ctx, i ) {\n\t\t\t$(ctx.nTable).triggerHandler( name+'.dt', args );\n\t\t} );\n\t},\n\n\n\t/**\n\t * Attach suitable listeners (based on the configuration) that will attach\n\t * and detach the AutoFill handle in the document.\n\t *\n\t * @private\n\t */\n\t_focusListener: function ()\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar namespace = this.s.namespace;\n\t\tvar focus = this.c.focus !== null ?\n\t\t\tthis.c.focus :\n\t\t\tdt.init().keys || dt.settings()[0].keytable ?\n\t\t\t\t'focus' :\n\t\t\t\t'hover';\n\n\t\t// All event listeners attached here are removed in the `destroy`\n\t\t// callback in the constructor\n\t\tif ( focus === 'focus' ) {\n\t\t\tdt\n\t\t\t\t.on( 'key-focus.autoFill', function ( e, dt, cell ) {\n\t\t\t\t\tthat._attach( cell.node() );\n\t\t\t\t} )\n\t\t\t\t.on( 'key-blur.autoFill', function ( e, dt, cell ) {\n\t\t\t\t\tthat._detach();\n\t\t\t\t} );\n\t\t}\n\t\telse if ( focus === 'click' ) {\n\t\t\t$(dt.table().body()).on( 'click'+namespace, 'td, th', function (e) {\n\t\t\t\tthat._attach( this );\n\t\t\t} );\n\n\t\t\t$(document.body).on( 'click'+namespace, function (e) {\n\t\t\t\tif ( ! $(e.target).parents().filter( dt.table().body() ).length ) {\n\t\t\t\t\tthat._detach();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\telse {\n\t\t\t$(dt.table().body())\n\t\t\t\t.on( 'mouseenter'+namespace, 'td, th', function (e) {\n\t\t\t\t\tthat._attach( this );\n\t\t\t\t} )\n\t\t\t\t.on( 'mouseleave'+namespace, function (e) {\n\t\t\t\t\tif ( $(e.relatedTarget).hasClass('dt-autofill-handle') ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthat._detach();\n\t\t\t\t} );\n\t\t}\n\t},\n\n\n\t_focusListenerRemove: function ()\n\t{\n\t\tvar dt = this.s.dt;\n\n\t\tdt.off( '.autoFill' );\n\t\t$(dt.table().body()).off( this.s.namespace );\n\t\t$(document.body).off( this.s.namespace );\n\t},\n\n\n\t/**\n\t * Get the position of a node, relative to another, including any scrolling\n\t * offsets.\n\t * @param  {Node}   node         Node to get the position of\n\t * @param  {jQuery} targetParent Node to use as the parent\n\t * @return {object}              Offset calculation\n\t * @private\n\t */\n\t_getPosition: function ( node, targetParent )\n\t{\n\t\tvar\n\t\t\tcurrNode = node,\n\t\t\tcurrOffsetParent,\n\t\t\ttop = 0,\n\t\t\tleft = 0;\n\n\t\tif ( ! targetParent ) {\n\t\t\ttargetParent = $( $( this.s.dt.table().node() )[0].offsetParent );\n\t\t}\n\n\t\tdo {\n\t\t\t// Don't use jQuery().position() the behaviour changes between 1.x and 3.x for\n\t\t\t// tables\n\t\t\tvar positionTop = currNode.offsetTop;\n\t\t\tvar positionLeft = currNode.offsetLeft;\n\n\t\t\t// jQuery doesn't give a `table` as the offset parent oddly, so use DOM directly\n\t\t\tcurrOffsetParent = $( currNode.offsetParent );\n\n\t\t\ttop += positionTop + parseInt( currOffsetParent.css('border-top-width') || 0 ) * 1;\n\t\t\tleft += positionLeft + parseInt( currOffsetParent.css('border-left-width') || 0 ) * 1;\n\n\t\t\t// Emergency fall back. Shouldn't happen, but just in case!\n\t\t\tif ( currNode.nodeName.toLowerCase() === 'body' ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcurrNode = currOffsetParent.get(0); // for next loop\n\t\t}\n\t\twhile ( currOffsetParent.get(0) !== targetParent.get(0) )\n\n\t\treturn {\n\t\t\ttop: top,\n\t\t\tleft: left\n\t\t};\n\t},\n\n\n\t/**\n\t * Start mouse drag - selects the start cell\n\t *\n\t * @param  {object} e Mouse down event\n\t * @private\n\t */\n\t_mousedown: function ( e )\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\n\t\tthis.dom.start = this.dom.attachedTo;\n\t\tthis.s.start = {\n\t\t\trow: dt.rows( { page: 'current' } ).nodes().indexOf( $(this.dom.start).parent()[0] ),\n\t\t\tcolumn: $(this.dom.start).index()\n\t\t};\n\n\t\t$(document.body)\n\t\t\t.on( 'mousemove.autoFill', function (e) {\n\t\t\t\tthat._mousemove( e );\n\t\t\t} )\n\t\t\t.on( 'mouseup.autoFill', function (e) {\n\t\t\t\tthat._mouseup( e );\n\t\t\t} );\n\n\t\tvar select = this.dom.select;\n\t\tvar offsetParent = $( dt.table().node() ).offsetParent();\n\t\tselect.top.appendTo( offsetParent );\n\t\tselect.left.appendTo( offsetParent );\n\t\tselect.right.appendTo( offsetParent );\n\t\tselect.bottom.appendTo( offsetParent );\n\n\t\tthis._drawSelection( this.dom.start, e );\n\n\t\tthis.dom.handle.css( 'display', 'none' );\n\n\t\t// Cache scrolling information so mouse move doesn't need to read.\n\t\t// This assumes that the window and DT scroller will not change size\n\t\t// during an AutoFill drag, which I think is a fair assumption\n\t\tvar scrollWrapper = this.dom.dtScroll;\n\t\tthis.s.scroll = {\n\t\t\twindowHeight: $(window).height(),\n\t\t\twindowWidth:  $(window).width(),\n\t\t\tdtTop:        scrollWrapper ? scrollWrapper.offset().top : null,\n\t\t\tdtLeft:       scrollWrapper ? scrollWrapper.offset().left : null,\n\t\t\tdtHeight:     scrollWrapper ? scrollWrapper.outerHeight() : null,\n\t\t\tdtWidth:      scrollWrapper ? scrollWrapper.outerWidth() : null\n\t\t};\n\t},\n\n\n\t/**\n\t * Mouse drag - selects the end cell and update the selection display for\n\t * the end user\n\t *\n\t * @param  {object} e Mouse move event\n\t * @private\n\t */\n\t_mousemove: function ( e )\n\t{\t\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar name = e.target.nodeName.toLowerCase();\n\t\tif ( name !== 'td' && name !== 'th' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._drawSelection( e.target, e );\n\t\tthis._shiftScroll( e );\n\t},\n\n\n\t/**\n\t * End mouse drag - perform the update actions\n\t *\n\t * @param  {object} e Mouse up event\n\t * @private\n\t */\n\t_mouseup: function ( e )\n\t{\n\t\t$(document.body).off( '.autoFill' );\n\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar select = this.dom.select;\n\t\tselect.top.remove();\n\t\tselect.left.remove();\n\t\tselect.right.remove();\n\t\tselect.bottom.remove();\n\n\t\tthis.dom.handle.css( 'display', 'block' );\n\n\t\t// Display complete - now do something useful with the selection!\n\t\tvar start = this.s.start;\n\t\tvar end = this.s.end;\n\n\t\t// Haven't selected multiple cells, so nothing to do\n\t\tif ( start.row === end.row && start.column === end.column ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar startDt = dt.cell( ':eq('+start.row+')', start.column+':visible', {page:'current'} );\n\n\t\t// If Editor is active inside this cell (inline editing) we need to wait for Editor to\n\t\t// submit and then we can loop back and trigger the fill.\n\t\tif ( $('div.DTE', startDt.node()).length ) {\n\t\t\tvar editor = dt.editor();\n\n\t\t\teditor\n\t\t\t\t.on( 'submitSuccess.dtaf close.dtaf', function () {\n\t\t\t\t\teditor.off( '.dtaf');\n\n\t\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t\tthat._mouseup( e );\n\t\t\t\t\t}, 100 );\n\t\t\t\t} )\n\t\t\t\t.on( 'submitComplete.dtaf preSubmitCancelled.dtaf close.dtaf', function () {\n\t\t\t\t\teditor.off( '.dtaf');\n\t\t\t\t} );\n\n\t\t\t// Make the current input submit\n\t\t\teditor.submit();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Build a matrix representation of the selected rows\n\t\tvar rows       = this._range( start.row, end.row );\n\t\tvar columns    = this._range( start.column, end.column );\n\t\tvar selected   = [];\n\t\tvar dtSettings = dt.settings()[0];\n\t\tvar dtColumns  = dtSettings.aoColumns;\n\t\tvar enabledColumns = dt.columns( this.c.columns ).indexes();\n\n\t\t// Can't use Array.prototype.map as IE8 doesn't support it\n\t\t// Can't use $.map as jQuery flattens 2D arrays\n\t\t// Need to use a good old fashioned for loop\n\t\tfor ( var rowIdx=0 ; rowIdx<rows.length ; rowIdx++ ) {\n\t\t\tselected.push(\n\t\t\t\t$.map( columns, function (column) {\n\t\t\t\t\tvar row = dt.row( ':eq('+rows[rowIdx]+')', {page:'current'} ); // Workaround for M581\n\t\t\t\t\tvar cell = dt.cell( row.index(), column+':visible' );\n\t\t\t\t\tvar data = cell.data();\n\t\t\t\t\tvar cellIndex = cell.index();\n\t\t\t\t\tvar editField = dtColumns[ cellIndex.column ].editField;\n\n\t\t\t\t\tif ( editField !== undefined ) {\n\t\t\t\t\t\tdata = dtSettings.oApi._fnGetObjectDataFn( editField )( dt.row( cellIndex.row ).data() );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( enabledColumns.indexOf(cellIndex.column) === -1 ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcell:  cell,\n\t\t\t\t\t\tdata:  data,\n\t\t\t\t\t\tlabel: cell.data(),\n\t\t\t\t\t\tindex: cellIndex\n\t\t\t\t\t};\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\n\t\tthis._actionSelector( selected );\n\t\t\n\t\t// Stop shiftScroll\n\t\tclearInterval( this.s.scrollInterval );\n\t\tthis.s.scrollInterval = null;\n\t},\n\n\n\t/**\n\t * Create an array with a range of numbers defined by the start and end\n\t * parameters passed in (inclusive!).\n\t * \n\t * @param  {integer} start Start\n\t * @param  {integer} end   End\n\t * @private\n\t */\n\t_range: function ( start, end )\n\t{\n\t\tvar out = [];\n\t\tvar i;\n\n\t\tif ( start <= end ) {\n\t\t\tfor ( i=start ; i<=end ; i++ ) {\n\t\t\t\tout.push( i );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( i=start ; i>=end ; i-- ) {\n\t\t\t\tout.push( i );\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t},\n\n\n\t/**\n\t * Move the window and DataTables scrolling during a drag to scroll new\n\t * content into view. This is done by proximity to the edge of the scrolling\n\t * container of the mouse - for example near the top edge of the window\n\t * should scroll up. This is a little complicated as there are two elements\n\t * that can be scrolled - the window and the DataTables scrolling view port\n\t * (if scrollX and / or scrollY is enabled).\n\t *\n\t * @param  {object} e Mouse move event object\n\t * @private\n\t */\n\t_shiftScroll: function ( e )\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar scroll = this.s.scroll;\n\t\tvar runInterval = false;\n\t\tvar scrollSpeed = 5;\n\t\tvar buffer = 65;\n\t\tvar\n\t\t\twindowY = e.pageY - document.body.scrollTop,\n\t\t\twindowX = e.pageX - document.body.scrollLeft,\n\t\t\twindowVert, windowHoriz,\n\t\t\tdtVert, dtHoriz;\n\n\t\t// Window calculations - based on the mouse position in the window,\n\t\t// regardless of scrolling\n\t\tif ( windowY < buffer ) {\n\t\t\twindowVert = scrollSpeed * -1;\n\t\t}\n\t\telse if ( windowY > scroll.windowHeight - buffer ) {\n\t\t\twindowVert = scrollSpeed;\n\t\t}\n\n\t\tif ( windowX < buffer ) {\n\t\t\twindowHoriz = scrollSpeed * -1;\n\t\t}\n\t\telse if ( windowX > scroll.windowWidth - buffer ) {\n\t\t\twindowHoriz = scrollSpeed;\n\t\t}\n\n\t\t// DataTables scrolling calculations - based on the table's position in\n\t\t// the document and the mouse position on the page\n\t\tif ( scroll.dtTop !== null && e.pageY < scroll.dtTop + buffer ) {\n\t\t\tdtVert = scrollSpeed * -1;\n\t\t}\n\t\telse if ( scroll.dtTop !== null && e.pageY > scroll.dtTop + scroll.dtHeight - buffer ) {\n\t\t\tdtVert = scrollSpeed;\n\t\t}\n\n\t\tif ( scroll.dtLeft !== null && e.pageX < scroll.dtLeft + buffer ) {\n\t\t\tdtHoriz = scrollSpeed * -1;\n\t\t}\n\t\telse if ( scroll.dtLeft !== null && e.pageX > scroll.dtLeft + scroll.dtWidth - buffer ) {\n\t\t\tdtHoriz = scrollSpeed;\n\t\t}\n\n\t\t// This is where it gets interesting. We want to continue scrolling\n\t\t// without requiring a mouse move, so we need an interval to be\n\t\t// triggered. The interval should continue until it is no longer needed,\n\t\t// but it must also use the latest scroll commands (for example consider\n\t\t// that the mouse might move from scrolling up to scrolling left, all\n\t\t// with the same interval running. We use the `scroll` object to \"pass\"\n\t\t// this information to the interval. Can't use local variables as they\n\t\t// wouldn't be the ones that are used by an already existing interval!\n\t\tif ( windowVert || windowHoriz || dtVert || dtHoriz ) {\n\t\t\tscroll.windowVert = windowVert;\n\t\t\tscroll.windowHoriz = windowHoriz;\n\t\t\tscroll.dtVert = dtVert;\n\t\t\tscroll.dtHoriz = dtHoriz;\n\t\t\trunInterval = true;\n\t\t}\n\t\telse if ( this.s.scrollInterval ) {\n\t\t\t// Don't need to scroll - remove any existing timer\n\t\t\tclearInterval( this.s.scrollInterval );\n\t\t\tthis.s.scrollInterval = null;\n\t\t}\n\n\t\t// If we need to run the interval to scroll and there is no existing\n\t\t// interval (if there is an existing one, it will continue to run)\n\t\tif ( ! this.s.scrollInterval && runInterval ) {\n\t\t\tthis.s.scrollInterval = setInterval( function () {\n\t\t\t\t// Don't need to worry about setting scroll <0 or beyond the\n\t\t\t\t// scroll bound as the browser will just reject that.\n\t\t\t\tif ( scroll.windowVert ) {\n\t\t\t\t\tdocument.body.scrollTop += scroll.windowVert;\n\t\t\t\t}\n\t\t\t\tif ( scroll.windowHoriz ) {\n\t\t\t\t\tdocument.body.scrollLeft += scroll.windowHoriz;\n\t\t\t\t}\n\n\t\t\t\t// DataTables scrolling\n\t\t\t\tif ( scroll.dtVert || scroll.dtHoriz ) {\n\t\t\t\t\tvar scroller = that.dom.dtScroll[0];\n\n\t\t\t\t\tif ( scroll.dtVert ) {\n\t\t\t\t\t\tscroller.scrollTop += scroll.dtVert;\n\t\t\t\t\t}\n\t\t\t\t\tif ( scroll.dtHoriz ) {\n\t\t\t\t\t\tscroller.scrollLeft += scroll.dtHoriz;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 20 );\n\t\t}\n\t},\n\n\n\t/**\n\t * Update the DataTable after the user has selected what they want to do\n\t *\n\t * @param  {false|undefined} result Return from the `execute` method - can\n\t *   be false internally to do nothing. This is not documented for plug-ins\n\t *   and is used only by the cancel option.\n\t * @param {array} cells Information about the selected cells from the key\n\t *     up function, argumented with the set values\n\t * @private\n\t */\n\t_update: function ( result, cells )\n\t{\n\t\t// Do nothing on `false` return from an execute function\n\t\tif ( result === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar dt = this.s.dt;\n\t\tvar cell;\n\t\tvar columns = dt.columns( this.c.columns ).indexes();\n\n\t\t// Potentially allow modifications to the cells matrix\n\t\tthis._emitEvent( 'preAutoFill', [ dt, cells ] );\n\n\t\tthis._editor( cells );\n\n\t\t// Automatic updates are not performed if `update` is null and the\n\t\t// `editor` parameter is passed in - the reason being that Editor will\n\t\t// update the data once submitted\n\t\tvar update = this.c.update !== null ?\n\t\t\tthis.c.update :\n\t\t\tthis.c.editor ?\n\t\t\t\tfalse :\n\t\t\t\ttrue;\n\n\t\tif ( update ) {\n\t\t\tfor ( var i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\tfor ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {\n\t\t\t\t\tcell = cells[i][j];\n\n\t\t\t\t\tif ( columns.indexOf(cell.index.column) !== -1 ) {\n\t\t\t\t\t\tcell.cell.data( cell.set );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdt.draw(false);\n\t\t}\n\n\t\tthis._emitEvent( 'autoFill', [ dt, cells ] );\n\t}\n} );\n\n\n/**\n * AutoFill actions. The options here determine how AutoFill will fill the data\n * in the table when the user has selected a range of cells. Please see the\n * documentation on the DataTables site for full details on how to create plug-\n * ins.\n *\n * @type {Object}\n */\nAutoFill.actions = {\n\tincrement: {\n\t\tavailable: function ( dt, cells ) {\n\t\t\tvar d = cells[0][0].label;\n\n\t\t\t// is numeric test based on jQuery's old `isNumeric` function\n\t\t\treturn !isNaN( d - parseFloat( d ) );\n\t\t},\n\n\t\toption: function ( dt, cells ) {\n\t\t\treturn dt.i18n(\n\t\t\t\t'autoFill.increment',\n\t\t\t\t'Increment / decrement each cell by: <input type=\"number\" value=\"1\">'\n\t\t\t);\n\t\t},\n\n\t\texecute: function ( dt, cells, node ) {\n\t\t\tvar value = cells[0][0].data * 1;\n\t\t\tvar increment = $('input', node).val() * 1;\n\n\t\t\tfor ( var i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\tfor ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {\n\t\t\t\t\tcells[i][j].set = value;\n\n\t\t\t\t\tvalue += increment;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tfill: {\n\t\tavailable: function ( dt, cells ) {\n\t\t\treturn true;\n\t\t},\n\n\t\toption: function ( dt, cells ) {\n\t\t\treturn dt.i18n('autoFill.fill', 'Fill all cells with <i>%d</i>', cells[0][0].label );\n\t\t},\n\n\t\texecute: function ( dt, cells, node ) {\n\t\t\tvar value = cells[0][0].data;\n\n\t\t\tfor ( var i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\tfor ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {\n\t\t\t\t\tcells[i][j].set = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tfillHorizontal: {\n\t\tavailable: function ( dt, cells ) {\n\t\t\treturn cells.length > 1 && cells[0].length > 1;\n\t\t},\n\n\t\toption: function ( dt, cells ) {\n\t\t\treturn dt.i18n('autoFill.fillHorizontal', 'Fill cells horizontally' );\n\t\t},\n\n\t\texecute: function ( dt, cells, node ) {\n\t\t\tfor ( var i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\tfor ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {\n\t\t\t\t\tcells[i][j].set = cells[i][0].data;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tfillVertical: {\n\t\tavailable: function ( dt, cells ) {\n\t\t\treturn cells.length > 1;\n\t\t},\n\n\t\toption: function ( dt, cells ) {\n\t\t\treturn dt.i18n('autoFill.fillVertical', 'Fill cells vertically' );\n\t\t},\n\n\t\texecute: function ( dt, cells, node ) {\n\t\t\tfor ( var i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\tfor ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {\n\t\t\t\t\tcells[i][j].set = cells[0][j].data;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Special type that does not make itself available, but is added\n\t// automatically by AutoFill if a multi-choice list is shown. This allows\n\t// sensible code reuse\n\tcancel: {\n\t\tavailable: function () {\n\t\t\treturn false;\n\t\t},\n\n\t\toption: function ( dt ) {\n\t\t\treturn dt.i18n('autoFill.cancel', 'Cancel' );\n\t\t},\n\n\t\texecute: function () {\n\t\t\treturn false;\n\t\t}\n\t}\n};\n\n\n/**\n * AutoFill version\n * \n * @static\n * @type      String\n */\nAutoFill.version = '2.3.9';\n\n\n/**\n * AutoFill defaults\n * \n * @namespace\n */\nAutoFill.defaults = {\n\t/** @type {Boolean} Ask user what they want to do, even for a single option */\n\talwaysAsk: false,\n\n\t/** @type {string|null} What will trigger a focus */\n\tfocus: null, // focus, click, hover\n\n\t/** @type {column-selector} Columns to provide auto fill for */\n\tcolumns: '', // all\n\n\t/** @type {Boolean} Enable AutoFill on load */\n\tenable: true,\n\n\t/** @type {boolean|null} Update the cells after a drag */\n\tupdate: null, // false is editor given, true otherwise\n\n\t/** @type {DataTable.Editor} Editor instance for automatic submission */\n\teditor: null,\n\n\t/** @type {boolean} Enable vertical fill */\n\tvertical: true,\n\n\t/** @type {boolean} Enable horizontal fill */\n\thorizontal: true\n};\n\n\n/**\n * Classes used by AutoFill that are configurable\n * \n * @namespace\n */\nAutoFill.classes = {\n\t/** @type {String} Class used by the selection button */\n\tbtn: 'btn'\n};\n\n\n/*\n * API\n */\nvar Api = $.fn.dataTable.Api;\n\n// Doesn't do anything - Not documented\nApi.register( 'autoFill()', function () {\n\treturn this;\n} );\n\nApi.register( 'autoFill().enabled()', function () {\n\tvar ctx = this.context[0];\n\n\treturn ctx.autoFill ?\n\t\tctx.autoFill.enabled() :\n\t\tfalse;\n} );\n\nApi.register( 'autoFill().enable()', function ( flag ) {\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\tif ( ctx.autoFill ) {\n\t\t\tctx.autoFill.enable( flag );\n\t\t}\n\t} );\n} );\n\nApi.register( 'autoFill().disable()', function () {\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\tif ( ctx.autoFill ) {\n\t\t\tctx.autoFill.disable();\n\t\t}\n\t} );\n} );\n\n\n// Attach a listener to the document which listens for DataTables initialisation\n// events so we can automatically initialise\n$(document).on( 'preInit.dt.autofill', function (e, settings, json) {\n\tif ( e.namespace !== 'dt' ) {\n\t\treturn;\n\t}\n\n\tvar init = settings.oInit.autoFill;\n\tvar defaults = DataTable.defaults.autoFill;\n\n\tif ( init || defaults ) {\n\t\tvar opts = $.extend( {}, init, defaults );\n\n\t\tif ( init !== false ) {\n\t\t\tnew AutoFill( settings, opts  );\n\t\t}\n\t}\n} );\n\n\n// Alias for access\nDataTable.AutoFill = AutoFill;\nDataTable.AutoFill = AutoFill;\n\n\nreturn AutoFill;\n}));\n"]},"metadata":{},"sourceType":"script"}