{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sher\\\\Desktop\\\\datahub tagging ui\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css'; //Bootstrap and jQuery libraries\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js'; //Datatable Modules\n\nimport \"datatables.net-dt/js/dataTables.dataTables\";\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\";\nimport $, { data } from 'jquery'; //For API Requests\n\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  //Declare data store variables\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      cols: []\n    };\n  }\n\n  componentDidMount() {\n    //array holders for data(rowsholder) and column name holder(colsholder)\n    const colsholder = [];\n    const finalrowsholder = [];\n    /**\r\n    * Define the chunk method in the prototype of an array\r\n    * that returns an array with arrays of the given size.\r\n    *\r\n    * @param chunkSize {Integer} Size of every group\r\n    */\n    // on here, nid to make Python FASTAPI as middleware to bypass CORS, then axios.get(http://localhost/FASTAPI)\n\n    axios.get('http://localhost:8000/getdatasets', {\n      headers: {\n        'X-RestLi-Protocol-Version': '2.0.0',\n        'X-RestLi-Method': 'finder'\n      }\n    }).then(res => {\n      //pushing datasets data to 'elements' varaiable\n      let elements = res[\"data\"][\"elements\"]; //for loop for total datasets iteration\n\n      for (let i = 0; i < elements.length; i++) {\n        for (let j = 0; j < elements[i][\"schemaMetadata\"][\"fields\"].length; j++) {\n          let rowsholder = {}; //for loop for platform and table name of datasets, always add key and value pair when pushing to array so aDataSort can refrence later\n\n          Object.assign(rowsholder, {\n            \"Platform_Name\": elements[i][\"platform\"].split(':').pop()\n          });\n          Object.assign(rowsholder, {\n            \"Table_Name\": elements[i][\"name\"]\n          }); //For elements with global tags, if they not equal to undefined, push the tags to array, else push ' ' to array\n\n          if (elements[i][\"globalTags\"] !== undefined) {\n            let globaltagholder = [];\n\n            for (let k = 0; k < elements[i][\"globalTags\"][\"tags\"].length; k++) {\n              globaltagholder.push(elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop());\n            }\n\n            Object.assign(rowsholder, {\n              \"Global_Tags\": globaltagholder\n            });\n          } else {\n            let globaltagholder = [];\n            globaltagholder.push(' ');\n            Object.assign(rowsholder, {\n              \"Global_Tags\": globaltagholder\n            });\n          } //injest field name\n\n\n          Object.assign(rowsholder, {\n            \"Field_Name\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]\n          }); //if the dataset even has editableSchemadata\n\n          if (elements[i][\"editableSchemaMetadata\"] !== undefined) {\n            //Field in editableSchemaMetadata has to match fields in schemaMetadata\n            if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j] !== undefined && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]) {\n              let tagsholder = [];\n\n              for (let l = 0; l < elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length; l++) {\n                tagsholder.push(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop());\n              }\n\n              Object.assign(rowsholder, {\n                \"Tags_For_Field\": tagsholder\n              });\n            }\n          } //Use schemadata tag if exist, since no editableSchemaMetaData\n\n\n          if (elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"] !== undefined) {\n            let tagsholder = [];\n\n            for (let m = 0; m < elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length; m++) {\n              tagsholder.push(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop());\n            }\n\n            Object.assign(rowsholder, {\n              \"Tags_For_Field\": tagsholder\n            });\n          } //If both don't exist, push a blank\n\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"] === undefined) {\n            let tagsholder = [];\n            tagsholder.push(' ');\n            Object.assign(rowsholder, {\n              \"Tags_For_Field\": tagsholder\n            });\n          } //Checks for Description in editableschemaMetaData first, then checks in SchemaMetaData.\n\n\n          if (elements[i][\"editableSchemaMetadata\"] !== undefined) {\n            if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j] !== undefined && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"] && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"] !== undefined) {\n              Object.assign(rowsholder, {\n                \"Description\": elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]\n              });\n            } else if (elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] !== undefined) {\n              Object.assign(rowsholder, {\n                \"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]\n              });\n            }\n          } //Since already checked in editableschemaMetaData , now just checks in schemametadata, else if empty, fill with blank\n\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] !== undefined) {\n            Object.assign(rowsholder, {\n              \"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]\n            });\n          }\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] === undefined) {\n            Object.assign(rowsholder, {\n              \"Description\": ' '\n            });\n          } //for Timestamp, checks if editableschemametadata exists, if not use schemametadata\n\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined) {\n            let date = new Date(elements[i][\"schemaMetadata\"][\"lastModified\"][\"time\"]);\n            Object.assign(rowsholder, {\n              \"Date_Modified\": date.toLocaleString()\n            });\n          } else {\n            let date = new Date(elements[i][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]);\n            Object.assign(rowsholder, {\n              \"Date_Modified\": date.toLocaleString()\n            });\n          }\n\n          finalrowsholder.push(rowsholder);\n          rowsholder = {};\n        }\n      }\n\n      colsholder.push(\"Platform_Name\", \"Table_Name\", \"Global_Tags\", \"Field_Name\", \"Tags_For_Field\", \"Description\", \"Date_Modified\"); // testing\n      // console.log(\"Platform name:\", (elements[0][\"platform\"]).split(':').pop())\n      // console.log(\"table name:\", elements[0][\"name\"])\n      // console.log(\"Global Tags:\", elements[0][\"globalTags\"][\"tags\"])\n      // console.log(\"Field name:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"fieldPath\"])\n      // console.log(\"Tag name for field:\", (elements[0][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][0][\"globalTags\"][\"tags\"][0][\"tag\"].split(':').pop()))\n      // console.log(\"Description:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"description\"])\n      // if((elements[0][\"editableSchemaMetadata\"])=== undefined || (elements[0][\"editableSchemaMetadata\"]) ==0)\n      // {\n      //   console.log(\"Last Modified:\", Date(elements[0][\"schemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\n      // } else{\n      //   console.log(\"Last Modified:\", Date(elements[0][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\n      // }\n      //Storing users detail in state array object\n      //for(let i = 0; i < res.data.response[0].length; i++){\n      // colsholder.push(res.data.response[0][i]['Field']) \n      //}\n      //for(let i = 0; i < res.data.response[1].length; i++){\n      // rowsholder =(res.data.response[1][i]) \n      //}\n\n      console.log(\"fetched elements from GMS VIA FASTAPI:\", elements);\n      console.log(\"Column Headers:\", colsholder);\n      console.log(\"Data to feed columns:\", finalrowsholder);\n      this.setState({\n        data: finalrowsholder,\n        cols: colsholder\n      });\n    }); //init Datatable  \n\n    setTimeout(() => {\n      $('#example').DataTable({\n        \"lengthMenu\": [[5, 10, 15, -1], [5, 10, 15, \"All\"]]\n      });\n    }, 100);\n  }\n\n  render() {\n    //Datatable HTML\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MainDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"jumbotron text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Datahub Tagging UI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"example\",\n          class: \"table table-striped table-bordered table-sm row-border hover mb-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: this.state.cols.map(result => {\n                return /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: result\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 15\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.state.data.map(result => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                class: \"table-success\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Platform_Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Table_Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Global_Tags\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Field_Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Tags_For_Field\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Date_Modified\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 15\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Sher/Desktop/datahub tagging ui/frontend/src/App.js"],"names":["React","$","data","axios","App","Component","constructor","props","state","cols","componentDidMount","colsholder","finalrowsholder","get","headers","then","res","elements","i","length","j","rowsholder","Object","assign","split","pop","undefined","globaltagholder","k","push","tagsholder","l","m","date","Date","toLocaleString","console","log","setState","setTimeout","DataTable","render","map","result","Platform_Name","Table_Name","Global_Tags","Field_Name","Tags_For_Field","Description","Date_Modified"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n//Bootstrap and jQuery libraries\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'jquery/dist/jquery.min.js';\r\n//Datatable Modules\r\nimport \"datatables.net-dt/js/dataTables.dataTables\";\r\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\";\r\nimport $, { data } from 'jquery'; \r\n//For API Requests\r\nimport axios from 'axios';\r\nclass App extends React.Component {\r\n  //Declare data store variables\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        data: [],\r\n        cols:[]\r\n              }\r\n      }\r\n\r\n \r\n  componentDidMount() {\r\n    //array holders for data(rowsholder) and column name holder(colsholder)\r\n    const colsholder =[]\r\n  \r\n    const finalrowsholder=[]\r\n    /**\r\n * Define the chunk method in the prototype of an array\r\n * that returns an array with arrays of the given size.\r\n *\r\n * @param chunkSize {Integer} Size of every group\r\n */\r\n\r\n    \r\n    // on here, nid to make Python FASTAPI as middleware to bypass CORS, then axios.get(http://localhost/FASTAPI)\r\n    axios.get('http://localhost:8000/getdatasets', {\r\n      headers: {\r\n          'X-RestLi-Protocol-Version': '2.0.0',\r\n          'X-RestLi-Method': 'finder'      \r\n      }\r\n    }).then(res => \r\n    { //pushing datasets data to 'elements' varaiable\r\n      let elements = (res[\"data\"][\"elements\"])\r\n    //for loop for total datasets iteration\r\n    for(let i=0; i< elements.length; i++){\r\n      for(let j=0; j< elements[i][\"schemaMetadata\"][\"fields\"].length; j++){\r\n        let rowsholder={}\r\n    \r\n        //for loop for platform and table name of datasets, always add key and value pair when pushing to array so aDataSort can refrence later\r\n        Object.assign(rowsholder, {\"Platform_Name\": (elements[i][\"platform\"]).split(':').pop()});\r\n        Object.assign(rowsholder,{\"Table_Name\": elements[i][\"name\"]});\r\n      \r\n        //For elements with global tags, if they not equal to undefined, push the tags to array, else push ' ' to array\r\n        if(elements[i][\"globalTags\"]!==undefined){\r\n          let globaltagholder= []\r\n          \r\n        \r\n          for(let k=0; k< elements[i][\"globalTags\"][\"tags\"].length; k++){\r\n            \r\n        \r\n        globaltagholder.push(elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop())\r\n    }\r\n    Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n \r\n  }     else{\r\n          let globaltagholder= []\r\n          globaltagholder.push(' ')\r\n          Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n  }\r\n   \r\n    //injest field name\r\n      Object.assign(rowsholder,({\"Field_Name\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]}))\r\n     \r\n      //if the dataset even has editableSchemadata\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        //Field in editableSchemaMetadata has to match fields in schemaMetadata\r\n        if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"]===elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]){\r\n          let tagsholder= []\r\n          for(let l=0; l< elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length; l++){\r\n            tagsholder.push((elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop()))\r\n        }\r\n        Object.assign(rowsholder, ({\"Tags_For_Field\": tagsholder}))\r\n      }\r\n    }\r\n       \r\n      //Use schemadata tag if exist, since no editableSchemaMetaData\r\n      if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"]!==undefined){\r\n        \r\n        let tagsholder= []\r\n          for(let m=0; m< elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length; m++){\r\n          tagsholder.push((elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop()))\r\n         \r\n        }\r\n        Object.assign(rowsholder,({\"Tags_For_Field\": tagsholder}))\r\n      }\r\n\r\n      //If both don't exist, push a blank\r\n      if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"] === undefined){\r\n        let tagsholder= []\r\n        tagsholder.push(' ')\r\n        Object.assign(rowsholder,({\"Tags_For_Field\": tagsholder}))\r\n      }\r\n     \r\n\r\n      //Checks for Description in editableschemaMetaData first, then checks in SchemaMetaData.\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"] \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]!==undefined)\r\n        {\r\n          Object.assign(rowsholder,({\"Description\": elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]}))\r\n         \r\n      } else if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined)\r\n      {\r\n        Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n      }\r\n    }\r\n\r\n\r\n    //Since already checked in editableschemaMetaData , now just checks in schemametadata, else if empty, fill with blank\r\n      if (elements[i][\"editableSchemaMetadata\"] ===undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined){\r\n            Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n\r\n      }if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] === undefined){\r\n        Object.assign(rowsholder,({\"Description\": ' '}))\r\n      }\r\n      //for Timestamp, checks if editableschemametadata exists, if not use schemametadata\r\n      if(elements[i][\"editableSchemaMetadata\"] === undefined){\r\n        let date = new Date (elements[i][\"schemaMetadata\"][\"lastModified\"][\"time\"])\r\n        \r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }else{\r\n        let date = new Date (elements[i][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"])\r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }\r\n      finalrowsholder.push(rowsholder)\r\n      rowsholder = {}\r\n    }\r\n    \r\n  }\r\n    colsholder.push(\"Platform_Name\", \"Table_Name\",\"Global_Tags\", \"Field_Name\", \"Tags_For_Field\", \"Description\", \"Date_Modified\")\r\n   \r\n      // testing\r\n      \r\n      // console.log(\"Platform name:\", (elements[0][\"platform\"]).split(':').pop())\r\n      // console.log(\"table name:\", elements[0][\"name\"])\r\n      // console.log(\"Global Tags:\", elements[0][\"globalTags\"][\"tags\"])\r\n      // console.log(\"Field name:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"fieldPath\"])\r\n      // console.log(\"Tag name for field:\", (elements[0][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][0][\"globalTags\"][\"tags\"][0][\"tag\"].split(':').pop()))\r\n      // console.log(\"Description:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"description\"])\r\n      // if((elements[0][\"editableSchemaMetadata\"])=== undefined || (elements[0][\"editableSchemaMetadata\"]) ==0)\r\n      // {\r\n      //   console.log(\"Last Modified:\", Date(elements[0][\"schemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\r\n      // } else{\r\n      //   console.log(\"Last Modified:\", Date(elements[0][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\r\n      // }\r\n      \r\n      \r\n      \r\n      //Storing users detail in state array object\r\n      //for(let i = 0; i < res.data.response[0].length; i++){\r\n      // colsholder.push(res.data.response[0][i]['Field']) \r\n      //}\r\n    \r\n      //for(let i = 0; i < res.data.response[1].length; i++){\r\n     // rowsholder =(res.data.response[1][i]) \r\n     //}\r\n     console.log(\"fetched elements from GMS VIA FASTAPI:\",elements)\r\n    console.log(\"Column Headers:\",colsholder)\r\n  \r\n   \r\n\r\n    console.log(\"Data to feed columns:\",finalrowsholder)\r\n    this.setState({data: finalrowsholder, cols: colsholder});\r\n       }); \r\n    //init Datatable  \r\n    setTimeout(()=>{                        \r\n    $('#example').DataTable(\r\n      {\r\n        \"lengthMenu\": [[5, 10, 15, -1], [5, 10, 15, \"All\"]]\r\n      }\r\n    );\r\n  }, 100);\r\n }\r\n\r\n \r\n  render(){\r\n    //Datatable HTML\r\n  return (\r\n    <div className=\"MainDiv\">\r\n      <div class=\"jumbotron text-center\">\r\n          <h3>Datahub Tagging UI</h3>\r\n      </div>\r\n      \r\n      <div className=\"container\">\r\n          \r\n      <table id=\"example\" class=\"table table-striped table-bordered table-sm row-border hover mb-5\" >\r\n          <thead>\r\n            <tr>\r\n            {this.state.cols.map((result) => {\r\n            return (\r\n              <th>{result}</th>\r\n          )\r\n          })}\r\n              \r\n              \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {this.state.data.map((result) => {\r\n            return (\r\n              <tr class=\"table-success\">\r\n     \r\n                  \r\n                  <td>{result.Platform_Name}</td>\r\n                  <td>{result.Table_Name}</td>\r\n                  <td>{result.Global_Tags}</td>\r\n                  <td>{result.Field_Name}</td>\r\n                  <td>{result.Tags_For_Field}</td>\r\n                  <td>{result.Description}</td>\r\n                  <td>{result.Date_Modified}</td>\r\n                </tr>\r\n          )\r\n          })}\r\n            \r\n          \r\n          </tbody>\r\n        </table>\r\n         \r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}