{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sher\\\\Desktop\\\\datahub tagging ui\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css'; //Bootstrap and jQuery libraries\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js'; //Datatable Modules\n\nimport \"datatables.net-dt/js/dataTables.dataTables\";\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\";\nimport $ from 'jquery'; //For API Requests\n\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  //Declare data store variables\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [],\n      cols: []\n    };\n  }\n\n  componentDidMount() {\n    function insertAt(array, index, ...elementsArray) {\n      array.splice(index, 0, ...elements);\n    }\n\n    function moveArrayItemToNewIndex(arr, old_index, new_index) {\n      if (new_index >= arr.length) {\n        var k = new_index - arr.length + 1;\n\n        while (k--) {\n          arr.push(undefined);\n        }\n      }\n\n      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n      return arr;\n    }\n\n    ; //array holders for rows(rowsholder) and column name holder(colsholder)\n\n    const colsholder = [];\n    const finalrowsholder = [];\n    var finaleditedholder = [];\n    var tempfieldnameholder = [];\n    var tempdatasetnameholder = [];\n    var elements; // on here, nid to make Python FASTAPI as middleware to bypass CORS, then axios.get(http://localhost/FASTAPI)\n\n    axios.get('http://localhost:8000/getdatasets', {\n      headers: {\n        'X-RestLi-Protocol-Version': '2.0.0',\n        'X-RestLi-Method': 'finder'\n      }\n    }).then(res => {\n      //pushing datasets data to 'elements' varaiable\n      elements = res[\"data\"][\"elements\"];\n      let count = 0; //For loop for all fields in dataset, compare with editableSchema fields; if exist, push both to first element of each array, thus index positions of both edited Schema\n      // and Schemameta(original) will match \n\n      for (let i = 0; i < elements.length; i++) {\n        for (let j = 0; j < elements[i][\"schemaMetadata\"][\"fields\"].length; j++) {\n          if (elements[i][\"editableSchemaMetadata\"] !== undefined) {\n            for (let a = 0; a < elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"].length; a++) {\n              if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][a][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]) {\n                moveArrayItemToNewIndex(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"], a, 0);\n                moveArrayItemToNewIndex(elements[i][\"schemaMetadata\"][\"fields\"], j, 0);\n              }\n            }\n          }\n        }\n      } //for loop for total datasets iteration\n\n\n      for (let i = 0; i < elements.length; i++) {\n        for (let j = 0; j < elements[i][\"schemaMetadata\"][\"fields\"].length; j++) {\n          let rowsholder = {};\n          Object.assign(rowsholder, {\n            \"ID\": count\n          });\n          count += 1; //for loop for platform and table name of datasets, always add key and value pair when pushing to array so aDataSort can refrence later\n\n          Object.assign(rowsholder, {\n            \"Platform_Name\": elements[i][\"platform\"].split(':').pop()\n          });\n          Object.assign(rowsholder, {\n            \"Dataset_Name\": elements[i][\"name\"]\n          }); //For elements with global tags, if they not equal to undefined, push the tags to array, else push ' ' to array\n\n          if (elements[i][\"globalTags\"] !== undefined) {\n            let globaltagholder = [];\n\n            for (let k = 0; k < elements[i][\"globalTags\"][\"tags\"].length; k++) {\n              if (k > 0) {\n                globaltagholder.push(', ' + elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop());\n              } else {\n                globaltagholder.push(elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop());\n              }\n            }\n\n            Object.assign(rowsholder, {\n              \"Global_Tags\": globaltagholder\n            });\n          } else {\n            let globaltagholder = [];\n            globaltagholder.push(' ');\n            Object.assign(rowsholder, {\n              \"Global_Tags\": globaltagholder\n            });\n          } //injest field name\n\n\n          Object.assign(rowsholder, {\n            \"Field_Name\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]\n          }); //if the dataset even has editableSchemadata\n\n          if (elements[i][\"editableSchemaMetadata\"] !== undefined) {\n            //Field in editableSchemaMetadata has to match fields in schemaMetadata\n            if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j] !== undefined //This line matches [x] element in array of editableschema to [x] element in array of schemadata, but wont workk because the element index of editable does not match schemametadata element index\n            && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]) {\n              let tagsholder = [];\n\n              for (let l = 0; l < elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length; l++) {\n                if (l > 0) {\n                  tagsholder.push(', ' + elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop());\n                } else {\n                  tagsholder.push(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop());\n                }\n              }\n\n              Object.assign(rowsholder, {\n                \"Tags_For_Field\": tagsholder\n              });\n              Object.assign(rowsholder, {\n                \"From_EditableSchema\": \"Yes\"\n              }); //If have editableschemametadata but fieldpaths dont match, set to NO\n            } else {\n              Object.assign(rowsholder, {\n                \"From_EditableSchema\": \"No\"\n              });\n            } //If do not have editableschemametadata at all\n\n          } else {\n            Object.assign(rowsholder, {\n              \"From_EditableSchema\": \"No\"\n            });\n          } //Use schemadata tag if exist, since no editableSchemaMetaData\n\n\n          if (elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"] !== undefined) {\n            let tagsholder = [];\n\n            for (let m = 0; m < elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length; m++) {\n              if (m > 0) {\n                tagsholder.push(', ' + elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop());\n              } else {\n                tagsholder.push(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop());\n              }\n            }\n\n            Object.assign(rowsholder, {\n              \"Tags_For_Field\": tagsholder\n            });\n          } //If both don't exist, push a blank\n\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"] === undefined) {\n            let tagsholder = [];\n            tagsholder.push(' ');\n            Object.assign(rowsholder, {\n              \"Tags_For_Field\": tagsholder\n            });\n          } //Checks for Description in editableschemaMetaData first, then checks in SchemaMetaData.\n\n\n          if (elements[i][\"editableSchemaMetadata\"] !== undefined) {\n            if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j] !== undefined && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"] && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"] !== undefined) {\n              Object.assign(rowsholder, {\n                \"Description\": elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]\n              });\n            } else if (elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] !== undefined) {\n              Object.assign(rowsholder, {\n                \"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]\n              });\n            }\n          } //Since already checked in editableschemaMetaData , now just checks in schemametadata, else if empty, fill with blank\n\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] !== undefined) {\n            Object.assign(rowsholder, {\n              \"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]\n            });\n          }\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] === undefined) {\n            Object.assign(rowsholder, {\n              \"Description\": ' '\n            });\n          } //for Timestamp, checks if editableschemametadata exists, if not use schemametadata\n\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined) {\n            let date = new Date(elements[i][\"schemaMetadata\"][\"lastModified\"][\"time\"]);\n            Object.assign(rowsholder, {\n              \"Date_Modified\": date.toLocaleString()\n            });\n          } else {\n            let date = new Date(elements[i][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]);\n            Object.assign(rowsholder, {\n              \"Date_Modified\": date.toLocaleString()\n            });\n          }\n\n          finalrowsholder.push(rowsholder);\n          rowsholder = {};\n        }\n      }\n\n      colsholder.push(\"#\", \"Platform_Name\", \"Dataset_Name\", \"Global_Tags\", \"Field_Name\", \"Tags_For_Field\", \"Description\", \"Date_Modified\", \"From_EditableSchema\"); // testing\n      //console.log(elements)\n      // console.log(\"Platform name:\", (elements[0][\"platform\"]).split(':').pop())\n      // console.log(\"table name:\", elements[0][\"name\"])\n      // console.log(\"Global Tags:\", elements[0][\"globalTags\"][\"tags\"])\n      // console.log(\"Field name:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"fieldPath\"])\n      // console.log(\"Tag name for field:\", (elements[0][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][0][\"globalTags\"][\"tags\"][0][\"tag\"].split(':').pop()))\n      // console.log(\"Description:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"description\"])\n      // if((elements[0][\"editableSchemaMetadata\"])=== undefined || (elements[0][\"editableSchemaMetadata\"]) ==0)\n      // {\n      //   console.log(\"Last Modified:\", Date(elements[0][\"schemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\n      // } else{\n      //   console.log(\"Last Modified:\", Date(elements[0][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\n      // }\n      //Storing users detail in state array object\n      //for(let i = 0; i < res.data.response[0].length; i++){\n      // colsholder.push(res.data.response[0][i]['Field']) \n      //}\n      //for(let i = 0; i < res.data.response[1].length; i++){\n      // rowsholder =(res.data.response[1][i]) \n      //}\n\n      console.log(\"Sorted fields of data retrived from GMS:\", elements);\n      console.log(\"Column Headers:\", colsholder);\n      console.log(\"Data to feed columns:\", finalrowsholder);\n      this.setState({\n        rows: finalrowsholder,\n        cols: colsholder\n      });\n    }); //init Datatable, #example is the table element id\n\n    setTimeout(() => {\n      var example = $('#example').DataTable({\n        order: [[0, \"asc\"]],\n        responsive: true,\n        \"lengthMenu\": [[5, 10, 15, -1], [5, 10, 15, \"All\"]],\n        columnDefs: [{\n          \"type\": \"html-input\",\n          targets: [3, 5, 6],\n          render: function (rows, type, row) {\n            return '<input class=\"form-control\" type=\"text\"  value =\"' + rows + '\" style= \"width:auto\">';\n          }\n        }]\n      }); //Iterate thru all row and compare original data vs edited, if edited, add to array (finaleditedholder) to be sent to endpoint\n\n      $('#test').click(function () {\n        let editedrowsholder = {};\n        finaleditedholder = [];\n        example.rows().every(function () {\n          if (this.data()[3] !== $(example.cell(this.index(), 3).node()).find('input').val() || this.data()[5] !== $(example.cell(this.index(), 5).node()).find('input').val() || this.data()[6] !== $(example.cell(this.index(), 6).node()).find('input').val()) {\n            let date = new Date();\n            Object.assign(editedrowsholder, {\n              \"ID\": parseInt(this.data()[0]),\n              \"Platform_Name\": this.data()[1],\n              \"Dataset_Name\": this.data()[2],\n              \"Global_Tags\": $(example.cell(this.index(), 3).node()).find('input').val(),\n              \"Field_Name\": this.data()[4],\n              \"Tags_For_Field\": $(example.cell(this.index(), 5).node()).find('input').val(),\n              \"Description\": $(example.cell(this.index(), 6).node()).find('input').val(),\n              \"Date_Modified\": Date.parse(date.toLocaleString())\n            });\n            finaleditedholder.push(editedrowsholder);\n            editedrowsholder = {};\n          }\n        });\n        console.log(\"First iteration:\", finaleditedholder);\n\n        for (let j = 0; j < finaleditedholder.length; j++) {\n          tempfieldnameholder.push(finaleditedholder[j][\"Field_Name\"]);\n          tempdatasetnameholder.push(finaleditedholder[j][\"Dataset_Name\"]);\n        }\n\n        console.log(tempfieldnameholder);\n        console.log(tempdatasetnameholder);\n        console.log(tempdatasetnameholder.indexOf(\"fct_users_deleted\"));\n        tempfieldnameholder = [];\n        tempdatasetnameholder = []; // for(let j=0; j< finaleditedholder.length; j++){\n        //   for(let k=0; k< finalrowsholder.length; k++){\n        //     console.log(finaleditedholder[j][\"Dataset_Name\"] === finalrowsholder[k][\"Dataset_Name\"] && finaleditedholder[j][\"Field_Name\"] !== finalrowsholder[k][\"Field_Name\"] && finalrowsholder[k][\"From_EditableSchema\"]===\"Yes\")\n        //     if(finaleditedholder[j][\"Dataset_Name\"] === finalrowsholder[k][\"Dataset_Name\"] && finaleditedholder[j][\"Field_Name\"] !== finalrowsholder[k][\"Field_Name\"] && finalrowsholder[k][\"From_EditableSchema\"]===\"Yes\"){\n        //       finaleditedholder.push(finalrowsholder[k])\n        //   }\n        // };\n        // }\n\n        console.log(\"Second iteration:\", finaleditedholder);\n        axios.post('http://localhost:8000/getresult', finaleditedholder, {\n          headers: {\n            // Overwrite Axios's automatically set Content-Type\n            'Content-Type': 'application/json'\n          }\n        }).then(res => console.log(\"Response from what API received: \", res.data));\n      });\n    }, 100);\n  }\n\n  render() {\n    //Datatable HTML\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MainDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"jumbotron text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Datahub Tagging UI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"example\",\n          class: \"table table-striped table-bordered table-sm row-border hover mb-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: this.state.cols.map(result => {\n                return /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: result\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 15\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.state.rows.map(result => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                class: \"table-success\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.ID\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Platform_Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Dataset_Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Global_Tags\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Field_Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Tags_For_Field\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Date_Modified\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.From_EditableSchema\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 15\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Sher/Desktop/datahub tagging ui/frontend/src/App.js"],"names":["React","$","axios","App","Component","constructor","props","state","rows","cols","componentDidMount","insertAt","array","index","elementsArray","splice","elements","moveArrayItemToNewIndex","arr","old_index","new_index","length","k","push","undefined","colsholder","finalrowsholder","finaleditedholder","tempfieldnameholder","tempdatasetnameholder","get","headers","then","res","count","i","j","a","rowsholder","Object","assign","split","pop","globaltagholder","tagsholder","l","m","date","Date","toLocaleString","console","log","setState","setTimeout","example","DataTable","order","responsive","columnDefs","targets","render","type","row","click","editedrowsholder","every","data","cell","node","find","val","parseInt","parse","indexOf","post","map","result","ID","Platform_Name","Dataset_Name","Global_Tags","Field_Name","Tags_For_Field","Description","Date_Modified","From_EditableSchema"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n//Bootstrap and jQuery libraries\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'jquery/dist/jquery.min.js';\r\n//Datatable Modules\r\nimport \"datatables.net-dt/js/dataTables.dataTables\";\r\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\";\r\nimport $ from 'jquery'; \r\n//For API Requests\r\nimport axios from 'axios';\r\nclass App extends React.Component {\r\n  \r\n  \r\n  //Declare data store variables\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        rows: [],\r\n        cols:[]\r\n              }\r\n\r\n\r\n              \r\n      }\r\n\r\n \r\n  componentDidMount() {\r\n    function insertAt(array, index, ...elementsArray) {\r\n      array.splice(index, 0, ...elements);\r\n  }\r\n    function moveArrayItemToNewIndex(arr, old_index, new_index) {\r\n      if (new_index >= arr.length) {\r\n          var k = new_index - arr.length + 1;\r\n          while (k--) {\r\n              arr.push(undefined);\r\n          }\r\n      }\r\n      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n      return arr; \r\n    };\r\n    //array holders for rows(rowsholder) and column name holder(colsholder)\r\n    const colsholder =[]\r\n  \r\n    const finalrowsholder=[]\r\n\r\n    var finaleditedholder=[]\r\n\r\n    var tempfieldnameholder=[]\r\n    var tempdatasetnameholder=[]\r\n    var elements\r\n    \r\n    // on here, nid to make Python FASTAPI as middleware to bypass CORS, then axios.get(http://localhost/FASTAPI)\r\n    axios.get('http://localhost:8000/getdatasets', {\r\n      headers: {\r\n          'X-RestLi-Protocol-Version': '2.0.0',\r\n          'X-RestLi-Method': 'finder'      \r\n      }\r\n    }).then(res => \r\n    { //pushing datasets data to 'elements' varaiable\r\n      elements = (res[\"data\"][\"elements\"])\r\n      let count =0\r\n    //For loop for all fields in dataset, compare with editableSchema fields; if exist, push both to first element of each array, thus index positions of both edited Schema\r\n    // and Schemameta(original) will match \r\n    for(let i=0; i< elements.length; i++){\r\n      for(let j=0; j< elements[i][\"schemaMetadata\"][\"fields\"].length; j++){\r\n        if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n          for( let a = 0; a<elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"].length; a++){\r\n            if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][a][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]){\r\n              moveArrayItemToNewIndex(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"],a,0)\r\n              moveArrayItemToNewIndex(elements[i][\"schemaMetadata\"][\"fields\"],j,0)\r\n            }   \r\n      }\r\n    }\r\n  }\r\n}\r\n//for loop for total datasets iteration\r\n    for(let i=0; i< elements.length; i++){\r\n      for(let j=0; j< elements[i][\"schemaMetadata\"][\"fields\"].length; j++){\r\n        let rowsholder={}\r\n        \r\n        Object.assign(rowsholder,{\"ID\": count});\r\n        count+=1\r\n        //for loop for platform and table name of datasets, always add key and value pair when pushing to array so aDataSort can refrence later\r\n        Object.assign(rowsholder, {\"Platform_Name\": (elements[i][\"platform\"]).split(':').pop()});\r\n        Object.assign(rowsholder,{\"Dataset_Name\": elements[i][\"name\"]});\r\n      \r\n        //For elements with global tags, if they not equal to undefined, push the tags to array, else push ' ' to array\r\n        if(elements[i][\"globalTags\"]!==undefined){\r\n          let globaltagholder= []\r\n          \r\n        \r\n          for(let k=0; k< elements[i][\"globalTags\"][\"tags\"].length; k++){\r\n            if(k>0){\r\n              globaltagholder.push(', '+ elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop())\r\n            }\r\n            else{\r\n        globaltagholder.push(elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop())\r\n    }\r\n  }\r\n    Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n \r\n  }     else{\r\n          let globaltagholder= []\r\n          globaltagholder.push(' ')\r\n          Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n  }\r\n   \r\n    //injest field name\r\n      Object.assign(rowsholder,({\"Field_Name\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]}))\r\n\r\n      //if the dataset even has editableSchemadata\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        //Field in editableSchemaMetadata has to match fields in schemaMetadata\r\n        if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined\r\n        \r\n        //This line matches [x] element in array of editableschema to [x] element in array of schemadata, but wont workk because the element index of editable does not match schemametadata element index\r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"])\r\n     \r\n        {\r\n          let tagsholder= []\r\n          for(let l=0; l< elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length; l++){\r\n            if(l>0){\r\n              tagsholder.push(', ' + (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop()))\r\n            }else{\r\n            tagsholder.push((elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop()))\r\n        }\r\n      }\r\n        Object.assign(rowsholder, ({\"Tags_For_Field\": tagsholder}))\r\n        Object.assign(rowsholder, ({\"From_EditableSchema\": \"Yes\"}))\r\n        //If have editableschemametadata but fieldpaths dont match, set to NO\r\n      }else{\r\n        Object.assign(rowsholder, ({\"From_EditableSchema\": \"No\"}))\r\n      } \r\n      //If do not have editableschemametadata at all\r\n    }else{\r\n      Object.assign(rowsholder, ({\"From_EditableSchema\": \"No\"}))\r\n    }\r\n       \r\n      //Use schemadata tag if exist, since no editableSchemaMetaData\r\n      if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"]!==undefined){\r\n        \r\n        let tagsholder= []\r\n          for(let m=0; m< elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length; m++){\r\n            if(m>0){\r\n          tagsholder.push(', ' + (elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop()))\r\n         \r\n        }else{\r\n          tagsholder.push((elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop()))\r\n      }\r\n    }\r\n        Object.assign(rowsholder,({\"Tags_For_Field\": tagsholder}))\r\n      }\r\n\r\n      //If both don't exist, push a blank\r\n      if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"] === undefined){\r\n        let tagsholder= []\r\n        tagsholder.push(' ')\r\n        Object.assign(rowsholder,({\"Tags_For_Field\": tagsholder}))\r\n      }\r\n     \r\n\r\n      //Checks for Description in editableschemaMetaData first, then checks in SchemaMetaData.\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"] \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]!==undefined)\r\n        {\r\n          Object.assign(rowsholder,({\"Description\": elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]}))\r\n         \r\n      } else if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined)\r\n      {\r\n        Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n      }\r\n    }\r\n\r\n\r\n    //Since already checked in editableschemaMetaData , now just checks in schemametadata, else if empty, fill with blank\r\n      if (elements[i][\"editableSchemaMetadata\"] ===undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined){\r\n            Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n\r\n      }if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] === undefined){\r\n        Object.assign(rowsholder,({\"Description\": ' '}))\r\n      }\r\n      //for Timestamp, checks if editableschemametadata exists, if not use schemametadata\r\n      if(elements[i][\"editableSchemaMetadata\"] === undefined){\r\n        let date = new Date (elements[i][\"schemaMetadata\"][\"lastModified\"][\"time\"])\r\n        \r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }else{\r\n        let date = new Date (elements[i][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"])\r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }\r\n      finalrowsholder.push(rowsholder)\r\n      rowsholder = {}\r\n    }\r\n    \r\n  }\r\n    colsholder.push(\"#\", \"Platform_Name\", \"Dataset_Name\",\"Global_Tags\", \"Field_Name\", \"Tags_For_Field\", \"Description\", \"Date_Modified\",\"From_EditableSchema\")\r\n   \r\n      // testing\r\n      //console.log(elements)\r\n      // console.log(\"Platform name:\", (elements[0][\"platform\"]).split(':').pop())\r\n      // console.log(\"table name:\", elements[0][\"name\"])\r\n      // console.log(\"Global Tags:\", elements[0][\"globalTags\"][\"tags\"])\r\n      // console.log(\"Field name:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"fieldPath\"])\r\n      // console.log(\"Tag name for field:\", (elements[0][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][0][\"globalTags\"][\"tags\"][0][\"tag\"].split(':').pop()))\r\n      // console.log(\"Description:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"description\"])\r\n      // if((elements[0][\"editableSchemaMetadata\"])=== undefined || (elements[0][\"editableSchemaMetadata\"]) ==0)\r\n      // {\r\n      //   console.log(\"Last Modified:\", Date(elements[0][\"schemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\r\n      // } else{\r\n      //   console.log(\"Last Modified:\", Date(elements[0][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\r\n      // }\r\n      \r\n      \r\n      \r\n      //Storing users detail in state array object\r\n      //for(let i = 0; i < res.data.response[0].length; i++){\r\n      // colsholder.push(res.data.response[0][i]['Field']) \r\n      //}\r\n    \r\n      //for(let i = 0; i < res.data.response[1].length; i++){\r\n     // rowsholder =(res.data.response[1][i]) \r\n     //}\r\n     console.log(\"Sorted fields of data retrived from GMS:\",elements)\r\n    console.log(\"Column Headers:\",colsholder)\r\n  \r\n   \r\n\r\n    console.log(\"Data to feed columns:\",finalrowsholder)\r\n    this.setState({rows: finalrowsholder, cols: colsholder});\r\n       }); \r\n    //init Datatable, #example is the table element id\r\n    setTimeout(()=>{                        \r\n    var example =$('#example').DataTable(\r\n      {order: [[ 0, \"asc\" ]],\r\n        responsive: true,\r\n     \r\n        \r\n        \"lengthMenu\": [[5, 10, 15, -1], [5, 10, 15, \"All\"]],\r\n        columnDefs : [\r\n          { \"type\": \"html-input\", targets: [3,5,6],\r\n            render: function (rows, type, row) {\r\n          \r\n              return '<input class=\"form-control\" type=\"text\"  value =\"'+ rows + '\" style= \"width:auto\">';\r\n            \r\n            }\r\n            \r\n          }\r\n        ]\r\n        \r\n      }\r\n\r\n    )\r\n\r\n \r\n //Iterate thru all row and compare original data vs edited, if edited, add to array (finaleditedholder) to be sent to endpoint\r\n  $('#test').click(function () {\r\n    let editedrowsholder = {};\r\n    finaleditedholder=[];\r\n    example.rows().every(function(){\r\n    \r\n      if(this.data()[3] !== ($(example.cell(this.index(), 3).node()).find('input').val()) \r\n      ||this.data()[5] !== ($(example.cell(this.index(), 5).node()).find('input').val())\r\n      ||this.data()[6] !== ($(example.cell(this.index(), 6).node()).find('input').val())\r\n      ){\r\n        let date = new Date();\r\n        Object.assign(editedrowsholder,({\"ID\": parseInt(this.data()[0]), \"Platform_Name\": this.data()[1], \"Dataset_Name\": this.data()[2],\r\n        \"Global_Tags\": ($(example.cell(this.index(), 3).node()).find('input').val()), \"Field_Name\": this.data()[4], \r\n        \"Tags_For_Field\": ($(example.cell(this.index(), 5).node()).find('input').val()),\r\n        \"Description\": ($(example.cell(this.index(), 6).node()).find('input').val()), \"Date_Modified\": Date.parse(date.toLocaleString())}))\r\n        finaleditedholder.push(editedrowsholder)\r\n        editedrowsholder={}\r\n        }\r\n  \r\n  \r\n      });\r\n      console.log(\"First iteration:\", finaleditedholder)\r\n     \r\n      for(let j=0; j< finaleditedholder.length; j++){\r\n        tempfieldnameholder.push(finaleditedholder[j][\"Field_Name\"])\r\n        tempdatasetnameholder.push(finaleditedholder[j][\"Dataset_Name\"])\r\n      }\r\n      console.log(tempfieldnameholder)\r\n      console.log(tempdatasetnameholder)\r\n      console.log(tempdatasetnameholder.indexOf(\"fct_users_deleted\"))\r\n\r\n      tempfieldnameholder=[]\r\n      tempdatasetnameholder=[]\r\n      // for(let j=0; j< finaleditedholder.length; j++){\r\n\r\n      //   for(let k=0; k< finalrowsholder.length; k++){\r\n      //     console.log(finaleditedholder[j][\"Dataset_Name\"] === finalrowsholder[k][\"Dataset_Name\"] && finaleditedholder[j][\"Field_Name\"] !== finalrowsholder[k][\"Field_Name\"] && finalrowsholder[k][\"From_EditableSchema\"]===\"Yes\")\r\n   \r\n      //     if(finaleditedholder[j][\"Dataset_Name\"] === finalrowsholder[k][\"Dataset_Name\"] && finaleditedholder[j][\"Field_Name\"] !== finalrowsholder[k][\"Field_Name\"] && finalrowsholder[k][\"From_EditableSchema\"]===\"Yes\"){\r\n      //       finaleditedholder.push(finalrowsholder[k])\r\n              \r\n      //   }\r\n      // };\r\n\r\n      // }\r\n\r\n    console.log(\"Second iteration:\", finaleditedholder) \r\n\r\n    \r\n    axios.post('http://localhost:8000/getresult',\r\n    finaleditedholder\r\n  \r\n  ,{\r\n        headers: {\r\n          // Overwrite Axios's automatically set Content-Type\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    )\r\n    .then(res =>  console.log(\"Response from what API received: \", res.data))\r\n   \r\n    \r\n  });\r\n\r\n  \r\n\r\n  }, 100);\r\n  \r\n  \r\n  \r\n  \r\n\r\n\r\n \r\n\r\n }\r\n\r\n \r\n  render(){\r\n    //Datatable HTML\r\n  return (\r\n    <div className=\"MainDiv\">\r\n      <div class=\"jumbotron text-center\">\r\n          <h3>Datahub Tagging UI</h3>\r\n      </div>\r\n      \r\n      <div className=\"container\" >\r\n          \r\n      <table id=\"example\" class=\"table table-striped table-bordered table-sm row-border hover mb-5\">\r\n          <thead>\r\n            <tr>\r\n            {this.state.cols.map((result) => {\r\n            return (\r\n              <th>{result}</th>\r\n          )\r\n          })}\r\n              \r\n              \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {this.state.rows.map((result) => {\r\n            return (\r\n              <tr class=\"table-success\">\r\n     \r\n                  <td>{result.ID}</td>\r\n                  <td>{result.Platform_Name}</td>\r\n                  <td>{result.Dataset_Name}</td>\r\n                  <td>{result.Global_Tags}</td>\r\n                  <td>{result.Field_Name}</td>\r\n                  <td>{result.Tags_For_Field}</td>\r\n                  <td>{result.Description}</td>\r\n                  <td>{result.Date_Modified}</td>\r\n                  <td>{result.From_EditableSchema}</td>\r\n            \r\n                </tr>\r\n          )\r\n          })}\r\n            \r\n          \r\n          </tbody>\r\n        </table>\r\n         \r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}