{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sher\\\\Desktop\\\\datahub tagging ui\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css'; //Bootstrap and jQuery libraries\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js'; //Datatable Modules\n\nimport \"datatables.net-dt/js/dataTables.dataTables\";\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\";\nimport $ from 'jquery'; //For API Requests\n\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  //Declare data store variables\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [],\n      cols: []\n    };\n  }\n\n  componentDidMount() {\n    function insertAt(array, index, ...elementsArray) {\n      array.splice(index, 0, ...elementsArray);\n    }\n\n    function moveArrayItemToNewIndex(arr, old_index, new_index) {\n      if (new_index >= arr.length) {\n        var k = new_index - arr.length + 1;\n\n        while (k--) {\n          arr.push(undefined);\n        }\n      }\n\n      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n      return arr;\n    }\n\n    ; //array holders for rows(rowsholder) and column name holder(colsholder)\n\n    const colsholder = [];\n    const finalrowsholder = [];\n    var finaleditedholder = [];\n    var tempfieldnameholder = [];\n    var tempdatasetnameholder = [];\n    var elements;\n    var testholder; // on here, nid to make Python FASTAPI as middleware to bypass CORS, then axios.get(http://localhost/FASTAPI)\n\n    axios.get('http://localhost:8000/getdatasets', {\n      headers: {\n        'X-RestLi-Protocol-Version': '2.0.0',\n        'X-RestLi-Method': 'finder'\n      }\n    }).then(res => {\n      //pushing datasets data to 'elements' varaiable\n      elements = res[\"data\"][\"elements\"];\n      let count = 0; //For loop for all fields in dataset, compare with editableSchema fields; if exist, push both to first element of each array, thus index positions of both edited Schema\n      // and Schemameta(original) will match \n\n      for (let i = 0; i < elements.length; i++) {\n        for (let j = 0; j < elements[i][\"schemaMetadata\"][\"fields\"].length; j++) {\n          if (elements[i][\"editableSchemaMetadata\"] !== undefined) {\n            for (let a = 0; a < elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"].length; a++) {\n              if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][a][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]) {\n                moveArrayItemToNewIndex(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"], a, 0);\n                moveArrayItemToNewIndex(elements[i][\"schemaMetadata\"][\"fields\"], j, 0);\n              }\n            }\n          }\n        }\n      } //for loop for total datasets iteration\n\n\n      for (let i = 0; i < elements.length; i++) {\n        for (let j = 0; j < elements[i][\"schemaMetadata\"][\"fields\"].length; j++) {\n          let rowsholder = {};\n          Object.assign(rowsholder, {\n            \"ID\": count\n          });\n          count += 1; //for loop for platform and table name of datasets, always add key and value pair when pushing to array so aDataSort can refrence later\n\n          Object.assign(rowsholder, {\n            \"Origin\": elements[i][\"origin\"]\n          });\n          Object.assign(rowsholder, {\n            \"Platform_Name\": elements[i][\"platform\"].split(':').pop()\n          });\n          Object.assign(rowsholder, {\n            \"Dataset_Name\": elements[i][\"name\"]\n          }); //For elements with global tags, if they not equal to undefined, push the tags to array, else push ' ' to array\n\n          if (elements[i][\"globalTags\"] !== undefined) {\n            let globaltagholder = [];\n\n            for (let k = 0; k < elements[i][\"globalTags\"][\"tags\"].length; k++) {\n              if (k > 0) {\n                globaltagholder.push(', ' + elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop());\n              } else {\n                globaltagholder.push(elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop());\n              }\n            }\n\n            Object.assign(rowsholder, {\n              \"Global_Tags\": globaltagholder\n            });\n          } else {\n            let globaltagholder = [];\n            globaltagholder.push(' ');\n            Object.assign(rowsholder, {\n              \"Global_Tags\": globaltagholder\n            });\n          } //injest field name\n\n\n          Object.assign(rowsholder, {\n            \"Field_Name\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]\n          }); //if the dataset even has editableSchemadata\n\n          if (elements[i][\"editableSchemaMetadata\"] !== undefined) {\n            //Field in editableSchemaMetadata has to match fields in schemaMetadata\n            if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j] !== undefined && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]) {\n              let tagsholder = [];\n\n              for (let l = 0; l < elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length; l++) {\n                if (l > 1) {\n                  tagsholder.push(', ' + elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop());\n                } else {\n                  tagsholder.push(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop());\n                }\n              }\n\n              Object.assign(rowsholder, {\n                \"Editable_Tags\": tagsholder\n              });\n              Object.assign(rowsholder, {\n                \"From_EditableSchema\": \"Yes\"\n              }); //If have editableschemametadata but fieldpaths dont match, set to NO\n            } else {\n              let tagsholder = [];\n              tagsholder.push(' ');\n              Object.assign(rowsholder, {\n                \"Editable_Tags\": tagsholder\n              });\n              Object.assign(rowsholder, {\n                \"From_EditableSchema\": \"No\"\n              });\n            } //If do not have editableschemametadata at all\n\n          } else {\n            let tagsholder = [];\n            tagsholder.push(' ');\n            Object.assign(rowsholder, {\n              \"Editable_Tags\": tagsholder\n            });\n            Object.assign(rowsholder, {\n              \"From_EditableSchema\": \"No\"\n            });\n          } //Filling tags from schemametadata\n\n\n          if (elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"] !== undefined) {\n            let tagsholder = [];\n\n            for (let m = 0; m < elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length; m++) {\n              if (m > 0) {\n                tagsholder.push(', ' + elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop());\n              } else {\n                tagsholder.push(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop());\n              }\n            }\n\n            Object.assign(rowsholder, {\n              \"Original_Tags\": tagsholder\n            });\n          } else {\n            let tagsholder = [];\n            tagsholder.push(' ');\n            Object.assign(rowsholder, {\n              \"Original_Tags\": tagsholder\n            });\n          } //Checks for Description in editableschemaMetaData first, then checks in SchemaMetaData.\n\n\n          if (elements[i][\"editableSchemaMetadata\"] !== undefined) {\n            if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j] !== undefined && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"] && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"] !== undefined) {\n              Object.assign(rowsholder, {\n                \"Description\": elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]\n              });\n            } else if (elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] !== undefined) {\n              Object.assign(rowsholder, {\n                \"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]\n              });\n            }\n          } //Since already checked in editableschemaMetaData , now just checks in schemametadata, else if empty, fill with blank\n\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] !== undefined) {\n            Object.assign(rowsholder, {\n              \"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]\n            });\n          }\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] === undefined) {\n            Object.assign(rowsholder, {\n              \"Description\": ' '\n            });\n          } //for Timestamp, checks if editableschemametadata exists, if not use schemametadata\n\n\n          if (elements[i][\"editableSchemaMetadata\"] === undefined) {\n            let date = new Date(elements[i][\"schemaMetadata\"][\"lastModified\"][\"time\"]);\n            Object.assign(rowsholder, {\n              \"Date_Modified\": date.toLocaleString()\n            });\n          } else {\n            let date = new Date(elements[i][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]);\n            Object.assign(rowsholder, {\n              \"Date_Modified\": date.toLocaleString()\n            });\n          }\n\n          finalrowsholder.push(rowsholder);\n          rowsholder = {};\n        }\n      } //Columns header defintion #important\n\n\n      colsholder.push(\"#\", \"Platform_Name\", \"Dataset_Name\", \"Global_Tags\", \"Field_Name\", \"Editable_Tags\", \"Original_Tags\", \"Description\", \"Date_Modified\", \"From_EditableSchema\", \"Origin\"); // testing\n      //console.log(elements)\n      // console.log(\"Platform name:\", (elements[0][\"platform\"]).split(':').pop())\n      // console.log(\"table name:\", elements[0][\"name\"])\n      // console.log(\"Global Tags:\", elements[0][\"globalTags\"][\"tags\"])\n      // console.log(\"Field name:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"fieldPath\"])\n      // console.log(\"Tag name for field:\", (elements[0][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][0][\"globalTags\"][\"tags\"][0][\"tag\"].split(':').pop()))\n      // console.log(\"Description:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"description\"])\n      // if((elements[0][\"editableSchemaMetadata\"])=== undefined || (elements[0][\"editableSchemaMetadata\"]) ==0)\n      // {\n      //   console.log(\"Last Modified:\", Date(elements[0][\"schemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\n      // } else{\n      //   console.log(\"Last Modified:\", Date(elements[0][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\n      // }\n      //Storing users detail in state array object\n      //for(let i = 0; i < res.data.response[0].length; i++){\n      // colsholder.push(res.data.response[0][i]['Field']) \n      //}\n      //for(let i = 0; i < res.data.response[1].length; i++){\n      // rowsholder =(res.data.response[1][i]) \n      //}\n\n      console.log(\"Sorted fields of data retrived from GMS:\", elements);\n      console.log(\"Column Headers:\", colsholder);\n      testholder = finalrowsholder;\n      console.log(\"Data to feed columns:\", finalrowsholder);\n      this.setState({\n        rows: finalrowsholder,\n        cols: colsholder\n      });\n    }); //init Datatable, #example is the table element id\n\n    setTimeout(() => {\n      var example = $('#example').DataTable({\n        order: [[0, \"asc\"]],\n        responsive: true,\n        \"lengthMenu\": [[5, 10, 15, -1], [5, 10, 15, \"All\"]],\n        columnDefs: [{\n          \"type\": \"html-input\",\n          targets: [3, 5, 6, 7],\n          render: function (rows, type, row) {\n            return '<input class=\"form-control\" type=\"text\"  value =\"' + rows + '\" style= \"width:auto\">';\n          }\n        }, {\n          \"targets\": [0, 9, 10],\n          \"visible\": false,\n          \"searchable\": false\n        }]\n      }); //Iterate thru all row and compare original data vs edited, if edited, add to array (finaleditedholder) to be sent to endpoint\n\n      $('#test').click(function () {\n        let editedrowsholder = {};\n        finaleditedholder = [];\n        example.rows().every(function () {\n          if (this.data()[3] !== $(example.cell(this.index(), 3).node()).find('input').val() || this.data()[5] !== $(example.cell(this.index(), 5).node()).find('input').val() || this.data()[6] !== $(example.cell(this.index(), 6).node()).find('input').val() || this.data()[7] !== $(example.cell(this.index(), 7).node()).find('input').val()) {\n            let date = new Date();\n            Object.assign(editedrowsholder, {\n              \"ID\": parseInt(this.data()[0]),\n              \"Origin\": this.data()[10],\n              \"Platform_Name\": this.data()[1],\n              \"Dataset_Name\": this.data()[2],\n              \"Global_Tags\": $(example.cell(this.index(), 3).node()).find('input').val(),\n              \"Field_Name\": this.data()[4],\n              \"Editable_Tags\": $(example.cell(this.index(), 5).node()).find('input').val(),\n              \"Original_tags\": $(example.cell(this.index(), 6).node()).find('input').val(),\n              \"Description\": $(example.cell(this.index(), 7).node()).find('input').val(),\n              \"Date_Modified\": Date.parse(date.toLocaleString())\n            });\n            finaleditedholder.push(editedrowsholder);\n            editedrowsholder = {};\n          }\n        });\n        console.log(\"First iteration:\", finaleditedholder); //Extracts the field names and dataset names from array which contain edits and store in temp arrays\n\n        for (let j = 0; j < finaleditedholder.length; j++) {\n          tempfieldnameholder.push(finaleditedholder[j][\"Field_Name\"]);\n          tempdatasetnameholder.push(finaleditedholder[j][\"Dataset_Name\"]);\n        }\n\n        editedrowsholder = {}; //iterate thru every row in table, check if row cell values(dataset name and field name) exist in temp arrays or not\n        //If condition (dataset exist, field name does not exist, came from editable schema ===true) is fuifilled, \n        //Takes the row and insert above the row containing the same dataset name in finaleditedholder\n\n        example.rows().every(function () {\n          if ((tempdatasetnameholder.includes(this.data()[2]) && !tempfieldnameholder.includes(this.data()[4]) && this.data()[9] === \"Yes\") === true) {\n            let date = new Date();\n            Object.assign(editedrowsholder, {\n              \"ID\": parseInt(this.data()[0]),\n              \"Origin\": this.data()[10],\n              \"Platform_Name\": this.data()[1],\n              \"Dataset_Name\": this.data()[2],\n              \"Global_Tags\": $(example.cell(this.index(), 3).node()).find('input').val(),\n              \"Field_Name\": this.data()[4],\n              \"Editable_Tags\": $(example.cell(this.index(), 5).node()).find('input').val(),\n              \"Original_Tags\": $(example.cell(this.index(), 6).node()).find('input').val(),\n              \"Description\": $(example.cell(this.index(), 7).node()).find('input').val(),\n              \"Date_Modified\": Date.parse(date.toLocaleString())\n            }); //If row id of row with same dataset name of edited array is > current selected row, insert row from temp array before, else insert after\n\n            if (finaleditedholder[tempdatasetnameholder.indexOf(this.data()[2])][\"ID\"] > this.data()[0]) {\n              insertAt(finaleditedholder, tempdatasetnameholder.indexOf(this.data()[2]), editedrowsholder);\n            } else {\n              insertAt(finaleditedholder, tempdatasetnameholder.indexOf(this.data()[2]) + 1, editedrowsholder);\n            }\n\n            editedrowsholder = {};\n          }\n        });\n        tempfieldnameholder = [];\n        tempdatasetnameholder = [];\n        console.log(\"Second iteration:\", finaleditedholder);\n        axios.post('http://localhost:8000/getresult', finalrowsholder //finaleditedholder\n        , {\n          headers: {\n            // Overwrite Axios's automatically set Content-Type\n            'Content-Type': 'application/json'\n          }\n        }).then(res => console.log(\"Response from what API received: \", res.data));\n      });\n    }, 100);\n  }\n\n  render() {\n    //Datatable HTML\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MainDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"jumbotron text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Datahub Tagging UI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"example\",\n          class: \"table table-striped table-bordered table-sm row-border hover mb-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: this.state.cols.map(result => {\n                return /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: result\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 15\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.state.rows.map(result => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                class: \"table-success\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.ID\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Platform_Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Dataset_Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Global_Tags\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Field_Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Editable_Tags\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Original_Tags\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Date_Modified\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.From_EditableSchema\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 393,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: result.Origin\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 15\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Sher/Desktop/datahub tagging ui/frontend/src/App.js"],"names":["React","$","axios","App","Component","constructor","props","state","rows","cols","componentDidMount","insertAt","array","index","elementsArray","splice","moveArrayItemToNewIndex","arr","old_index","new_index","length","k","push","undefined","colsholder","finalrowsholder","finaleditedholder","tempfieldnameholder","tempdatasetnameholder","elements","testholder","get","headers","then","res","count","i","j","a","rowsholder","Object","assign","split","pop","globaltagholder","tagsholder","l","m","date","Date","toLocaleString","console","log","setState","setTimeout","example","DataTable","order","responsive","columnDefs","targets","render","type","row","click","editedrowsholder","every","data","cell","node","find","val","parseInt","parse","includes","indexOf","post","map","result","ID","Platform_Name","Dataset_Name","Global_Tags","Field_Name","Editable_Tags","Original_Tags","Description","Date_Modified","From_EditableSchema","Origin"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n//Bootstrap and jQuery libraries\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'jquery/dist/jquery.min.js';\r\n//Datatable Modules\r\nimport \"datatables.net-dt/js/dataTables.dataTables\";\r\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\";\r\nimport $ from 'jquery'; \r\n//For API Requests\r\nimport axios from 'axios';\r\nclass App extends React.Component {\r\n  \r\n  \r\n  //Declare data store variables\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        rows: [],\r\n        cols:[]\r\n              }\r\n\r\n\r\n              \r\n      }\r\n\r\n \r\n  componentDidMount() {\r\n    function insertAt(array, index, ...elementsArray) {\r\n      array.splice(index, 0, ...elementsArray);\r\n  }\r\n    function moveArrayItemToNewIndex(arr, old_index, new_index) {\r\n      if (new_index >= arr.length) {\r\n          var k = new_index - arr.length + 1;\r\n          while (k--) {\r\n              arr.push(undefined);\r\n          }\r\n      }\r\n      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n      return arr; \r\n    };\r\n    //array holders for rows(rowsholder) and column name holder(colsholder)\r\n    const colsholder =[]\r\n  \r\n    const finalrowsholder=[]\r\n\r\n    var finaleditedholder=[]\r\n\r\n    var tempfieldnameholder=[]\r\n    var tempdatasetnameholder=[]\r\n    var elements\r\n   \r\n    var testholder \r\n    // on here, nid to make Python FASTAPI as middleware to bypass CORS, then axios.get(http://localhost/FASTAPI)\r\n    axios.get('http://localhost:8000/getdatasets', {\r\n      headers: {\r\n          'X-RestLi-Protocol-Version': '2.0.0',\r\n          'X-RestLi-Method': 'finder'      \r\n      }\r\n    }).then(res => \r\n    { //pushing datasets data to 'elements' varaiable\r\n      elements = (res[\"data\"][\"elements\"])\r\n      let count =0\r\n    //For loop for all fields in dataset, compare with editableSchema fields; if exist, push both to first element of each array, thus index positions of both edited Schema\r\n    // and Schemameta(original) will match \r\n    for(let i=0; i< elements.length; i++){\r\n      for(let j=0; j< elements[i][\"schemaMetadata\"][\"fields\"].length; j++){\r\n        if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n          for( let a = 0; a<elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"].length; a++){\r\n            if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][a][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]){\r\n              moveArrayItemToNewIndex(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"],a,0)\r\n              moveArrayItemToNewIndex(elements[i][\"schemaMetadata\"][\"fields\"],j,0)\r\n            }   \r\n      }\r\n    }\r\n  }\r\n}\r\n//for loop for total datasets iteration\r\n    for(let i=0; i< elements.length; i++){\r\n      for(let j=0; j< elements[i][\"schemaMetadata\"][\"fields\"].length; j++){\r\n        let rowsholder={}\r\n        \r\n        Object.assign(rowsholder,{\"ID\": count});\r\n        count+=1\r\n        //for loop for platform and table name of datasets, always add key and value pair when pushing to array so aDataSort can refrence later\r\n        Object.assign(rowsholder,{\"Origin\": elements[i][\"origin\"]});\r\n        Object.assign(rowsholder, {\"Platform_Name\": (elements[i][\"platform\"]).split(':').pop()});\r\n        Object.assign(rowsholder,{\"Dataset_Name\": elements[i][\"name\"]});\r\n        \r\n        //For elements with global tags, if they not equal to undefined, push the tags to array, else push ' ' to array\r\n        if(elements[i][\"globalTags\"]!==undefined){\r\n          let globaltagholder= []\r\n          \r\n        \r\n          for(let k=0; k< elements[i][\"globalTags\"][\"tags\"].length; k++){\r\n            if(k>0){\r\n              globaltagholder.push(', '+ elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop())\r\n            }\r\n            else{\r\n        globaltagholder.push(elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop())\r\n    }\r\n  }\r\n    Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n \r\n  }     else{\r\n          let globaltagholder= []\r\n          globaltagholder.push(' ')\r\n          Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n  }\r\n   \r\n    //injest field name\r\n      Object.assign(rowsholder,({\"Field_Name\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]}))\r\n\r\n      //if the dataset even has editableSchemadata\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        //Field in editableSchemaMetadata has to match fields in schemaMetadata\r\n        if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined\r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"])\r\n     \r\n        {\r\n         let tagsholder= []\r\n          for(let l=0; l< elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length; l++){\r\n            if(l>1){\r\n              tagsholder.push(', ' + (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop()))\r\n            }else{\r\n            tagsholder.push((elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop()))\r\n        }\r\n      }\r\n        Object.assign(rowsholder, ({\"Editable_Tags\": tagsholder}))\r\n        Object.assign(rowsholder, ({\"From_EditableSchema\": \"Yes\"}))\r\n        //If have editableschemametadata but fieldpaths dont match, set to NO\r\n      }else{\r\n        let tagsholder= []\r\n        tagsholder.push(' ')\r\n        Object.assign(rowsholder,({\"Editable_Tags\": tagsholder}))\r\n        Object.assign(rowsholder, ({\"From_EditableSchema\": \"No\"}))\r\n      } \r\n      //If do not have editableschemametadata at all\r\n    }else{\r\n      let tagsholder= []\r\n      tagsholder.push(' ')\r\n      Object.assign(rowsholder,({\"Editable_Tags\": tagsholder}))\r\n      Object.assign(rowsholder, ({\"From_EditableSchema\": \"No\"}))\r\n    }\r\n       \r\n      //Filling tags from schemametadata\r\n      if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"]!==undefined){\r\n        let tagsholder= []\r\n        for(let m=0; m< elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length; m++){\r\n            if(m>0){\r\n          tagsholder.push(', ' + (elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop()))\r\n         \r\n        }else{\r\n          tagsholder.push((elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop()))\r\n      }\r\n    }\r\n        Object.assign(rowsholder,({\"Original_Tags\": tagsholder}))\r\n      }else{\r\n        let tagsholder= []\r\n        tagsholder.push(' ')\r\n        Object.assign(rowsholder,({\"Original_Tags\": tagsholder}))\r\n      }\r\n\r\n\r\n      //Checks for Description in editableschemaMetaData first, then checks in SchemaMetaData.\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"] \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]!==undefined)\r\n        {\r\n          Object.assign(rowsholder,({\"Description\": elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]}))\r\n         \r\n      } else if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined)\r\n      {\r\n        Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n      }\r\n    }\r\n\r\n\r\n    //Since already checked in editableschemaMetaData , now just checks in schemametadata, else if empty, fill with blank\r\n      if (elements[i][\"editableSchemaMetadata\"] ===undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined){\r\n            Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n\r\n      }if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] === undefined){\r\n        Object.assign(rowsholder,({\"Description\": ' '}))\r\n      }\r\n      //for Timestamp, checks if editableschemametadata exists, if not use schemametadata\r\n      if(elements[i][\"editableSchemaMetadata\"] === undefined){\r\n        let date = new Date (elements[i][\"schemaMetadata\"][\"lastModified\"][\"time\"])\r\n        \r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }else{\r\n        let date = new Date (elements[i][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"])\r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }\r\n      finalrowsholder.push(rowsholder)\r\n      rowsholder = {}\r\n    }\r\n    \r\n  }\r\n  //Columns header defintion #important\r\n    colsholder.push(\"#\", \"Platform_Name\", \"Dataset_Name\",\"Global_Tags\", \"Field_Name\", \"Editable_Tags\",\"Original_Tags\", \"Description\", \"Date_Modified\",\"From_EditableSchema\",\"Origin\")\r\n   \r\n      // testing\r\n      //console.log(elements)\r\n      // console.log(\"Platform name:\", (elements[0][\"platform\"]).split(':').pop())\r\n      // console.log(\"table name:\", elements[0][\"name\"])\r\n      // console.log(\"Global Tags:\", elements[0][\"globalTags\"][\"tags\"])\r\n      // console.log(\"Field name:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"fieldPath\"])\r\n      // console.log(\"Tag name for field:\", (elements[0][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][0][\"globalTags\"][\"tags\"][0][\"tag\"].split(':').pop()))\r\n      // console.log(\"Description:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"description\"])\r\n      // if((elements[0][\"editableSchemaMetadata\"])=== undefined || (elements[0][\"editableSchemaMetadata\"]) ==0)\r\n      // {\r\n      //   console.log(\"Last Modified:\", Date(elements[0][\"schemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\r\n      // } else{\r\n      //   console.log(\"Last Modified:\", Date(elements[0][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\r\n      // }\r\n      \r\n      \r\n      \r\n      //Storing users detail in state array object\r\n      //for(let i = 0; i < res.data.response[0].length; i++){\r\n      // colsholder.push(res.data.response[0][i]['Field']) \r\n      //}\r\n    \r\n      //for(let i = 0; i < res.data.response[1].length; i++){\r\n     // rowsholder =(res.data.response[1][i]) \r\n     //}\r\n     console.log(\"Sorted fields of data retrived from GMS:\",elements)\r\n    console.log(\"Column Headers:\",colsholder)\r\n  \r\n   \r\n    testholder = finalrowsholder\r\n    console.log(\"Data to feed columns:\",finalrowsholder)\r\n    this.setState({rows: finalrowsholder, cols: colsholder});\r\n       }); \r\n    //init Datatable, #example is the table element id\r\n    setTimeout(()=>{                        \r\n    var example =$('#example').DataTable(\r\n      {order: [[ 0, \"asc\" ]],\r\n        responsive: true,\r\n     \r\n        \r\n        \"lengthMenu\": [[5, 10, 15, -1], [5, 10, 15, \"All\"]],\r\n        columnDefs : [\r\n          { \"type\": \"html-input\", targets: [3,5,6,7],\r\n            render: function (rows, type, row) {\r\n          \r\n              return '<input class=\"form-control\" type=\"text\"  value =\"'+ rows + '\" style= \"width:auto\">';\r\n            \r\n            }\r\n            \r\n          }, {\r\n            \"targets\": [0,9,10],\r\n            \"visible\": false,\r\n            \"searchable\": false\r\n        }\r\n        ]\r\n        \r\n      }\r\n\r\n    )\r\n\r\n \r\n //Iterate thru all row and compare original data vs edited, if edited, add to array (finaleditedholder) to be sent to endpoint\r\n  $('#test').click(function () {\r\n    let editedrowsholder = {};\r\n    finaleditedholder=[];\r\n    example.rows().every(function(){\r\n    \r\n      if(this.data()[3] !== ($(example.cell(this.index(), 3).node()).find('input').val()) \r\n      ||this.data()[5] !== ($(example.cell(this.index(), 5).node()).find('input').val())\r\n      ||this.data()[6] !== ($(example.cell(this.index(), 6).node()).find('input').val())\r\n      ||this.data()[7] !== ($(example.cell(this.index(), 7).node()).find('input').val())\r\n      ){\r\n        let date = new Date();\r\n        Object.assign(editedrowsholder,({\"ID\": parseInt(this.data()[0]),\"Origin\": this.data()[10], \"Platform_Name\": this.data()[1], \"Dataset_Name\": this.data()[2],\r\n        \"Global_Tags\": ($(example.cell(this.index(), 3).node()).find('input').val()), \"Field_Name\": this.data()[4], \r\n        \"Editable_Tags\": ($(example.cell(this.index(), 5).node()).find('input').val()),\r\n        \"Original_tags\": ($(example.cell(this.index(), 6).node()).find('input').val()),\r\n        \"Description\": ($(example.cell(this.index(), 7).node()).find('input').val()), \"Date_Modified\": Date.parse(date.toLocaleString())}))\r\n        finaleditedholder.push(editedrowsholder)\r\n        editedrowsholder={}\r\n        }\r\n  \r\n  \r\n      });\r\n      console.log(\"First iteration:\", finaleditedholder)\r\n     //Extracts the field names and dataset names from array which contain edits and store in temp arrays\r\n      for(let j=0; j< finaleditedholder.length; j++){\r\n        tempfieldnameholder.push(finaleditedholder[j][\"Field_Name\"])\r\n        tempdatasetnameholder.push(finaleditedholder[j][\"Dataset_Name\"])\r\n      }\r\n     \r\n      editedrowsholder= {}\r\n      //iterate thru every row in table, check if row cell values(dataset name and field name) exist in temp arrays or not\r\n      //If condition (dataset exist, field name does not exist, came from editable schema ===true) is fuifilled, \r\n      //Takes the row and insert above the row containing the same dataset name in finaleditedholder\r\n      example.rows().every(function(){\r\n        if((tempdatasetnameholder.includes(this.data()[2]) && !tempfieldnameholder.includes(this.data()[4]) && this.data()[9]===\"Yes\")===true){\r\n          let date = new Date();\r\n          Object.assign(editedrowsholder,({\"ID\": parseInt(this.data()[0]), \"Origin\": this.data()[10], \"Platform_Name\": this.data()[1], \"Dataset_Name\": this.data()[2],\r\n          \"Global_Tags\": ($(example.cell(this.index(), 3).node()).find('input').val()), \"Field_Name\": this.data()[4], \r\n          \"Editable_Tags\": ($(example.cell(this.index(), 5).node()).find('input').val()),\r\n          \"Original_Tags\": ($(example.cell(this.index(), 6).node()).find('input').val()),\r\n          \"Description\": ($(example.cell(this.index(), 7).node()).find('input').val()), \"Date_Modified\": Date.parse(date.toLocaleString())}))\r\n          //If row id of row with same dataset name of edited array is > current selected row, insert row from temp array before, else insert after\r\n          if(finaleditedholder[tempdatasetnameholder.indexOf(this.data()[2])][\"ID\"] > this.data()[0]){\r\n            insertAt(finaleditedholder, tempdatasetnameholder.indexOf(this.data()[2]), editedrowsholder)\r\n          }else{\r\n            insertAt(finaleditedholder, tempdatasetnameholder.indexOf(this.data()[2]) +1, editedrowsholder)\r\n          }\r\n          \r\n          editedrowsholder={}\r\n          }\r\n    });\r\n\r\n      tempfieldnameholder=[]\r\n      tempdatasetnameholder=[]\r\n      console.log(\"Second iteration:\", finaleditedholder) \r\n      \r\n\r\n    \r\n\r\n    \r\n    axios.post('http://localhost:8000/getresult',\r\n  \r\n    finalrowsholder\r\n    //finaleditedholder\r\n    \r\n  ,{\r\n        headers: {\r\n          // Overwrite Axios's automatically set Content-Type\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    )\r\n    .then(res =>  console.log(\"Response from what API received: \", res.data))\r\n   \r\n    \r\n  });\r\n\r\n  \r\n\r\n  }, 100);\r\n  \r\n  \r\n  \r\n  \r\n\r\n\r\n \r\n\r\n }\r\n\r\n \r\n  render(){\r\n    //Datatable HTML\r\n  return (\r\n    <div className=\"MainDiv\">\r\n      <div class=\"jumbotron text-center\">\r\n          <h3>Datahub Tagging UI</h3>\r\n      </div>\r\n      \r\n      <div className=\"container\" >\r\n          \r\n      <table id=\"example\" class=\"table table-striped table-bordered table-sm row-border hover mb-5\">\r\n          <thead>\r\n            <tr>\r\n            {this.state.cols.map((result) => {\r\n            return (\r\n              <th>{result}</th>\r\n          )\r\n          })}\r\n              \r\n              \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {this.state.rows.map((result) => {\r\n            return (\r\n              <tr class=\"table-success\">\r\n     \r\n                  <td>{result.ID}</td>\r\n                  <td>{result.Platform_Name}</td>\r\n                  <td>{result.Dataset_Name}</td>\r\n                  <td>{result.Global_Tags}</td>\r\n                  <td>{result.Field_Name}</td>\r\n                  <td>{result.Editable_Tags}</td>\r\n                  <td>{result.Original_Tags}</td>\r\n                  <td>{result.Description}</td>\r\n                  <td>{result.Date_Modified}</td>\r\n                  <td>{result.From_EditableSchema}</td>\r\n                  <td>{result.Origin}</td>\r\n                </tr>\r\n          )\r\n          })}\r\n            \r\n          \r\n          </tbody>\r\n        </table>\r\n         \r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}