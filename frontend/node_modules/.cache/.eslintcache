[{"C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\index.js":"1","C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\App.js":"2","C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\reportWebVitals.js":"3"},{"size":503,"mtime":1626948893629,"results":"4","hashOfConfig":"5"},{"size":21710,"mtime":1632205182154,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1m51b83",{"filePath":"11","messages":"12","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\index.js",[],["16","17"],"C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\App.js",["18","19","20","21","22","23","24","25","26","27"],"import React from 'react';\r\nimport './App.css';\r\n//Bootstrap and jQuery libraries\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'jquery/dist/jquery.min.js';\r\n//Datatable Modules\r\nimport \"datatables.net-dt/js/dataTables.dataTables\";\r\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\";\r\nimport $, { isEmptyObject } from 'jquery'; \r\n//For API Requests\r\nimport axios from 'axios';\r\n//For tab panes\r\nimport Tabs from 'react-bootstrap/Tabs'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport TabContainer from 'react-bootstrap/TabContainer'\r\nimport TabContent from 'react-bootstrap/TabContent'\r\nimport TabPane from 'react-bootstrap/TabPane'\r\nclass App extends React.Component {\r\n  \r\n  \r\n  //Declare data store variables\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        rows: [],\r\n        fieldcols:[],\r\n        datasetcols:[],\r\n        datasetrows: []\r\n              }\r\n      }\r\n\r\n \r\n  componentDidMount() {\r\n    function insertAt(array, index, ...elementsArray) {\r\n      array.splice(index, 0, ...elementsArray);\r\n  };\r\n    function moveArrayItemToNewIndex(arr, old_index, new_index) {\r\n      if (new_index >= arr.length) {\r\n          var k = new_index - arr.length + 1;\r\n          while (k--) {\r\n              arr.push(undefined);\r\n          }\r\n      }\r\n      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n      return arr; \r\n    };\r\n    //array holders for rows(rowsholder) and 2 column name holder(fieldcolsholder and datasetcolsholder)\r\n    const fieldcolsholder =[]\r\n\r\n    const datasetcolsholder=[]\r\n  \r\n    const finalrowsholder=[]\r\n\r\n\r\n    var finaleditedholder=[]\r\n\r\n    var elements\r\n    var BrowsePathsholder=[]\r\n\r\n\r\n\r\n    // on here, nid to make Python FASTAPI as middleware to bypass CORS, then axios.get(http://localhost/FASTAPI)\r\n    axios.get('http://localhost:8000/getdatasets', {\r\n      headers: {\r\n          'X-RestLi-Protocol-Version': '2.0.0'\r\n      }\r\n    }).then(res => \r\n    { //pushing datasets data to 'elements' varaiable\r\n      \r\n      elements = (res[\"data\"])\r\n      let count =0\r\n      // aspectSchemaMetadata=['aspects']+['com.linkedin.schema.SchemaMetadata']\r\n      \r\n    //For loop for all fields in dataset, compare with editableSchema fields; if exist, push both to first element of each array, thus index positions of both edited Schema\r\n    // and Schemameta(original) will match \r\n    for(let i=0; i< elements.length; i++){\r\n      for(let j=0; j< elements[i][\"schemaMetadata\"][\"fields\"].length; j++){\r\n        if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n          for( let a = 0; a<elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"].length; a++){\r\n            if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][a][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]){\r\n              moveArrayItemToNewIndex(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"],a,0)\r\n              moveArrayItemToNewIndex(elements[i][\"schemaMetadata\"][\"fields\"],j,0)\r\n            }   \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n//for loop for total datasets iteration\r\n    for(let i=0; i< elements.length; i++){\r\n      for(let j=0; j< elements[i][\"schemaMetadata\"][\"fields\"].length; j++){\r\n        let rowsholder={}\r\n        \r\n        Object.assign(rowsholder,{\"ID\": count});\r\n        count+=1\r\n        //for loop for platform and table name of datasets, always add key and value pair when pushing to array so aDataSort can refrence later\r\n        Object.assign(rowsholder,{\"Origin\": elements[i][\"DatasetKey\"][\"origin\"]});\r\n        Object.assign(rowsholder, {\"Platform_Name\": elements[i][\"DatasetKey\"][\"platform\"].split(':').pop()});\r\n        Object.assign(rowsholder,{\"Dataset_Name\": elements[i][\"DatasetKey\"][\"name\"]});\r\n        \r\n        //For elements with global tags, if they not equal to undefined, push the tags to array, else push ' ' to array\r\n        if(elements[i][\"GlobalTags\"]!==undefined){\r\n          let globaltagholder= []\r\n        \r\n          if(elements[i][\"GlobalTags\"][\"tags\"].length===0){\r\n            globaltagholder.push(' ')\r\n          }\r\n          else{\r\n          for(let k=0; k< elements[i][\"GlobalTags\"][\"tags\"].length; k++){\r\n            \r\n            if(k>0){\r\n              globaltagholder.push(', '+ elements[i][\"GlobalTags\"][\"tags\"][k][\"tag\"].split(':').pop())\r\n            }\r\n            else{\r\n        globaltagholder.push(elements[i][\"GlobalTags\"][\"tags\"][k][\"tag\"].split(':').pop())\r\n      }\r\n      }\r\n      }\r\n        Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n    \r\n      }  else{\r\n          let globaltagholder= []\r\n          globaltagholder.push(' ')\r\n          Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n  }\r\n   \r\n    //injest field name\r\n      Object.assign(rowsholder,({\"Field_Name\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]}))\r\n\r\n      //if the dataset even has editableSchemadata\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        //Field in editableSchemaMetadata has to match fields in schemaMetadata\r\n        if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined\r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"])\r\n        { let tagsholder= []\r\n          if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"] !== undefined)\r\n          {\r\n          \r\n          if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length ===0){\r\n          tagsholder.push(' ')\r\n        }else{\r\n          for(let l=0; l< elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length; l++){\r\n            if(l>0){\r\n              tagsholder.push(', ' + (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop()))\r\n            }else{\r\n            tagsholder.push((elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop()))\r\n        }\r\n      }\r\n    }\r\n    }\r\n        Object.assign(rowsholder, ({\"Editable_Tags\": tagsholder}))\r\n        \r\n        //If have editableschemametadata but fieldpaths dont match, set to NO\r\n      }else{\r\n        let tagsholder= []\r\n        tagsholder.push(' ')\r\n        Object.assign(rowsholder,({\"Editable_Tags\": tagsholder}))\r\n        \r\n      } \r\n      //If do not have editableschemametadata at all\r\n    }else{\r\n      let tagsholder= []\r\n      tagsholder.push(' ')\r\n      Object.assign(rowsholder,({\"Editable_Tags\": tagsholder}))\r\n     \r\n    }\r\n       \r\n      //Filling tags from schemametadata\r\n      if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"]!==undefined){\r\n        let tagsholder= []\r\n        if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length ===0){\r\n          tagsholder.push(' ')\r\n        }else{\r\n        for(let m=0; m< elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length; m++){\r\n            if(m>0){\r\n          tagsholder.push(', ' + (elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop()))\r\n         \r\n        }else{\r\n          tagsholder.push((elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop()))\r\n      }\r\n    }\r\n  }\r\n        Object.assign(rowsholder,({\"Original_Tags\": tagsholder}))\r\n      }else{\r\n        let tagsholder= []\r\n        tagsholder.push(' ')\r\n        Object.assign(rowsholder,({\"Original_Tags\": tagsholder}))\r\n      }\r\n\r\n\r\n      //Checks for Description in editableschemaMetaData first, then checks in SchemaMetaData.\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"] \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]!==undefined)\r\n        { \r\n          Object.assign(rowsholder,({\"Description\": elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]}))\r\n         \r\n      } else if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined)\r\n      {\r\n        Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n      }\r\n    }\r\n\r\n\r\n    //Since already checked in editableschemaMetaData , now just checks in schemametadata, else if empty, fill with blank\r\n      if (elements[i][\"editableSchemaMetadata\"] ===undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined){\r\n            Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n\r\n      }if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] === undefined){\r\n        Object.assign(rowsholder,({\"Description\": ' '}))\r\n      }\r\n      //for Timestamp, checks if editableschemametadata exists, if not use schemametadata\r\n      if(elements[i][\"editableSchemaMetadata\"] === undefined){\r\n        let date = new Date (elements[i][\"schemaMetadata\"][\"lastModified\"][\"time\"])\r\n        \r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }else{\r\n        let date = new Date (elements[i][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"])\r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }\r\n      //for dataset Browsepaths\r\n      if(elements[i][\"BrowsePaths\"] !== undefined){\r\n        let BrowsePathsholder=[]\r\n   \r\n        if(elements[i][\"BrowsePaths\"][\"paths\"]!==[]){\r\n          for(let j=0; j< elements[i][\"BrowsePaths\"][\"paths\"].length; j++){\r\n            if(j>0){\r\n            BrowsePathsholder.push(', ',elements[i][\"BrowsePaths\"][\"paths\"][j])\r\n          }else{\r\n            BrowsePathsholder.push(elements[i][\"BrowsePaths\"][\"paths\"][j])\r\n          }}\r\n        \r\n        }else{\r\n          BrowsePathsholder=[]\r\n          BrowsePathsholder.push(' ')\r\n        }\r\n        Object.assign(rowsholder,({ \"Dataset_BrowsePath\": BrowsePathsholder}))\r\n      }else{\r\n        BrowsePathsholder=[]\r\n        BrowsePathsholder.push(' ')\r\n        Object.assign(rowsholder,({ \"Dataset_BrowsePath\": BrowsePathsholder}))\r\n      }\r\n\r\n      //for dataset description, the if conditions are terrible but required\r\n      if(elements[i][\"editableDatasetProperties\"]!==undefined){\r\n        if(elements[i][\"editableDatasetProperties\"][\"description\"]!==undefined){\r\n          Object.assign(rowsholder,({ \"Dataset_Description\": elements[i][\"editableDatasetProperties\"][\"description\"]}))\r\n        }else{\r\n          if(elements[i][\"DatasetProperties\"]!== undefined){\r\n            if(elements[i][\"DatasetProperties\"][\"description\"]!== undefined){\r\n              Object.assign(rowsholder,({ \"Dataset_Description\": elements[i][\"DatasetProperties\"][\"description\"]}))\r\n            }else{\r\n              Object.assign(rowsholder,({ \"Dataset_Description\": ' '}))\r\n            }\r\n          }else{\r\n            Object.assign(rowsholder,({ \"Dataset_Description\": ' '}))\r\n          }\r\n        }\r\n      }else if(elements[i][\"DatasetProperties\"]!== undefined){\r\n        if(elements[i][\"DatasetProperties\"][\"description\"]!== undefined){\r\n          Object.assign(rowsholder,({ \"Dataset_Description\": elements[i][\"DatasetProperties\"][\"description\"]}))\r\n        }else{\r\n          Object.assign(rowsholder,({ \"Dataset_Description\": ' '}))\r\n        }\r\n      }else{\r\n        Object.assign(rowsholder,({ \"Dataset_Description\": ' '}))\r\n      }\r\n      \r\n      \r\n      finalrowsholder.push(rowsholder)\r\n      rowsholder = {}\r\n      \r\n    }\r\n  \r\n  }\r\n  //Columns header defintion #important\r\n    fieldcolsholder.push(\"#\", \"Platform_Name\", \"Dataset_Name\", \"Field_Name\", \"Editable_Tags\",\"Original_Tags\", \"Description\", \"Date_Modified\")\r\n    datasetcolsholder.push(\"Platform_Name\", \"Dataset_Name\", \"Dataset_BrowsePath\", \"Global_Tags\",\"Dataset_Description\", \"Date_Modified\",\"Origin\")\r\n   \r\n    const datasetrowsholder= []\r\n    var tempdatasetrowNames=[]\r\n\r\n    for(let j=0; j< finalrowsholder.length; j++){\r\n      if (!(tempdatasetrowNames.includes(finalrowsholder[j].Dataset_Name))){\r\n        datasetrowsholder.push(finalrowsholder[j])\r\n        tempdatasetrowNames.push(finalrowsholder[j].Dataset_Name)\r\n      }\r\n    }\r\n  \r\n    console.log(\"Sorted fields of data retrived from GMS:\",elements)\r\n    console.log(\"Column Headers:\",fieldcolsholder)\r\n    \r\n    console.log(\"Data to feed dataset columns:\",datasetrowsholder)\r\n    console.log(\"Data to feed field columns:\",finalrowsholder)\r\n\r\n\r\n    this.setState({datasetrows: datasetrowsholder,rows: finalrowsholder, fieldcols: fieldcolsholder, datasetcols: datasetcolsholder});\r\n       }); \r\n   \r\n    //init Datatable, #fieldTable #datasetTable are the table element ids\r\n    setTimeout(()=>{                        \r\n      var fieldTable =$('#fieldTable').DataTable(\r\n        {order: [[ 0, \"asc\" ]],\r\n          responsive: true,\r\n       \r\n       \r\n          \"lengthMenu\": [[10, 20, 100, -1], [10, 20, 100, \"All\"]],\r\n          columnDefs : [\r\n            { \"type\": \"html-input\", targets: [4,5,6],\r\n              render: function (rows, type, row) {\r\n            \r\n                return '<input class=\"form-control\" type=\"text\"  value =\"'+ rows + '\" style= \"width:auto\">';\r\n              \r\n              }\r\n              \r\n            }, {\r\n              \"targets\": [0],\r\n              \"visible\": false,\r\n              \"searchable\": false\r\n          }\r\n          ]\r\n          \r\n        }\r\n  \r\n      )\r\n      var datasetTable =$('#datasetTable').DataTable(\r\n        {order: [[ 0, \"asc\" ]],\r\n          responsive: true,\r\n       \r\n       \r\n          \"lengthMenu\": [[10, 20, 100, -1], [10, 20, 100, \"All\"]],\r\n          columnDefs : [\r\n            { \"type\": \"html-input\", targets: [2,3,4],\r\n              render: function (rows, type, row) {\r\n            \r\n                return '<input class=\"form-control\" type=\"text\"  value =\"'+ rows + '\" style= \"width:auto\">';\r\n              \r\n              }\r\n              \r\n            }, {\r\n              \"targets\": [6],\r\n              \"visible\": false,\r\n              \"searchable\": false\r\n          }\r\n          ]\r\n          \r\n        }\r\n  \r\n      )\r\n\r\n //Iterate thru field and dataset table, add edited dataset to a tempArray then use it to add fields' properties and dataset properties to an object and send to Fast API\r\n  $('#test').click(function () {\r\n    let editedrowsholder = {};\r\n    let tempIDnameholder=[];\r\n    let tempdatasetnameholder=[];\r\n    let finaleditedholder=[];\r\n\r\n    function anyChangesfromFields() {fieldTable.rows().every(function(){\r\n      if(this.data()[4] !== ($(fieldTable.cell(this.index(), 4).node()).find('input').val()) \r\n      ||this.data()[5] !== ($(fieldTable.cell(this.index(), 5).node()).find('input').val())\r\n      ||this.data()[6] !== ($(fieldTable.cell(this.index(), 6).node()).find('input').val())\r\n      ){\r\n        //Extracts the edited dataset names from array which contain edits and store in temp arrays\r\n        tempdatasetnameholder.push(this.data()[2])\r\n      }})};\r\n    function anyChangesfromDatasets() {datasetTable.rows().every(function(){\r\n      if(this.data()[2] !== ($(datasetTable.cell(this.index(), 2).node()).find('input').val())\r\n      ||this.data()[3] !== ($(datasetTable.cell(this.index(), 3).node()).find('input').val())\r\n      ||this.data()[4] !== ($(datasetTable.cell(this.index(), 4).node()).find('input').val())\r\n      ){\r\n        if(!tempdatasetnameholder.includes(this.data()[1])){\r\n        tempdatasetnameholder.push(this.data()[1])\r\n        }\r\n      }\r\n    })}\r\n\r\n      //iterate thru every row in table, check if row cell values(dataset name and ID) exist in temp arrays or not\r\n      //If condition (dataset exist, Unique ID does not exist) is fuifilled, \r\n      //Takes the row and insert in finaleditedholder\r\n      function addAllFieldsfromDataset() {fieldTable.rows().every(function(){\r\n        if((tempdatasetnameholder.includes(this.data()[2]) && !tempIDnameholder.includes(parseInt(this.data()[0])))===true){\r\n          let date = new Date();\r\n          Object.assign(editedrowsholder,({\"ID\": parseInt(this.data()[0]), \"Platform_Name\": this.data()[1], \"Dataset_Name\": this.data()[2],\r\n          \"Field_Name\": this.data()[3], \r\n          \"Editable_Tags\": ($(fieldTable.cell(this.index(), 4).node()).find('input').val()),\r\n          \"Original_Tags\": ($(fieldTable.cell(this.index(), 5).node()).find('input').val()),\r\n          \"Description\": ($(fieldTable.cell(this.index(), 6).node()).find('input').val()), \r\n          \"Date_Modified\": Date.parse(date.toLocaleString()),\r\n       \r\n        }))\r\n          //If row id of row with same dataset name of edited array is > current selected row, insert row from temp array before, else insert after\r\n          finaleditedholder.push(editedrowsholder)\r\n          \r\n          editedrowsholder={}\r\n          }\r\n    })};\r\n      //Adds the dataset level properties to each field objects\r\n      function addDatasetProperties() {datasetTable.rows().every(function(){\r\n        for(let j=0; j< finaleditedholder.length; j++){\r\n          if((this.data()[0])=== finaleditedholder[j].Platform_Name && (this.data()[1])=== finaleditedholder[j].Dataset_Name){\r\n            Object.assign(finaleditedholder[j],({\r\n              \"Browse_Path\": ($(datasetTable.cell(this.index(), 2).node()).find('input').val()),\r\n              \"Global_Tags\": ($(datasetTable.cell(this.index(), 3).node()).find('input').val()),\r\n              \"Dataset_Description\": ($(datasetTable.cell(this.index(), 4).node()).find('input').val()),\r\n              \"Origin\": this.data()[6]\r\n      \r\n            }))\r\n            \r\n          \r\n          }\r\n         \r\n        }\r\n      }\r\n      \r\n      )};\r\n\r\n    //Checks for changes in fields table, add dataset to tempdatasetArray\r\n    anyChangesfromFields();\r\n    //Checks for changes in dataset table, add dataset to tempdatasetArray if not in Array\r\n    anyChangesfromDatasets();\r\n    // Assigns all fields with changes or not to an object base on Tempdatasetholder and TempIdholder\r\n    addAllFieldsfromDataset();\r\n    //Adds dataset level properties to the fields assigned to the object\r\n    addDatasetProperties();\r\n    console.log(\"Payload to send to FASTAPI: \",finaleditedholder)\r\n    \r\n\r\n \r\n\r\n    \r\n    axios.post('http://localhost:8000/getresult',\r\n  \r\n    \r\n    finaleditedholder\r\n    \r\n  ,{\r\n        headers: {\r\n          // Overwrite Axios's automatically set Content-Type\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    )\r\n  //   .then(res =>  \r\n      \r\n      \r\n  //   {\r\n      \r\n      \r\n  //     window.alert(res.data)\r\n  //     window.location.reload();\r\n      \r\n    \r\n  // })\r\n  // .catch(error => {\r\n  //   window.alert(\"Error, Try refresh first and try again\\r\\n\\r\\nIf not \" +error.response.data)\r\n  //   window.location.reload(); //Logs a string: Error: Request failed with status code 404\r\n  \r\n  // });\r\n     \r\n    \r\n  \r\n\r\n   \r\n    \r\n  });\r\n\r\n  \r\n// this number is the timeout timer setting, IMPORTANT IF UR RECORDS TAKE LONGER, SET A LONGER TIMEOUT\r\n}, 550);\r\n  \r\n  \r\n }\r\n\r\n \r\n  render(){\r\n    //Datatable HTML\r\n  return (\r\n    <div className=\"MainDiv\">\r\n      <div class=\"jumbotron text-center\">\r\n          <h3>Datahub Tagging UI</h3>\r\n      </div>\r\n  <div className=\"container\" >\r\n  <Tabs fill defaultActiveKey=\"Datasets\"  id=\"uncontrolled-tab-example\" className=\"mb-3\">\r\n    <Tab eventKey=\"Datasets\" title=\"Datasets\">\r\n    \r\n    \r\n          \r\n    <table id=\"datasetTable\" class=\"table table-striped table-bordered table-sm row-border hover mb-5\"> \r\n        <thead>\r\n          <tr>\r\n          {this.state.datasetcols.map((result) => {\r\n          return (\r\n            <th>{result}</th>\r\n        )\r\n        })}\r\n            \r\n            \r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        {this.state.datasetrows.map((result) => {\r\n          return (\r\n            <tr class=\"table-success\">\r\n   \r\n                <td>{result.Platform_Name}</td>\r\n                <td>{result.Dataset_Name}</td>\r\n                <td>{result.Dataset_BrowsePath}</td>\r\n                <td>{result.Global_Tags}</td>\r\n                <td>{result.Dataset_Description}</td>\r\n                <td>{result.Date_Modified}</td>\r\n                <td>{result.Origin}</td>\r\n                \r\n              </tr>\r\n        )\r\n        })}\r\n          \r\n        \r\n        </tbody>\r\n      </table>\r\n    \r\n    </Tab>\r\n    <Tab eventKey=\"Fields\" title=\"Fields\">\r\n  \r\n \r\n          \r\n    <table id=\"fieldTable\" class=\"table table-striped table-bordered table-sm row-border hover mb-5\"> \r\n        <thead>\r\n          <tr>\r\n          {this.state.fieldcols.map((result) => {\r\n          return (\r\n            <th>{result}</th>\r\n        )\r\n        })}\r\n            \r\n            \r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        {this.state.rows.map((result) => {\r\n          return (\r\n            <tr class=\"table-success\">\r\n   \r\n                <td>{result.ID}</td>\r\n                <td>{result.Platform_Name}</td>\r\n                <td>{result.Dataset_Name}</td>\r\n                <td>{result.Field_Name}</td>\r\n                <td>{result.Editable_Tags}</td>\r\n                <td>{result.Original_Tags}</td>\r\n                <td>{result.Description}</td>\r\n                <td>{result.Date_Modified}</td>\r\n              </tr>\r\n        )\r\n        })}\r\n          \r\n        \r\n        </tbody>\r\n      </table>\r\n       \r\n    \r\n    </Tab>\r\n   \r\n    \r\n  </Tabs>\r\n  </div>\r\n      </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\nexport default App;","C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\reportWebVitals.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":9,"column":13,"nodeType":"34","messageId":"35","endLine":9,"endColumn":26},{"ruleId":"32","severity":1,"message":"36","line":15,"column":8,"nodeType":"34","messageId":"35","endLine":15,"endColumn":20},{"ruleId":"32","severity":1,"message":"37","line":16,"column":8,"nodeType":"34","messageId":"35","endLine":16,"endColumn":18},{"ruleId":"32","severity":1,"message":"38","line":17,"column":8,"nodeType":"34","messageId":"35","endLine":17,"endColumn":15},{"ruleId":"32","severity":1,"message":"39","line":34,"column":14,"nodeType":"34","messageId":"35","endLine":34,"endColumn":22},{"ruleId":"32","severity":1,"message":"40","line":55,"column":9,"nodeType":"34","messageId":"35","endLine":55,"endColumn":26},{"ruleId":"41","severity":1,"message":"42","line":359,"column":62,"nodeType":"43","messageId":"44","endLine":359,"endColumn":70},{"ruleId":"41","severity":1,"message":"42","line":367,"column":66,"nodeType":"43","messageId":"44","endLine":367,"endColumn":74},{"ruleId":"41","severity":1,"message":"42","line":381,"column":67,"nodeType":"43","messageId":"44","endLine":381,"endColumn":75},{"ruleId":"41","severity":1,"message":"42","line":399,"column":66,"nodeType":"43","messageId":"44","endLine":399,"endColumn":74},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'isEmptyObject' is defined but never used.","Identifier","unusedVar","'TabContainer' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'insertAt' is defined but never used.","'finaleditedholder' is assigned a value but never used.","array-callback-return","Array.prototype.every() expects a return value from function.","FunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]