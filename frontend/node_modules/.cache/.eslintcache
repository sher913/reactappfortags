[{"C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\index.js":"1","C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\App.js":"2","C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\reportWebVitals.js":"3"},{"size":503,"mtime":1626948893629,"results":"4","hashOfConfig":"5"},{"size":17357,"mtime":1629714465720,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1m51b83",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\index.js",[],["16","17"],"C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\App.js",["18","19","20"],"import React from 'react';\r\nimport './App.css';\r\n//Bootstrap and jQuery libraries\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'jquery/dist/jquery.min.js';\r\n//Datatable Modules\r\nimport \"datatables.net-dt/js/dataTables.dataTables\";\r\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\";\r\nimport $ from 'jquery'; \r\n//For API Requests\r\nimport axios from 'axios';\r\nclass App extends React.Component {\r\n  \r\n  \r\n  //Declare data store variables\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        rows: [],\r\n        cols:[]\r\n              }\r\n\r\n\r\n              \r\n      }\r\n\r\n \r\n  componentDidMount() {\r\n    function insertAt(array, index, ...elementsArray) {\r\n      array.splice(index, 0, ...elementsArray);\r\n  }\r\n    function moveArrayItemToNewIndex(arr, old_index, new_index) {\r\n      if (new_index >= arr.length) {\r\n          var k = new_index - arr.length + 1;\r\n          while (k--) {\r\n              arr.push(undefined);\r\n          }\r\n      }\r\n      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n      return arr; \r\n    };\r\n    //array holders for rows(rowsholder) and column name holder(colsholder)\r\n    const colsholder =[]\r\n  \r\n    const finalrowsholder=[]\r\n\r\n\r\n    var finaleditedholder=[]\r\n\r\n    var tempfieldnameholder=[]\r\n    var tempdatasetnameholder=[]\r\n    var elements\r\n   \r\n    var testholder \r\n    // on here, nid to make Python FASTAPI as middleware to bypass CORS, then axios.get(http://localhost/FASTAPI)\r\n    axios.get('http://localhost:8000/getdatasets', {\r\n      headers: {\r\n          'X-RestLi-Protocol-Version': '2.0.0',\r\n          'X-RestLi-Method': 'finder'      \r\n      }\r\n    }).then(res => \r\n    { //pushing datasets data to 'elements' varaiable\r\n      elements = (res[\"data\"][\"elements\"])\r\n      let count =0\r\n    //For loop for all fields in dataset, compare with editableSchema fields; if exist, push both to first element of each array, thus index positions of both edited Schema\r\n    // and Schemameta(original) will match \r\n    for(let i=0; i< elements.length; i++){\r\n      for(let j=0; j< elements[i][\"schemaMetadata\"][\"fields\"].length; j++){\r\n        if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n          for( let a = 0; a<elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"].length; a++){\r\n            if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][a][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]){\r\n              moveArrayItemToNewIndex(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"],a,0)\r\n              moveArrayItemToNewIndex(elements[i][\"schemaMetadata\"][\"fields\"],j,0)\r\n            }   \r\n      }\r\n    }\r\n  }\r\n}\r\n//for loop for total datasets iteration\r\n    for(let i=0; i< elements.length; i++){\r\n      for(let j=0; j< elements[i][\"schemaMetadata\"][\"fields\"].length; j++){\r\n        let rowsholder={}\r\n        \r\n        Object.assign(rowsholder,{\"ID\": count});\r\n        count+=1\r\n        //for loop for platform and table name of datasets, always add key and value pair when pushing to array so aDataSort can refrence later\r\n        Object.assign(rowsholder,{\"Origin\": elements[i][\"origin\"]});\r\n        Object.assign(rowsholder, {\"Platform_Name\": (elements[i][\"platform\"]).split(':').pop()});\r\n        Object.assign(rowsholder,{\"Dataset_Name\": elements[i][\"name\"]});\r\n        \r\n        //For elements with global tags, if they not equal to undefined, push the tags to array, else push ' ' to array\r\n        if(elements[i][\"globalTags\"]!==undefined){\r\n          let globaltagholder= []\r\n          \r\n        \r\n          for(let k=0; k< elements[i][\"globalTags\"][\"tags\"].length; k++){\r\n            if(k>0){\r\n              globaltagholder.push(', '+ elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop())\r\n            }\r\n            else{\r\n        globaltagholder.push(elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop())\r\n    }\r\n  }\r\n    Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n \r\n  }     else{\r\n          let globaltagholder= []\r\n          globaltagholder.push(' ')\r\n          Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n  }\r\n   \r\n    //injest field name\r\n      Object.assign(rowsholder,({\"Field_Name\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]}))\r\n\r\n      //if the dataset even has editableSchemadata\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        //Field in editableSchemaMetadata has to match fields in schemaMetadata\r\n        if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined\r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"])\r\n        \r\n        {let tagsholder= []\r\n          if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length ===0){\r\n          tagsholder.push(' ')\r\n        }else{\r\n          for(let l=0; l< elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length; l++){\r\n            if(l>0){\r\n              tagsholder.push(', ' + (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop()))\r\n            }else{\r\n            tagsholder.push((elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop()))\r\n        }\r\n      }\r\n    }\r\n        Object.assign(rowsholder, ({\"Editable_Tags\": tagsholder}))\r\n        Object.assign(rowsholder, ({\"From_EditableSchema\": \"Yes\"}))\r\n        //If have editableschemametadata but fieldpaths dont match, set to NO\r\n      }else{\r\n        let tagsholder= []\r\n        tagsholder.push(' ')\r\n        Object.assign(rowsholder,({\"Editable_Tags\": tagsholder}))\r\n        Object.assign(rowsholder, ({\"From_EditableSchema\": \"No\"}))\r\n      } \r\n      //If do not have editableschemametadata at all\r\n    }else{\r\n      let tagsholder= []\r\n      tagsholder.push(' ')\r\n      Object.assign(rowsholder,({\"Editable_Tags\": tagsholder}))\r\n      Object.assign(rowsholder, ({\"From_EditableSchema\": \"No\"}))\r\n    }\r\n       \r\n      //Filling tags from schemametadata\r\n      if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"]!==undefined){\r\n        let tagsholder= []\r\n        if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length ===0){\r\n          tagsholder.push(' ')\r\n        }else{\r\n        for(let m=0; m< elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length; m++){\r\n            if(m>0){\r\n          tagsholder.push(', ' + (elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop()))\r\n         \r\n        }else{\r\n          tagsholder.push((elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop()))\r\n      }\r\n    }\r\n  }\r\n        Object.assign(rowsholder,({\"Original_Tags\": tagsholder}))\r\n      }else{\r\n        let tagsholder= []\r\n        tagsholder.push(' ')\r\n        Object.assign(rowsholder,({\"Original_Tags\": tagsholder}))\r\n      }\r\n\r\n\r\n      //Checks for Description in editableschemaMetaData first, then checks in SchemaMetaData.\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"] \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]!==undefined)\r\n        {\r\n          Object.assign(rowsholder,({\"Description\": elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]}))\r\n         \r\n      } else if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined)\r\n      {\r\n        Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n      }\r\n    }\r\n\r\n\r\n    //Since already checked in editableschemaMetaData , now just checks in schemametadata, else if empty, fill with blank\r\n      if (elements[i][\"editableSchemaMetadata\"] ===undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined){\r\n            Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n\r\n      }if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] === undefined){\r\n        Object.assign(rowsholder,({\"Description\": ' '}))\r\n      }\r\n      //for Timestamp, checks if editableschemametadata exists, if not use schemametadata\r\n      if(elements[i][\"editableSchemaMetadata\"] === undefined){\r\n        let date = new Date (elements[i][\"schemaMetadata\"][\"lastModified\"][\"time\"])\r\n        \r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }else{\r\n        let date = new Date (elements[i][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"])\r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }\r\n      finalrowsholder.push(rowsholder)\r\n      rowsholder = {}\r\n    }\r\n    \r\n  }\r\n  //Columns header defintion #important\r\n    colsholder.push(\"#\", \"Platform_Name\", \"Dataset_Name\",\"Global_Tags\", \"Field_Name\", \"Editable_Tags\",\"Original_Tags\", \"Description\", \"Date_Modified\",\"From_EditableSchema\",\"Origin\")\r\n   \r\n      // testing\r\n      //console.log(elements)\r\n      // console.log(\"Platform name:\", (elements[0][\"platform\"]).split(':').pop())\r\n      // console.log(\"table name:\", elements[0][\"name\"])\r\n      // console.log(\"Global Tags:\", elements[0][\"globalTags\"][\"tags\"])\r\n      // console.log(\"Field name:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"fieldPath\"])\r\n      // console.log(\"Tag name for field:\", (elements[0][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][0][\"globalTags\"][\"tags\"][0][\"tag\"].split(':').pop()))\r\n      // console.log(\"Description:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"description\"])\r\n      // if((elements[0][\"editableSchemaMetadata\"])=== undefined || (elements[0][\"editableSchemaMetadata\"]) ==0)\r\n      // {\r\n      //   console.log(\"Last Modified:\", Date(elements[0][\"schemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\r\n      // } else{\r\n      //   console.log(\"Last Modified:\", Date(elements[0][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\r\n      // }\r\n      \r\n      \r\n      \r\n      //Storing users detail in state array object\r\n      //for(let i = 0; i < res.data.response[0].length; i++){\r\n      // colsholder.push(res.data.response[0][i]['Field']) \r\n      //}\r\n    \r\n      //for(let i = 0; i < res.data.response[1].length; i++){\r\n     // rowsholder =(res.data.response[1][i]) \r\n     //}\r\n     console.log(\"Sorted fields of data retrived from GMS:\",elements)\r\n    console.log(\"Column Headers:\",colsholder)\r\n  \r\n   \r\n    testholder = finalrowsholder\r\n    console.log(\"Data to feed columns:\",finalrowsholder)\r\n    this.setState({rows: finalrowsholder, cols: colsholder});\r\n       }); \r\n    //init Datatable, #example is the table element id\r\n    setTimeout(()=>{                        \r\n    var example =$('#example').DataTable(\r\n      {order: [[ 0, \"asc\" ]],\r\n        responsive: true,\r\n     \r\n        \r\n        \"lengthMenu\": [[5, 10, 15, -1], [5, 10, 15, \"All\"]],\r\n        columnDefs : [\r\n          { \"type\": \"html-input\", targets: [3,5,6,7],\r\n            render: function (rows, type, row) {\r\n          \r\n              return '<input class=\"form-control\" type=\"text\"  value =\"'+ rows + '\" style= \"width:auto\">';\r\n            \r\n            }\r\n            \r\n          }, {\r\n            \"targets\": [0,9,10],\r\n            \"visible\": false,\r\n            \"searchable\": false\r\n        }\r\n        ]\r\n        \r\n      }\r\n\r\n    )\r\n\r\n \r\n //Iterate thru all row and compare original data vs edited, if edited, add to array (finaleditedholder) to be sent to endpoint\r\n  $('#test').click(function () {\r\n    let editedrowsholder = {};\r\n    finaleditedholder=[];\r\n    example.rows().every(function(){\r\n    \r\n      if(this.data()[3] !== ($(example.cell(this.index(), 3).node()).find('input').val()) \r\n      ||this.data()[5] !== ($(example.cell(this.index(), 5).node()).find('input').val())\r\n      ||this.data()[6] !== ($(example.cell(this.index(), 6).node()).find('input').val())\r\n      ||this.data()[7] !== ($(example.cell(this.index(), 7).node()).find('input').val())\r\n      ){\r\n        let date = new Date();\r\n        Object.assign(editedrowsholder,({\"ID\": parseInt(this.data()[0]),\"Origin\": this.data()[10], \"Platform_Name\": this.data()[1], \"Dataset_Name\": this.data()[2],\r\n        \"Global_Tags\": ($(example.cell(this.index(), 3).node()).find('input').val()), \"Field_Name\": this.data()[4], \r\n        \"Editable_Tags\": ($(example.cell(this.index(), 5).node()).find('input').val()),\r\n        \"Original_Tags\": ($(example.cell(this.index(), 6).node()).find('input').val()),\r\n        \"Description\": ($(example.cell(this.index(), 7).node()).find('input').val()), \"Date_Modified\": Date.parse(date.toLocaleString())}))\r\n        finaleditedholder.push(editedrowsholder)\r\n        editedrowsholder={}\r\n        }\r\n  \r\n  \r\n      });\r\n      console.log(\"First iteration:\", finaleditedholder)\r\n     //Extracts the field names and dataset names from array which contain edits and store in temp arrays\r\n      for(let j=0; j< finaleditedholder.length; j++){\r\n        tempfieldnameholder.push(finaleditedholder[j][\"Field_Name\"])\r\n        tempdatasetnameholder.push(finaleditedholder[j][\"Dataset_Name\"])\r\n      }\r\n     \r\n      editedrowsholder= {}\r\n      //iterate thru every row in table, check if row cell values(dataset name and field name) exist in temp arrays or not\r\n      //If condition (dataset exist, field name does not exist, came from editable schema ===true) is fuifilled, \r\n      //Takes the row and insert above the row containing the same dataset name in finaleditedholder\r\n      example.rows().every(function(){\r\n        if((tempdatasetnameholder.includes(this.data()[2]) && !tempfieldnameholder.includes(this.data()[4]) && this.data()[9]===\"Yes\")===true){\r\n          let date = new Date();\r\n          Object.assign(editedrowsholder,({\"ID\": parseInt(this.data()[0]), \"Origin\": this.data()[10], \"Platform_Name\": this.data()[1], \"Dataset_Name\": this.data()[2],\r\n          \"Global_Tags\": ($(example.cell(this.index(), 3).node()).find('input').val()), \"Field_Name\": this.data()[4], \r\n          \"Editable_Tags\": ($(example.cell(this.index(), 5).node()).find('input').val()),\r\n          \"Original_Tags\": ($(example.cell(this.index(), 6).node()).find('input').val()),\r\n          \"Description\": ($(example.cell(this.index(), 7).node()).find('input').val()), \"Date_Modified\": Date.parse(date.toLocaleString())}))\r\n          //If row id of row with same dataset name of edited array is > current selected row, insert row from temp array before, else insert after\r\n          if(finaleditedholder[tempdatasetnameholder.indexOf(this.data()[2])][\"ID\"] > this.data()[0]){\r\n            insertAt(finaleditedholder, tempdatasetnameholder.indexOf(this.data()[2]), editedrowsholder)\r\n          }else{\r\n            insertAt(finaleditedholder, tempdatasetnameholder.indexOf(this.data()[2]) +1, editedrowsholder)\r\n          }\r\n          \r\n          editedrowsholder={}\r\n          }\r\n    });\r\n\r\n      tempfieldnameholder=[]\r\n      tempdatasetnameholder=[]\r\n      console.log(\"Second iteration:\", finaleditedholder) \r\n      \r\n\r\n    \r\n\r\n    \r\n    axios.post('http://localhost:8000/getresult',\r\n  \r\n    \r\n    finaleditedholder\r\n    \r\n  ,{\r\n        headers: {\r\n          // Overwrite Axios's automatically set Content-Type\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    )\r\n    .then(res =>  console.log(\"Response from what getresult endpoint received: \", res.data))\r\n     \r\n    \r\n    \r\n\r\n   \r\n    \r\n  });\r\n\r\n  \r\n\r\n  }, 100);\r\n  \r\n  \r\n  \r\n  \r\n\r\n\r\n \r\n\r\n }\r\n\r\n \r\n  render(){\r\n    //Datatable HTML\r\n  return (\r\n    <div className=\"MainDiv\">\r\n      <div class=\"jumbotron text-center\">\r\n          <h3>Datahub Tagging UI</h3>\r\n      </div>\r\n      \r\n      <div className=\"container\" >\r\n          \r\n      <table id=\"example\" class=\"table table-striped table-bordered table-sm row-border hover mb-5\">\r\n          <thead>\r\n            <tr>\r\n            {this.state.cols.map((result) => {\r\n            return (\r\n              <th>{result}</th>\r\n          )\r\n          })}\r\n              \r\n              \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {this.state.rows.map((result) => {\r\n            return (\r\n              <tr class=\"table-success\">\r\n     \r\n                  <td>{result.ID}</td>\r\n                  <td>{result.Platform_Name}</td>\r\n                  <td>{result.Dataset_Name}</td>\r\n                  <td>{result.Global_Tags}</td>\r\n                  <td>{result.Field_Name}</td>\r\n                  <td>{result.Editable_Tags}</td>\r\n                  <td>{result.Original_Tags}</td>\r\n                  <td>{result.Description}</td>\r\n                  <td>{result.Date_Modified}</td>\r\n                  <td>{result.From_EditableSchema}</td>\r\n                  <td>{result.Origin}</td>\r\n                </tr>\r\n          )\r\n          })}\r\n            \r\n          \r\n          </tbody>\r\n        </table>\r\n         \r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\nexport default App;","C:\\Users\\Sher\\Desktop\\datahub\\datahub tagging ui\\frontend\\src\\reportWebVitals.js",[],{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":54,"column":9,"nodeType":"27","messageId":"28","endLine":54,"endColumn":19},{"ruleId":"29","severity":1,"message":"30","line":277,"column":26,"nodeType":"31","messageId":"32","endLine":277,"endColumn":34},{"ruleId":"29","severity":1,"message":"30","line":307,"column":28,"nodeType":"31","messageId":"32","endLine":307,"endColumn":36},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'testholder' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.every() expects a return value from function.","FunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]