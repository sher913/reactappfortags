[{"C:\\Users\\Sher\\Desktop\\datahub tagging ui\\frontend\\src\\index.js":"1","C:\\Users\\Sher\\Desktop\\datahub tagging ui\\frontend\\src\\App.js":"2","C:\\Users\\Sher\\Desktop\\datahub tagging ui\\frontend\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":9688,"mtime":1626453829306,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"hvp4zq",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\Sher\\Desktop\\datahub tagging ui\\frontend\\src\\index.js",[],["16","17"],"C:\\Users\\Sher\\Desktop\\datahub tagging ui\\frontend\\src\\App.js",["18"],"import React from 'react';\r\nimport './App.css';\r\n//Bootstrap and jQuery libraries\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'jquery/dist/jquery.min.js';\r\n//Datatable Modules\r\nimport \"datatables.net-dt/js/dataTables.dataTables\";\r\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\";\r\nimport $, { data } from 'jquery'; \r\n//For API Requests\r\nimport axios from 'axios';\r\nclass App extends React.Component {\r\n  //Declare data store variables\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        data: [],\r\n        cols:[]\r\n              }\r\n      }\r\n\r\n \r\n  componentDidMount() {\r\n    //array holders for data(rowsholder) and column name holder(colsholder)\r\n    const colsholder =[]\r\n  \r\n    const finalrowsholder=[]\r\n    /**\r\n * Define the chunk method in the prototype of an array\r\n * that returns an array with arrays of the given size.\r\n *\r\n * @param chunkSize {Integer} Size of every group\r\n */\r\n\r\n    \r\n    // on here, nid to make Python FASTAPI as middleware to bypass CORS, then axios.get(http://localhost/FASTAPI)\r\n    axios.get('http://localhost:8000/getdatasets', {\r\n      headers: {\r\n          'X-RestLi-Protocol-Version': '2.0.0',\r\n          'X-RestLi-Method': 'finder'      \r\n      }\r\n    }).then(res => \r\n    { //pushing datasets data to 'elements' varaiable\r\n      let elements = (res[\"data\"][\"elements\"])\r\n    //for loop for total datasets iteration\r\n    for(let i=0; i< elements.length; i++){\r\n      for(let j=0; j< elements[i][\"schemaMetadata\"][\"fields\"].length; j++){\r\n        let rowsholder={}\r\n    \r\n        //for loop for platform and table name of datasets, always add key and value pair when pushing to array so aDataSort can refrence later\r\n        Object.assign(rowsholder, {\"Platform_Name\": (elements[i][\"platform\"]).split(':').pop()});\r\n        Object.assign(rowsholder,{\"Table_Name\": elements[i][\"name\"]});\r\n      \r\n        //For elements with global tags, if they not equal to undefined, push the tags to array, else push ' ' to array\r\n        if(elements[i][\"globalTags\"]!==undefined){\r\n          let globaltagholder= []\r\n          \r\n        \r\n          for(let k=0; k< elements[i][\"globalTags\"][\"tags\"].length; k++){\r\n            \r\n        \r\n        globaltagholder.push(elements[i][\"globalTags\"][\"tags\"][k][\"tag\"].split(':').pop())\r\n    }\r\n    Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n \r\n  }     else{\r\n          let globaltagholder= []\r\n          globaltagholder.push(' ')\r\n          Object.assign(rowsholder, ({\"Global_Tags\": globaltagholder}))\r\n  }\r\n   \r\n    //injest field name\r\n      Object.assign(rowsholder,({\"Field_Name\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]}))\r\n     \r\n      //if the dataset even has editableSchemadata\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        //Field in editableSchemaMetadata has to match fields in schemaMetadata\r\n        if(elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"]===elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"]){\r\n          let tagsholder= []\r\n          for(let l=0; l< elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"].length; l++){\r\n            tagsholder.push((elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"globalTags\"][\"tags\"][l][\"tag\"].split(':').pop()))\r\n        }\r\n        Object.assign(rowsholder, ({\"Tags_For_Field\": tagsholder}))\r\n      }\r\n    }\r\n       \r\n      //Use schemadata tag if exist, since no editableSchemaMetaData\r\n      if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"]!==undefined){\r\n        \r\n        let tagsholder= []\r\n          for(let m=0; m< elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"].length; m++){\r\n          tagsholder.push((elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"][\"tags\"][m][\"tag\"].split(':').pop()))\r\n         \r\n        }\r\n        Object.assign(rowsholder,({\"Tags_For_Field\": tagsholder}))\r\n      }\r\n\r\n      //If both don't exist, push a blank\r\n      if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"globalTags\"] === undefined){\r\n        let tagsholder= []\r\n        tagsholder.push(' ')\r\n        Object.assign(rowsholder,({\"Tags_For_Field\": tagsholder}))\r\n      }\r\n     \r\n\r\n      //Checks for Description in editableschemaMetaData first, then checks in SchemaMetaData.\r\n      if(elements[i][\"editableSchemaMetadata\"]!==undefined){\r\n        if (elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j]!==undefined \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"fieldPath\"] === elements[i][\"schemaMetadata\"][\"fields\"][j][\"fieldPath\"] \r\n        && elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]!==undefined)\r\n        {\r\n          Object.assign(rowsholder,({\"Description\": elements[i][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][j][\"description\"]}))\r\n         \r\n      } else if(elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined)\r\n      {\r\n        Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n      }\r\n    }\r\n\r\n\r\n    //Since already checked in editableschemaMetaData , now just checks in schemametadata, else if empty, fill with blank\r\n      if (elements[i][\"editableSchemaMetadata\"] ===undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]!==undefined){\r\n            Object.assign(rowsholder,({\"Description\": elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"]}))\r\n\r\n      }if (elements[i][\"editableSchemaMetadata\"] === undefined && elements[i][\"schemaMetadata\"][\"fields\"][j][\"description\"] === undefined){\r\n        Object.assign(rowsholder,({\"Description\": ' '}))\r\n      }\r\n      //for Timestamp, checks if editableschemametadata exists, if not use schemametadata\r\n      if(elements[i][\"editableSchemaMetadata\"] === undefined){\r\n        let date = new Date (elements[i][\"schemaMetadata\"][\"lastModified\"][\"time\"])\r\n        \r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }else{\r\n        let date = new Date (elements[i][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"])\r\n        Object.assign(rowsholder,({ \"Date_Modified\": date.toLocaleString()}))\r\n      }\r\n      finalrowsholder.push(rowsholder)\r\n      rowsholder = {}\r\n    }\r\n    \r\n  }\r\n    colsholder.push(\"Platform_Name\", \"Table_Name\",\"Global_Tags\", \"Field_Name\", \"Tags_For_Field\", \"Description\", \"Date_Modified\")\r\n   \r\n      // testing\r\n      \r\n      // console.log(\"Platform name:\", (elements[0][\"platform\"]).split(':').pop())\r\n      // console.log(\"table name:\", elements[0][\"name\"])\r\n      // console.log(\"Global Tags:\", elements[0][\"globalTags\"][\"tags\"])\r\n      // console.log(\"Field name:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"fieldPath\"])\r\n      // console.log(\"Tag name for field:\", (elements[0][\"editableSchemaMetadata\"][\"editableSchemaFieldInfo\"][0][\"globalTags\"][\"tags\"][0][\"tag\"].split(':').pop()))\r\n      // console.log(\"Description:\", elements[0][\"schemaMetadata\"][\"fields\"][0][\"description\"])\r\n      // if((elements[0][\"editableSchemaMetadata\"])=== undefined || (elements[0][\"editableSchemaMetadata\"]) ==0)\r\n      // {\r\n      //   console.log(\"Last Modified:\", Date(elements[0][\"schemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\r\n      // } else{\r\n      //   console.log(\"Last Modified:\", Date(elements[0][\"editableSchemaMetadata\"][\"lastModified\"][\"time\"]).toLocaleString())\r\n      // }\r\n      \r\n      \r\n      \r\n      //Storing users detail in state array object\r\n      //for(let i = 0; i < res.data.response[0].length; i++){\r\n      // colsholder.push(res.data.response[0][i]['Field']) \r\n      //}\r\n    \r\n      //for(let i = 0; i < res.data.response[1].length; i++){\r\n     // rowsholder =(res.data.response[1][i]) \r\n     //}\r\n     console.log(\"fetched elements from GMS VIA FASTAPI:\",elements)\r\n    console.log(\"Column Headers:\",colsholder)\r\n  \r\n   \r\n\r\n    console.log(\"Data to feed columns:\",finalrowsholder)\r\n    this.setState({data: finalrowsholder, cols: colsholder});\r\n       }); \r\n    //init Datatable  \r\n    setTimeout(()=>{                        \r\n    $('#example').DataTable(\r\n      {\r\n        \"lengthMenu\": [[5, 10, 15, -1], [5, 10, 15, \"All\"]]\r\n      }\r\n    );\r\n  }, 100);\r\n }\r\n\r\n \r\n  render(){\r\n    //Datatable HTML\r\n  return (\r\n    <div className=\"MainDiv\">\r\n      <div class=\"jumbotron text-center\">\r\n          <h3>Sher's Intern Journey</h3>\r\n      </div>\r\n      \r\n      <div className=\"container\">\r\n          \r\n      <table id=\"example\" class=\"table table-striped table-bordered table-sm row-border hover mb-5\" >\r\n          <thead>\r\n            <tr>\r\n            {this.state.cols.map((result) => {\r\n            return (\r\n              <th>{result}</th>\r\n          )\r\n          })}\r\n              \r\n              \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {this.state.data.map((result) => {\r\n            return (\r\n              <tr class=\"table-success\">\r\n     \r\n                  \r\n                  <td>{result.Platform_Name}</td>\r\n                  <td>{result.Table_Name}</td>\r\n                  <td>{result.Global_Tags}</td>\r\n                  <td>{result.Field_Name}</td>\r\n                  <td>{result.Tags_For_Field}</td>\r\n                  <td>{result.Description}</td>\r\n                  <td>{result.Date_Modified}</td>\r\n                </tr>\r\n          )\r\n          })}\r\n            \r\n          \r\n          </tbody>\r\n        </table>\r\n         \r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n}\r\nexport default App;","C:\\Users\\Sher\\Desktop\\datahub tagging ui\\frontend\\src\\reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":9,"column":13,"nodeType":"25","messageId":"26","endLine":9,"endColumn":17},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'data' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]